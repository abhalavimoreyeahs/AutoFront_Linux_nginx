(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~setting-setting-module~status-active-active-module~status-manualDial-manualDial-module"],{

/***/ "./node_modules/plivo-browser-sdk/dist/plivo.js":
/*!******************************************************!*\
  !*** ./node_modules/plivo-browser-sdk/dist/plivo.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * Copyright 2018 Plivo Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * This software includes JsSIP under the following License.
 * 
 *     Name: JsSIP
 *     Author: José Luis Millán <jmillan@aliax.net>
 *     Core Developer: Iñaki Baz Castillo <ibc@aliax.net>
 *     Copyright (c) 2012-2015 José Luis Millán - Versatica <https://github.com/versatica/>
 * 
 * 
 *     License: The MIT License
 * 
 *     Permission is hereby granted, free of charge, to any person obtaining
 *     a copy of this software and associated documentation files (the
 *     "Software"), to deal in the Software without restriction, including
 *     without limitation the rights to use, copy, modify, merge, publish,
 *     distribute, sublicense, and/or sell copies of the Software, and to
 *     permit persons to whom the Software is furnished to do so, subject to
 *     the following conditions:
 * 
 *     The above copyright notice and this permission notice shall be
 *     included in all copies or substantial portions of the Software.
 * 
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *     LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *     OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *     WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *     
 * This software includes callstats.io under the following License.
 * 
 *     Copyright (c) 2013-2018, callstats.io
 *     All rights reserved.
 * 
 *     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *     AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *     ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 *     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *     POSSIBILITY OF SUCH DAMAGE.
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./lib/client.js":
/*!***********************!*\
  !*** ./lib/client.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var SipLib = __webpack_require__(/*! ../sipLib/JsSIP */ "./sipLib/JsSIP.js");
var inherits = __webpack_require__(/*! util */ "./node_modules/util/util.js").inherits;
var EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
var constants = __webpack_require__(/*! ./util/constants */ "./lib/util/constants.js");
var checkCodecPreference = __webpack_require__(/*! ./util/codecPreference */ "./lib/util/codecPreference.js");
var processSteams = __webpack_require__(/*! ./util/callAnalytics */ "./lib/util/callAnalytics.js");
var Logger = __webpack_require__(/*! ./util/logger */ "./lib/util/logger.js");
var audioUtil = __webpack_require__(/*! ./media/audioDevice */ "./lib/media/audioDevice.js");
var documentUtil = __webpack_require__(/*! ./media/document */ "./lib/media/document.js");
var headersUtil = __webpack_require__(/*! ./util/headers */ "./lib/util/headers.js");
var validateOptions = __webpack_require__(/*! ./util/validateOptions */ "./lib/util/validateOptions.js");
var compareVersions = __webpack_require__(/*! compare-versions */ "./node_modules/compare-versions/index.js");
var pkg = __webpack_require__(/*! ../package */ "./package.json");
var CallSession = __webpack_require__(/*! ./util/CallSession */ "./lib/util/CallSession.js");
var semverParser = __webpack_require__(/*! semver-parser */ "./node_modules/semver-parser/index.js");

// SDK related information 
const sdkName = pkg.name;
const sdkVersion = pkg.version;
const userAgent = navigator.userAgent;
const devicePlatform = navigator.platform;

function getBrowserVersion(){
  var N = navigator.appName, 
      ua = userAgent, tem;
  var M = ua.match(/(opera|chrome|safari|firefox|msie|trident)\/?\s*(\.?\d+(\.\d+)*)/i);
  if(M && (tem= ua.match(/version\/([\.\d]+)/i))!= null) {
    M[2]=tem[1];
  }
  M= M? [M[1], M[2]]: [N, navigator.appVersion,'-?'];
  return M[1];
}

function getOS(){
  var OSName = "Unknown OS";
  if (navigator.userAgent.indexOf("Win") != -1) OSName = "Windows";
  if (navigator.userAgent.indexOf("Mac") != -1) OSName = "Macintosh";
  if (navigator.userAgent.indexOf("Linux") != -1) OSName = "Linux";
  if (navigator.userAgent.indexOf("Android") != -1) OSName = "Android";
  if (navigator.userAgent.indexOf("like Mac") != -1) OSName = "iOS";
  return OSName;
}

const sdkVersionParse = semverParser.parseSemVer(sdkVersion , false); 
const browserVersion = getBrowserVersion();
const deviceOs = getOS();
const clientVersionParse = semverParser.parseSemVer(browserVersion , false ).matches? 
                          semverParser.parseSemVer(browserVersion , false ): browserVersion.split(".");

var GetStats = __webpack_require__(/*! ./stats/rtpstats */ "./lib/stats/rtpstats.js").getRTPStats;
var statsSocketLib = __webpack_require__(/*! ./stats/ws */ "./lib/stats/ws.js").statsSocket;
// authbySipToken
var tempSipClientToken;

// this local variable is created as a replacement of the older global Plivo.
const Plivo = {};

inherits(Client, EventEmitter);

function Client(options) {
  
  // Check for existing instance of Plivo object
  if (typeof window._PlivoInstance == "object") {
    Plivo.log.info("window.Plivo object and its instance already exist");
    return window._PlivoInstance;
  }

  if (!(this instanceof Client)) {
    return new Client(options);
  }
  
  /*
    Default options flag
  */
  var _options = {
    codecs: constants.DEFAULT_CODECS,
    enableTracking: true,
    debug: "INFO",
    permOnClick: false, //if true , mic permission is asked before call. Otherwise it will be asked on page load
    enableIPV6 :  false,
    audioConstraints : {},
    dscp : true,
    appId : null,
    appSecret : null,
    registrationDomainSocket : null,
    clientRegion : null,
    preDetectOwa: false,
    disableRtpTimeOut: false,
    allowMultipleIncomingCalls: false
  }
  /*
    Default instance flags
  */
  this.permOnClick = false;
  this.ringToneFlag = true;
  this.ringToneBackFlag = true;
  this.connectToneFlag = true;
  this.isLoggedIn = false;

  // localstorage support in chrome extension and in browsers
  this.localStorage = (typeof chrome != 'undefined' && chrome.storage) ? chrome.storage.local : window.localStorage;

  // Assigning Logger to Plivo.log to avoid to many line changes	
  Plivo.log = Logger;

  /*
    Validate all option we get
  */
  if (typeof options !== 'undefined') {
    /*
      Default option properties
    */
    for (var key in options) {
      // On validation failure cases will use default _options
      switch (key) {
        case "enableTracking":
          if (validateOptions.isBoolean(key, options[key])) {
            _options.enableTracking = options[key];
          }
          break;

        case "debug":
          options[key] = options[key].toUpperCase(); // Convert log mode to all uppercase
          if (validateOptions.debug(options[key], constants.DEBUG_MODES)) {
            _options.debug = options[key];
            if (options[key] == "ALL-PLAIN") {
              options[key] = "ALL"; // Since logger module does not support all-plain
            }
            Plivo.log.setLevel(options[key]);
          }else{
            Plivo.log.setLevel("INFO");
          }
          break;

        case "permOnClick" :
          if(validateOptions.isBoolean(key, options[key])){
            this.permOnClick = options[key];
            _options.permOnClick = options[key];
          }
          break;

        case "audioConstraints":
          if (options[key] && typeof options[key] === 'object') {
            _options.audioConstraints = options[key];
          }
          break;

        case "dscp":
          if (validateOptions.isBoolean(key, options[key])) {
            _options.dscp = options[key];
          }
          break;

        case "codecs":
          if (validateOptions.codecs(options[key], constants.DEFAULT_CODECS)) {
            _options.codecs = options[key];
          }
          break;

        case "appSecret":
          _options.appSecret = options[key];
          break;

        case "appId":
          _options.appId = options[key];
          break;

        case "registrationDomainSocket":
          _options.registrationDomainSocket = options[key];
          break;

        case "enableIPV6":
          break;

        case "clientRegion":
          if (validateOptions.region(options[key], constants.REGION)) {
            _options.clientRegion = options[key];
          }
          break;

        case "preDetectOwa":
          if (validateOptions.isBoolean(key, options[key])) {
            _options.preDetectOwa = options[key];
          }
          break;

        case "disableRtpTimeOut" :
          if(validateOptions.isBoolean(key, options[key])){
            _options.disableRtpTimeOut = options[key];
          }
          break;
        case "allowMultipleIncomingCalls" :
          if(validateOptions.isBoolean(key, options[key])){
            _options.allowMultipleIncomingCalls = options[key];
          }
          break;
        default :
          Plivo.log.warn('Ignoring invalid option key '+ key);
      }
    }
  }

  // sipLib logging will be based on localStorage.debug
  if (['ALL', 'ALL-PLAIN'].indexOf(_options.debug) != -1) {
    this.localStorage.debug = 'PlivoSIP:*';
    window._PlivoUseColorLog = true;
    // Turn of coloring in SIPlib console
    if (_options.debug == "ALL-PLAIN") {
      window._PlivoUseColorLog = false
    }
  } else {
    this.localStorage.debug = '';
  }

  //instantiates event emitter
  EventEmitter.call(this);
  
  this.phone = null;
  this._currentSession = null;
  
  /*
    callSession, callUUID, callDirection 
    are maintained for backward compatiblity,
    These infomations are available at this._currentSession
    So, do not use it for any reference in the code 
    but make sure you update this if this._currentSession infomation is updated.
  */
  this.callSession = null;
  this.callUUID = null;
  this.callDirection = null;
  
  this.lastCallUUID = null;
  this._lastCallSession = null;
  this.incomingInvites = new Map();
  this.incomingCallsInitiationTime = new Map();
  this.lastIncomingCall = null;
  this.callStats = null;
  this.sipAuthBy = null; // this takes plain, token, tokenCb as values
  this.userName = null;
  this.options = _options;
  this.callstatskey = null;
  this.statsioused = null;

  this.audio = {
    availableDevices: audioUtil.availableDevices,
    ringtoneDevices: audioUtil.ringtoneDevices,
    microphoneDevices: audioUtil.inputDevices,
    speakerDevices: audioUtil.outputDevices,
    revealAudioDevices: audioUtil.revealAudioDevices
  }
  this.audioConstraints = this.options.audioConstraints;
  this.browserDetails = SipLib.adapter.browserDetails;
  
  this.owaLastDetect = { time: 0, isOneWay: true };
  this.owaDetectTime = 3600000;
  this.outBoundConnectionStages = [];
  this._outboundExtraHeaders = {};
  this._outboundCallNumber = null;
  this.statsSocket = null;
  this.statsCallback = function (streams) {
    if (this.statsSocket && this.callstatskey && this._currentSession) {
      this.statsSocket.send(streams);
      if (window._PlivoDevLogging) {
        console.log(streams);
      }
    }
    if (this._currentSession && this._currentSession.session && this.browserDetails.browser === 'chrome') {
      processSteams.call(this, _emitter, streams, this._currentSession.session.isMuted().audio);
    }
  }.bind(this);
  this.calcConnStage = function (obj) {
    var readableTime = function (num) {
      var date = new Date(num);
      return (date).toISOString().substring(0, 10) + " " + date.toString().split(" ")[4] + "." + date.getMilliseconds();
    }
    var alinObj = [];
    var connStart;
    for (var i = 0; obj.length > i; i++) {
      var row = obj[i].split('@');
      row[1] = Number(row[1]);
      if (i == 0) {
        connStart = row[1];
        alinObj.push(row[0] + ' = ' + readableTime(row[1]) + "#");
      } else {
        var ms = (row[1] - connStart);
        if (ms > 1000) {
          ms = ms / 1000;
          ms = String(ms) + "s#";
        } else {
          ms = String(ms) + "ms#";
        }
        alinObj.push(row[0] + ' = ' + readableTime(row[1]) + ' +' + ms);
      }
    }
    alinObj = JSON.stringify(alinObj);
    alinObj = alinObj.replace(/[[",\]]/g, '');
    alinObj = alinObj.replace(/#/g, '\n');
    return alinObj;
  }
  this.str = function (obj) {
    return JSON.stringify(obj);
  }
  this.bucketApiUrl="";
  this.bucketApiBody="";

  audioUtil.setAudioContraints(this.audioConstraints);
  Plivo.sendEvents = function (obj, session) {
    if (this.statsSocket && this.callstatskey && session && session.sipCallID) {
      obj = this.statsSocket.addCallInfo(session, obj);
      this.statsSocket.send(obj);
    }else{
      Plivo.log.debug('Cannnot send Event ' , obj , " mandatory parameters ( statsSocket  , sipCallID , callstatskey ) not defined ");
    }
  }
  Plivo.AppError = function(err, log) {
    if (this.userName && this.callStats) {
      const callUUID = this._currentSession ? this._currentSession.callUUID : null;
      var conferenceId = callUUID || this.userName;
      if(Object.prototype.toString.call(err) == "[object Object]"){
        err = JSON.stringify(err);
      }
      if(log){ // if its application log
        Plivo.log.debug(`Call summary ${conferenceId}\n`, err);
      }
      this.callStats.reportError(null, conferenceId, this.callStats.webRTCFunctions.applicationLog, err);
    }
    return true;
  }

  //create document objects
  documentUtil.setup(this.options, (evt) => {
    if (!window.RTCPeerConnection) { // from adapter.js
      Plivo.log.error('No webRTC support');
      document.onreadystatechange = () => {
        document.readyState == "complete" && this.emit('onWebrtcNotSupported');
      }
    }
    this.emit('onMediaPermission',evt);
    if (evt.status == 'failure' && this.userName && this.callStats) {
      var errname = new DOMError("getUserMedia Error",  evt.error);
      this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.getUserMedia, errname);
    }
    if(evt.status == "success" && evt.stream){
      audioUtil.audioDevDictionary.call(this, true).then(() => {
        Plivo.log.debug('audioDevDictionary is updated onMediaPermission: '+evt.status);
      })
    }
    /*
      Save all audio ele ref
    */
    this.remoteView = document.getElementById(constants.REMOTE_VIEW_ID);
    this.ringToneView = document.getElementById(constants.RINGTONE_ELEMENT_ID);
    this.ringBackToneView = document.getElementById(constants.RINGBACK_ELEMENT_ID);
    this.connectToneView = document.getElementById(constants.CONNECT_TONE_ELEMENT_ID);

    Plivo.log.info('PlivoWebSdk initialized in ' + Plivo.log.level() + ' mode, version: 2.1.15');
    // Show the options passed by developer

    Plivo.log.debug('PlivoWebSdk initialized with ',this.str(options));
    Plivo.log.info(this.str(this.browserDetails));
    // Fetch the SDK Version Updates 
    // checkSDKVersion();

  });

  /*
    Audio Device change Event
  */
  navigator.mediaDevices.ondevicechange = (e) => {
    audioUtil.checkAudioDevChange.call(this);
  }
  // pool for device change on chrome less than v57
  if(SipLib.adapter.browserDetails.browser == 'chrome' && SipLib.adapter.browserDetails.version < 57){
    setInterval(() => {
      audioUtil.checkAudioDevChange.call(this);
    }, 5000);
  }

  this.audioDevDic = null;

  // this is done for backward compatiblity use this in audioDevice.js and update when avaliable devices are updated.
  audioUtil.audioDevDicSetter(d => {
    this.audioDevDic = d;
  });

  audioUtil.audioDevDictionary(true);

  // store this instance as window object
  window._PlivoInstance = this;
}

Client.prototype.login = function(userName, password) {
  if (typeof userName === 'undefined' || typeof password === 'undefined' || userName === null || password === null && (userName.length <= 0 || password.length <= 0)) {
    Plivo.log.error('username & password cant be null.');
    this.emit('onLoginFailed', 'Username and password must be filled out');
    return false;
  }
  if (this.phone && this.phone.isRegistered() && this.phone.isConnected() && userName === this.userName) {
    Plivo.log.warn(`Already registered with the endpoint provided - ${userName}`);
    return true;
  }
  if (this._currentSession) {
    Plivo.log.warn(`Cannot login when there is an ongoing call ${this._currentSession.callUUID}`);
    this.emit('onLoginFailed', 'Cannot login when there is an ongoing call');
    return false;
  }
  // On login failure retry.
  if (this.phone) {
    this.phone.stop();
    delete this.phone;
    Plivo.log.debug('deleting the existing phone instance');
  }

  // look for custom domain in init options
  if (this.options.registrationDomainSocket)
    constants.WS_SERVERS = this.options.registrationDomainSocket;

  var plivoSocket = new SipLib.WebSocketInterface(constants.WS_SERVERS);
  var sipConfig = {
    'sockets': [plivoSocket],
    'register_expires': constants.REGISTER_EXPIRES_SECONDS,
    'uri': userName + '@' + constants.DOMAIN,
    'password': password,
    'googIPv6': this.enableIPV6 || false,
    'connection_recovery_max_interval': constants.WS_RECOVERY_MAX_INTERVAL,
    'connection_recovery_min_interval': constants.WS_RECOVERY_MIN_INTERVAL,
    'session_timers' : false,
    'user_agent': `${sdkName} ${sdkVersion}`
  };

  try {
    this.phone = new SipLib.UA(sipConfig);
  } catch (e) {
    Plivo.log.debug('Failed to create user agent' + e);
    return false;
  }

  Plivo.log.info('Ready to login');

  var isPlivoSocketConnected = false;
  //connected event fired by UA.js
  this.phone.on('connected', (evt) => {
    Plivo.log.info('websocket connection established', evt);
    if(!isPlivoSocketConnected) {
        isPlivoSocketConnected = true ;
        var eventData = { 
          'state': 'connected'
        };
        this.emit('onConnectionChange', eventData);
    }
  });

  // disconnected event fired by UA.js
  this.phone.on('disconnected', (evt) => {
    Plivo.log.info('websocket connection closed' , evt);
    if(isPlivoSocketConnected){
      if(evt && evt.code>1000){
        // 1000 is normal websocket closed event , others codes as 1003,1006,1011 etc are for abnormal termination
        var eventData = {
                    'state': 'disconnected' ,
                    'eventCode': evt.code ,
                    'eventReason': evt.reason
                  };
        this.emit('onConnectionChange', eventData);
      }
    }
    isPlivoSocketConnected = false;
  });

  this.phone.on('registered', () => {
    this.userName = userName;
    if (this.isLoggedIn === false) {
      this.isLoggedIn = true;
      this.emit('onLogin');
      Plivo.log.debug('logged in');
      
      if (this.options.enableTracking) {
        let statsApiUrl = new URL(constants.STATS_API_URL);
        let statsHeaders = new Headers();
        statsHeaders.append("Content-Type", "application/json");
        let statsBody = {"username" : userName, "password" : password, "domain" : constants.DOMAIN}

        fetch(statsApiUrl , {
          method   : 'POST',
          headers  : statsHeaders,
          body     : JSON.stringify(statsBody)
        }).then(response => {
          if (response.ok) {
            response.text().then(responsebody => {
              if (!responsebody) {
                Plivo.log.info('Call insights is not enabled');
              } else {
                responsebody = JSON.parse(responsebody); 
                this.callstatskey = responsebody.data;
              }

              if (!this.statsSocket && this.callstatskey) {
                this.statsSocket = new statsSocketLib(this, this.callstatskey);
                //send continous keepalive heartbeat to Stats websocket server
                this.heartbeatTimer = setInterval(() => {
                  this.statsSocket.heartbeat(this);
                }, constants.GETSTATS_HEARTBEATINTERVAL);
              }
            });
          } else {
            this.callstatskey = null;
          }

        }).catch(function (err) {
          Plivo.log.error("Error in getting token from call stats", err);
        });

      }

      if (this.options.enableTracking && !this.callStats) {
        (this.options.appSecret != null || this.options.appId != null) ? (this.statsioused = true) : (this.statsioused = false);
        this.options.appId ? null : (this.options.appId = "380077084");

        // Temp fix for chrome 58 to get callback based getstats
        window.csioChromeLegacyGetStats = true;

        this.callStats = typeof callstats === 'undefined' ? __webpack_require__(/*! ./util/plivostats */ "./lib/util/plivostats.js") : new callstats();
        var configParams = {
          disableBeforeUnloadHandler: false, // disables callstats.js's window.onbeforeunload parameter.
          applicationVersion: '2.1.15', // Application version specified by the developer.
          disablePrecalltest: true,
        };
        // callbacks for callstats
        var csInitCallback = (err, msg) => {
          Plivo.log.debug('Stats Initializing Status: err= '+err + ' msg= '+msg);
        };
        var csStatsCallback = (stats) => {
          var streams = stats.streams;
          // no longer depending on callstats.io for the media metrics. 
          // processSteams.call(this, _emitter, streams);
          if(window._PlivoDevLogging){
            console.log(streams);
          }
        }
        // callstats initialize
        if (SipLib.adapter.browserDetails.browser != 'chrome')
          csStatsCallback = null; //still some issues in FF so don't go for getstats call back
        /**
          if appSecret is passed in option use it. Usefull if customer has their own callstats account
          Or try to get token for appId
        */
        if(this.callStats) {
          var callStatsToken = this.options.appSecret || callStatsTokenCb.call(this);
          this.callStats.initialize(this.options.appId, callStatsToken, userName, csInitCallback, csStatsCallback, configParams);
        }

        Plivo.log.debug('enableTracking initialized');
      }
      // Getting S3 link for client to upload console logs
      let url = new URL(constants.S3BUCKET_API_URL);
      let bucketBody = {"username" : userName, "password" : password, "domain" : constants.DOMAIN} 
      this.bucketApiUrl = url;
      this.bucketApiBody = bucketBody; 
    }
  });

  this.phone.on('unregistered', () => {
    Plivo.log.debug('Plivo client logged out');
    this.isLoggedIn = false;

    this.ringToneView.paused? null: documentUtil.stopAudio(constants.RINGTONE_ELEMENT_ID);
    this.ringBackToneView.paused? null: documentUtil.stopAudio(constants.RINGBACK_ELEMENT_ID);
    this.userName = null;

    this.emit('onLogout');
  });

  this.phone.on('registrationFailed', (error) => {
    this.isLoggedIn = false;
    Plivo.log.debug('Login failed : ',error.cause);
    this.userName = null;  
    this.emit('onLoginFailed', error.cause);
  });

  this.phone.on('newTransaction', (evt) => {
    /* Invite Server Trasaction(ist) is what we are looking for
      this gives us the incoming invite timestamp.
      NOTE: this event is not documented by JsSIP
      should be used to just record the timestamp of invite received only
      Do not have any other logic here */
    if (evt.transaction.type == 'ist') {
      Plivo.log.info('<----- INCOMING ----->');
      const callUUID = evt.transaction.request.getHeader('X-Calluuid') || null;
      this.incomingCallsInitiationTime.set(callUUID, getCurrentTime());
      Plivo.log.debug('call initiation time, invite received from server');
    }
  });

  this.phone.on('newRTCSession', (evt) => {
    Plivo.log.debug('new rtc session');
    if(this._currentSession && this._currentSession.session.connection.signalingState == 'closed'){
      Plivo.log.warn("Previous call doesn't end properly");
      this._currentSession = null;
      
      this.callSession = null;
      this.callUUID = null;
      this.callDirection = null;
    }
    if(this.incomingInvites.size) {
      this.incomingInvites.forEach((invite) => {
        // Remove the incoming call from map if it is failed but not removed properly
        if(invite.session.isEnded()) {
          this.incomingInvites.delete(invite.callUUID);
        }
      })
    }
    if (((this._currentSession || this.incomingInvites.size) &&
          !this.options.allowMultipleIncomingCalls) ||
          this.incomingInvites.size >= constants.NUMBER_OF_SIMULTANEOUS_INCOMING_CALLS_ALLOWED) {
      Plivo.log.debug('Already on call, sending busy signal.');
      var opts = {
        'status_code': 486,
        'reason_phrase': 'Busy Here'
      };
      evt.session.terminate(opts);
      return;
    }

    if (evt.originator === 'remote') {

      // Fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1495569
      // https://plivo-team.atlassian.net/browse/SUP-373
      if (this.browserDetails.browser === 'firefox' && this.browserDetails.version > 62 &&
          evt.request.body.indexOf('a=mid:0' === -1)) {
        evt.request.body = evt.request.body.replace('a=ice-pwd', 'a=mid:0\na=ice-pwd');
      }

      const callUUID = evt.request.getHeader('X-Calluuid') || null;
      Plivo.log.info(`newRTCSession for incomingCall ${callUUID}`);
      const sipCallID = evt.request.getHeader('Call-ID') || null;
      const callerHeader = evt.request.getHeader('From');
      const caller = callerHeader.match(/:(.*)@/i)[1];
      const extraHeaders = headersUtil.receiveExtraHeader(evt.request, evt.request.headers);
      const call_initiation_time = this.incomingCallsInitiationTime.get(callUUID);
      if (call_initiation_time) this.incomingCallsInitiationTime.delete(callUUID);
      const incomingCall = new CallSession({
        callUUID: callUUID,
        sipCallID: sipCallID,
        direction: 'incoming',
        src: caller,
        dest: this.userName,
        session: evt.session,
        extraHeaders: extraHeaders,
        call_initiation_time: call_initiation_time
      });
      this.incomingInvites.set(incomingCall.callUUID, incomingCall);
      this.lastIncomingCall = incomingCall;
      
      // Storing these info for backward compatiblity 
      // in cases user used these non-document variables.
      if (!this.options.allowMultipleIncomingCalls) {
        this.callSession = incomingCall.session;
        this.callUUID = incomingCall.callUUID;
        this.direction = incomingCall.direction;
      }
      
      incomingCall.addConnectionStage(`I-invite@${dateMs()}`);

      //custom sdp codec changes
      try{
        evt.request.body = checkCodecPreference(this.options.codecs, evt.request.body);  
      }catch(err){
        Plivo.log.debug('checkCodecPreference err - ',err);
      }
      
      Plivo.log.debug('callSession - '+ incomingCall.callUUID);

      incomingCall.session.on('progress', (evt) => {
        Plivo.log.debug('Incoming call progress');
        incomingCall.addConnectionStage(`progress-180@${dateMs()}`);
        incomingCall.updateSignallingInfo({
          call_progress_time: getCurrentTime()
        });
        incomingCall.setState(incomingCall._STATE.RINGING);
        incomingCall.setPostDialDelayEndTime(getCurrentTime());
        Plivo.log.debug('call ringing180 time, incoming call progress');
        var callerUri = incomingCall.session.remote_identity.uri.toString();
        // if already on an incomingCall then do not play the ringtone
        if(this.ringToneFlag !== false && !this._currentSession) {
          Plivo.log.debug('ringtone enabled : ',this.ringToneFlag);
          documentUtil.playAudio(constants.RINGTONE_ELEMENT_ID);
        }
        const callerName = `${callerUri.substring(4, callerUri.indexOf('@'))}@${constants.DOMAIN}`;
        this.emit('onIncomingCall', callerName, extraHeaders, incomingCall.getCallInfo());  
        Plivo.log.debug('Incoming Call Extra Headers : ',extraHeaders);        
      });
      
      incomingCall.session.on('sdp', (evt) => {
        Plivo.log.debug('Incoming call SDP processing done');
      });

      incomingCall.session.on('accepted', (evt) => {
        Plivo.log.info('Incoming call accepted');
        Plivo.sendEvents.call(this, { "msg"         : "CALL_ANSWERED", 
                                      "info"        : "Incoming call answered",
                                      "clientName"  : SipLib.adapter.browserDetails.browser,
                                      "userAgent"   :  userAgent , 
                                      "clientVersionMajor" : clientVersionParse.major || clientVersionParse[0] || '0',
                                      "clientVersionMinor" : clientVersionParse.minor || clientVersionParse[1] || '0',
                                      "clientVersionPatch" : clientVersionParse.patch || clientVersionParse[2] || '0',
                                      "sdkName"        : sdkName ,
                                      "sdkVersionMajor": sdkVersionParse.major , 
                                      "sdkVersionMinor": sdkVersionParse.minor , 
                                      "sdkVersionPatch": sdkVersionParse.patch , 
                                      "devicePlatform": devicePlatform,
                                      "deviceOs"    : deviceOs
                                    }, incomingCall);
        this._currentSession.updateSignallingInfo({
          answer_time: getCurrentTime()
        });
        
        callStart.call(this); // initialise callstats storage.
        var inboundConnection = incomingCall.session.connection || null;
        inboundConnection.oniceconnectionstatechange = (evt) => {
          var iceState = inboundConnection.iceConnectionState;
          Plivo.log.debug('oniceconnectionstatechange:: '+iceState);
          incomingCall.addConnectionStage(`iceConnectionState-${iceState}@${dateMs()}`);
          //Notify network drops
          iceConnectionCheck.call(this, iceState);
          if (this.callStats && incomingCall.callUUID &&  inboundConnection) {
             if (iceState == 'failed' || iceState == 'disconnected') {
                var errname = new DOMError(iceState, iceState);
                this.callStats.reportError(inboundConnection, incomingCall.callUUID, this.callStats.webRTCFunctions.iceConnectionFailure, errname);
             }
             if (iceState == 'connected') {
               this.emit('onMediaConnected', incomingCall.getCallInfo());
             }
          }
        }
      });

      incomingCall.session.on('confirmed', (evt) => {
        Plivo.log.debug(`Incoming call confirmed - ${incomingCall.callUUID}`);
        incomingCall.addConnectionStage(`confirmed@${dateMs()}`);
        incomingCall.setState(incomingCall._STATE.ANSWERED);
        incomingCall.updateSignallingInfo({
          call_confirmed_time: getCurrentTime()
        });

        // disableRtpTimeOut if enabled
        if(this.options.disableRtpTimeOut){
          incomingCall.session.connection.disableRtpTimeOut = true;
        }

        var remoteStream = incomingCall.session.connection.getRemoteStreams()[0];
        if(!remoteStream){
          Plivo.log.error('Incoming call remoteStream does not exists');
        }
        this.remoteView.srcObject = remoteStream;

        var peerConnectionCallback = (message) => {
          Plivo.log.debug('Stats new fabric message: ' + message);
        };
        //peer connection is established till here on incoming
        if (this.callStats && incomingCall.session.connection) {
          this.callStats.addNewFabric(
            incomingCall.session.connection, 
            incomingCall.src, 
            this.callStats.fabricUsage.audio, 
            callUUID, 
            peerConnectionCallback
          );
        }
        if ((this.statsSocket && this.callstatskey &&
              (
                (this.browserDetails.browser === 'chrome' && this.browserDetails.version > 63) ||
                (this.browserDetails.browser === 'firefox' && this.browserDetails.version > 59)
              )
            ) || 
            (this.browserDetails.browser === 'chrome' && this.browserDetails.version > 63)) {
              statsCollector.call(this, incomingCall);
        } else if (this.statsSocket && this.callstatskey) {
          Plivo.log.warn("This browser version is not supported for collecting data for Call Insights API but the call will proceed despite this. Supported versions are Chrome version - 64 and above, Firefox version - 63 and above");
        }
        this.ringToneView.paused ? null : documentUtil.stopAudio(constants.RINGTONE_ELEMENT_ID);
        this.ringBackToneView.paused ? null : documentUtil.stopAudio(constants.RINGBACK_ELEMENT_ID);

        this.emit('onCallAnswered', incomingCall.getCallInfo());
        Plivo.log.debug("Plivo Event: Post-Answer detecting OWA");
        setTimeout(owaNotification.bind(this), 3000, incomingCall.session.connection, this);
      });

      incomingCall.session.on('icetimeout', (sec) => {
        Plivo.log.debug('iceGathering timed out');
        _emitter.call(this,'network','warning','ice_timeout', sec, true, "Possible NAT/Firewall issue");
        if (this.statsSocket) {
          this.statsSocket.onIceFailure(incomingCall, 'ice_timeout');
        }
      });

      incomingCall.session.on('failed', (evt) => {
        Plivo.log.error('Call failed: ' + evt.cause);
        incomingCall.addConnectionStage(`failed@${dateMs()}`);
        incomingCall.updateSignallingInfo({
          hangup_time: getCurrentTime(),
          hangup_party: evt.originator,
          hangup_reason: evt.cause,
        });
        
        // Check whether there is another incoming call
        if (this.incomingInvites.size < 2) {
          this.ringToneView.paused ? null:documentUtil.stopAudio(constants.RINGTONE_ELEMENT_ID);
        }
        
        if (evt.cause == SipLib.C.causes.CANCELED) {
          incomingCall.setState(incomingCall._STATE.CANCELED);
          this.emit('onIncomingCallCanceled', incomingCall.getCallInfo());
        }
        else {
          if (evt.cause === 'Rejected') {
            incomingCall.setState(incomingCall._STATE.REJECTED);
          } else {
            incomingCall.setState(incomingCall._STATE.FAILED);
          }
          this.emit('onCallFailed', evt.cause, incomingCall.getCallInfo());
        }

        if (this.callStats && incomingCall.callUUID && incomingCall.session.connection && !evt.cause.match('edia')) { // media err is not under signaling err
          var errName,errMsg;
          if (evt.message) {
            errName = evt.cause;
            errMsg = errName;
            evt.message.status_code && (errMsg = String(evt.message.status_code));
          }
          var errname = new DOMError(errName, errMsg);
          Plivo.log.debug(errname);
          this.callStats.reportError(incomingCall.session.connection, incomingCall.callUUID, this.callStats.webRTCFunctions.signalingError, errname);
        }
        if (this.statsSocket  && incomingCall.callUUID && this.callstatskey && !evt.cause.match('edia')) { // media err is not under signaling err
          const errName = evt.cause;
          let errMsg;
          if (evt.message && evt.message.status_code) {
            errMsg = String(evt.message.status_code);
          } else {
            errMsg = evt.cause;
          }
          incomingCall.updateSignallingInfo({
            signalling_errors: {
              "timestamp": getCurrentTime(),
              "error_code": errMsg,
              "error_description": errName
            }
          });
        }
        hangupClearance.call(this, incomingCall);
      });

      incomingCall.session.on('ended', (evt) => {
        Plivo.log.debug(`Incoming call ended - ${incomingCall.callUUID}`);
        Plivo.log.info('Incoming call ended');
        incomingCall.addConnectionStage(`ended@${dateMs()}`);
        incomingCall.setState(incomingCall._STATE.ENDED);
        incomingCall.updateSignallingInfo({
          hangup_time: getCurrentTime(),
          hangup_party: evt.originator,
          hangup_reason: evt.cause
        });

        if (this.callStats) {
          this.callStats.sendFabricEvent(incomingCall.session.connection, this.callStats.fabricEvent.fabricTerminated, incomingCall.callUUID);
        }
        this.emit('onCallTerminated',{"originator":evt.originator, "reason":evt.cause}, incomingCall.getCallInfo());
        hangupClearance.call(this, incomingCall);
      });
      incomingCall.session.on('icecandidate', (event) => {
        const candidate = event.candidate;
        if(candidate && candidate.candidate.search('srflx') != -1) {
          event.ready();
          return;
        }
        if (incomingCall.gotInitalIce) return;
        incomingCall.gotInitalIce = true;
        setTimeout(() => {
          if (!incomingCall.session) return;
          const connection = incomingCall.session.connection;
          if (connection.iceGatheringState !== 'complete') {
            event.ready();
            Plivo.log.debug('iceGathering taking more than 2sec ' + connection.iceGatheringState);
            _emitter.call(this, 'network', 'warning', 'ice_timeout', 2000, true, "Possible NAT/Firewall issue");
          }
        }, 2000)
      });
      incomingCall.session.on('getusermediafailed', (err) => {
        Plivo.log.error('getusermediafailed: '+err);
        if (this.userName && this.callStats) {
          err.message = "getusermediafailed";
          this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.getUserMedia, err);
        }
        if (this.statsSocket) {
          this.statsSocket.onMediaFailure(incomingCall, err);
        }
        Plivo.log.warn("getusermediafailed",err);
      });
      incomingCall.session.on('peerconnection:createofferfailed', (err) => {
        Plivo.log.error('peerconnection:createofferfailed: ',err);
        if (this.userName && this.callStats) {
          err.message = "peerconnection:createofferfailed";
          this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.createOffer, err);
        }
        if (this.statsSocket) {
          this.statsSocket.onSDPfailure(incomingCall, "createofferfailed");
        }
        Plivo.log.warn("SDP Failure - createofferfailed", err);
      });
      incomingCall.session.on('peerconnection:createanswerfailed', (err) => {
        Plivo.log.error('peerconnection:createanswerfailed: ', err);
        if (this.userName && this.callStats) {
          err.message = "peerconnection:createanswerfailed";
          this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.createAnswer, err);
        }
        if (this.statsSocket) {
          this.statsSocket.onSDPfailure(incomingCall, "createanswerfailed");
        }
        Plivo.log.warn("SDP Failure - createanswerfailed", err);  
      });
      incomingCall.session.on('peerconnection:setlocaldescriptionfailed', (err) => {
        Plivo.log.error('peerconnection:setlocaldescriptionfailed: ', err);
        if (this.userName && this.callStats) {
          err.message = "peerconnection:setlocaldescriptionfailed";
          this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.setLocalDescription, err);
        }
        if (this.statsSocket) {
          this.statsSocket.onSDPfailure(incomingCall, "setlocaldescriptionfailed");
        }
        Plivo.log.warn("SDP Failure - setlocaldescriptionfailed",err);
      });
      incomingCall.session.on('peerconnection:setremotedescriptionfailed', (err) => {
        Plivo.log.error('peerconnection:setremotedescriptionfailed: ', err);
        if(err.message && !err.message == 'pranswer not yet implemented'){
          if (this.userName && this.callStats) {
            this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.setRemoteDescription, err);
          }
          if (this.statsSocket) {
            this.statsSocket.onSDPfailure(incomingCall, "setremotedescriptionfailed");
          }
        }
        Plivo.log.warn("SDP Failure - setremotedescriptionfailed",err);    
      });      
      
    } else {
      const sipCallID = evt.request.getHeader('Call-ID') || null;
      this._currentSession = new CallSession({
        sipCallID: sipCallID,
        direction: 'outgoing',
        src: this.userName,
        dest: this._outboundCallNumber,
        session: evt.session,
        extraHeaders: this._outboundExtraHeaders
      });
      
      this.callSession = this._currentSession.session;
      this.callUUID = this._currentSession.callUUID;
      this.callDirection = this._currentSession.direction;

      this.outBoundConnectionStages.forEach((stage) => {
        this._currentSession.addConnectionStage(stage);
      });
      this.outBoundConnectionStages = [];
      Plivo.log.debug('new RTCSession outgoing');
      this.emit('onCalling');
    }
  });

  this.phone.start();
  return true;
};

Client.prototype.logout = function () {
  Plivo.log.debug('logout() triggered!');
  if (this._currentSession) {
    this._currentSession.addConnectionStage("logout()@"+dateMs());
    Plivo.log.debug('Terminating an active call');
    this._currentSession.session.terminate();
  }
  this.phone && this.phone.stop();
  return true;
};

Client.prototype.call = function(phoneNumber, extraHeaders) {
  Plivo.log.info('<----- OUTGOING ----->');
  this.outBoundConnectionStages = [];
  Plivo.log.info('Outgoing call initialized to : '+ phoneNumber);
  if (!this.isLoggedIn) {
    Plivo.log.warn('Must be logged in before make a call');
    return false;
  }
  this.outBoundConnectionStages.push(`call()@${dateMs()}`);
  
  const onCallFailed = (reason) => {
    this.emit('onCallFailed', reason);
    return true;
  }
  const readyForCall = () => {
    this.owaLastDetect.isOneWay=false;
    return _createSession.call(this, extraHeaders, phoneNumber);
  }
  /**
    Handle one way audio issues in chrome
    check for every 1 hr
  */
  if(this.options.preDetectOwa && this.browserDetails.browser == "chrome" && ( (new Date() - this.owaLastDetect.time) > this.owaDetectTime || this.owaLastDetect.isOneWay) ){
    detectOWA((res, err) => {  // @res {"bytesSent ": "366", audioInputLevel: "117"}
      this.owaLastDetect.time = new Date();
      if(err){
        Plivo.log.error('Error in detecting microphone status ', err);
        this.emit('onMediaPermission', {"status":"failure","error" : err.name});
        onCallFailed('media - ' + err.name);
        return false;
      }else{
        Plivo.log.debug('getUserMedia precheck ',res);
        if( Number(res.bytesSent) == 0 && Number(res.audioInputLevel) == 0 ){
          _emitter.call(this,'audio', 'warning', 'no_microphone_access', 0, true, "chrome lost access to microphone - restart browser");
          this.owaLastDetect.isOneWay = true;
          onCallFailed('no_microphone_access');
          return false;
        }        
        if( Number(res.audioInputLevel) == 0 ){
          _emitter.call(this,'audio', 'warning', 'no_microphone_access', 0, true, "microphone is muted");
        }
      }
      // On no one way audio go to call ready mode
      readyForCall();
    });
  } else {
    //Browsers other than chrome go to call ready mode
    readyForCall();
  }
}

Client.prototype.answer = function(callUUID, actionOnOtherIncomingCalls) {
  let incomingCall;
  const possibleActionsOnOtherIncomingCalls = ['reject', 'ignore', 'letring'];
  if (callUUID && this.incomingInvites.has(callUUID)) {
    incomingCall = this.incomingInvites.get(callUUID);
  } else if (this.lastIncomingCall) {
    incomingCall = this.lastIncomingCall;
    if (callUUID && this.options.allowMultipleIncomingCalls) {
      Plivo.log.error(`No incomingCall with callUUID - ${callUUID}`);
      return false;
    }
  }
  if ((this.options.allowMultipleIncomingCalls && actionOnOtherIncomingCalls && typeof actionOnOtherIncomingCalls !== 'string') ||
      (typeof actionOnOtherIncomingCalls === 'string' && this.options.allowMultipleIncomingCalls &&
        possibleActionsOnOtherIncomingCalls.indexOf(actionOnOtherIncomingCalls.toLowerCase()) === -1)) {
    Plivo.log.error('Invalid actionOnOtherIncomingCalls value');
    return false;
  }
  if (incomingCall) {
    Plivo.log.debug(`answer - ${incomingCall.callUUID}`);
    var opts = {}; 
    incomingCall.addConnectionStage(`answer()@${dateMs()}`);

    const mediaError = (reason) => {
      Plivo.log.debug('rejecting CAll, Reason : ' + reason);
      this.reject(incomingCall.callUUID);
      return true;
    }

    const readyForCall = () => {
      if (this._currentSession) {
        this.hangup();
      }
      this.incomingInvites.forEach((invite) => {
        if(invite !== incomingCall) {
          if (typeof actionOnOtherIncomingCalls === 'string' &&
            'ignore' === actionOnOtherIncomingCalls.toLowerCase()) {
            this.ignore(invite.callUUID);
          } else if (typeof actionOnOtherIncomingCalls === 'string' &&
            'reject' === actionOnOtherIncomingCalls.toLowerCase()) {
            this.reject(invite.callUUID);
          } else if (typeof actionOnOtherIncomingCalls === 'string' &&
            'letring' === actionOnOtherIncomingCalls.toLowerCase()) {
            Plivo.log.info('Other incoming calls will keep ringing');
          } else if (!actionOnOtherIncomingCalls) {
              this.reject(invite.callUUID);
          }
        }
      });
      this.owaLastDetect.isOneWay=false;
      opts.pcConfig = {
        'sdpSemantics':'plan-b',
        'iceServers': [
          { 'urls': constants.STUN_SERVERS }
        ]
      };
      if (this.permOnClick) {
        var audioConstraints = this.options.audioConstraints || true;
        opts.mediaConstraints = {
          audio: audioConstraints,
          video: false
        };        
      }else{
        window.localStream? true : Plivo.log.warn('no localStream attached for this call');     
      }
      opts.mediaStream = window.localStream || null;
      opts.rtcConstraints = this.options.dscp? ({"optional":[{"googDscp":true}]}) : null;
      opts.sessionTimersExpires = constants.SESSION_TIMERS_EXPIRES;      
      try {
        incomingCall.session.answer(opts);
        this._currentSession = incomingCall;
        this.incomingInvites.delete(incomingCall.callUUID);
        if (incomingCall === this.lastIncomingCall) {
          this.lastIncomingCall = null;
          if (this.incomingInvites.size) {
            this.lastIncomingCall = this.incomingInvites.values().next().value;
          }
        }
        
        this.callSession = this._currentSession.session;
        this.callUUID = this._currentSession.callUUID;
        this.callDirection = this._currentSession.direction;

      } catch(err) {
        Plivo.log.error('error in answering : ',err);
        incomingCall.setState(incomingCall._STATE.CANCELED);
        this.emit('onIncomingCallCanceled', incomingCall.getCallInfo());
      }
      this.ringToneView.paused? null : documentUtil.stopAudio(constants.RINGTONE_ELEMENT_ID);       
      return true;    
    }
    
    incomingCall.addConnectionStage(`answer()@${dateMs()}`);
    /*
      Handle One way audio issues for outgoing call in chrome
      check for every 1 hr
    */
    if(this.options.preDetectOwa && this.browserDetails.browser == "chrome" && ( (new Date() - this.owaLastDetect.time) > this.owaDetectTime || this.owaLastDetect.isOneWay) ){
      detectOWA((res, err) => {  // @res {"bytesSent ": "366", audioInputLevel: "117"}
        this.owaLastDetect.time = new Date();
        if(err){
          Plivo.log.error('Error in detecting microphone status ',err);
          this.emit('onMediaPermission',{"status":"failure","error":err.name});
          mediaError('media - '+err.name);
          return false;
        }else{
          Plivo.log.debug('getUserMedia precheck ',this.str(res));
          if( Number(res.bytesSent) == 0 && Number(res.audioInputLevel) == 0){
            _emitter.call(this,'audio','warning','no_microphone_access', 0, true, "chrome lost access to microphone - restart browser");
            this.owaLastDetect.isOneWay=true;
            mediaError('no_microphone_access');
            return false;
          }
          if( Number(res.audioInputLevel) == 0 ){
            _emitter.call(this,'audio','warning','no_microphone_access', 0, true, "microphone is muted");
          }          
        }
        // On no one way audio go to call ready mode
        readyForCall();
      });
    } else {
      // Browsers other than chrome go to call ready mode
      readyForCall();
    }

  } else {
    Plivo.log.error('Incoming call answer() failed : no incoming call');
    return false;
  }
  return true;
};

Client.prototype.hangup = function () {
  if (this._currentSession) {
    Plivo.log.debug(`hangup - ${this._currentSession.callUUID}`);
    if(this._currentSession.session.direction != "outgoing" && !isSessionConfirmed(this._currentSession.session)){
      Plivo.log.warn('use of hangup() on unanswered call is deprecated. use reject() instead');
    }
    try {
      Plivo.log.info('hangup initialized');
      Plivo.AppError.call(this, {"name":"hangup","message":"hangup initialized","method":"hangup()"});
      this._currentSession.session.terminate();
      this.ringBackToneView.paused? null: documentUtil.stopAudio(constants.RINGBACK_ELEMENT_ID);
    } catch (err) {
      Plivo.log.error('Could not hangup reason : ',err);
      Plivo.AppError.call(this, {"name":err.name,"message":err.message,"method":"hangup()"});
      Plivo.sendEvents.call(this, { "msg": "ERROR_EVENT", "name": err.name, "info": err.message, "method": "hangup()" }, this._currentSession);
    }
  }
  else {
    Plivo.log.warn('No call session exists to hangup');
    return false;
  }
  return true;
};

Client.prototype.reject = function (callUUID) {
  let incomingCall;
  if (callUUID && this.incomingInvites.has(callUUID)) {
    incomingCall = this.incomingInvites.get(callUUID);
  } else if (this.lastIncomingCall) {
    incomingCall = this.lastIncomingCall;
    if (callUUID && this.options.allowMultipleIncomingCalls) {
      Plivo.log.error(`No incomingCall with callUUID - ${callUUID}`);
      return false;
    }
  }
  if(!incomingCall){
    Plivo.log.warn('No call session exists to reject()');
    return false;
  }
  Plivo.log.debug(`reject - ${incomingCall.callUUID}`);
  if(isSessionConfirmed(incomingCall.session)){
    Plivo.log.warn('call already answerd, please use hangup() method');
    return false;
  }
  if (incomingCall) {
    var opts = {
      'status_code': 486,
      'reason_phrase': 'Busy Here'
    };
    Plivo.log.info('rejecting call');
    Plivo.AppError.call(this, {"name":"reject","message":"reject initialized","method":"reject()"});
    try{
      incomingCall.session.terminate(opts);
      this.incomingInvites.delete(incomingCall.callUUID);
    }catch(err){
      Plivo.log.error('error in rejecting call : ',err);
      Plivo.AppError.call(this, {"name":err.name,"message":err.message,"method":"reject()"});
      Plivo.sendEvents.call(this, { "msg": "ERROR_EVENT", "name": err.name, "info": err.message, "method": "reject()" }, this.incomingCall);
    }
    // if no more incoming calls then stop the audio
    if (!this.incomingInvites.size) {
      this.ringToneView.paused ? null: documentUtil.stopAudio(constants.RINGTONE_ELEMENT_ID);
    }
    return true;
  }
}

Client.prototype.ignore = function (callUUID) {
  let incomingCall;
  if (callUUID && this.incomingInvites.has(callUUID)) {
    incomingCall = this.incomingInvites.get(callUUID);
  } else if (this.lastIncomingCall) {
    incomingCall = this.lastIncomingCall;
    if (callUUID && this.options.allowMultipleIncomingCalls) {
      Plivo.log.error(`No incomingCall with callUUID - ${callUUID}`);
      return false;
    }
  }
  if (incomingCall) {
    Plivo.log.debug(`ignore - ${incomingCall.callUUID}`);
    incomingCall.session.removeAllListeners();
    this.incomingInvites.delete(incomingCall.callUUID);
    
    if (!this.incomingInvites.size) {
      this.ringToneView.paused ? null: documentUtil.stopAudio(constants.RINGTONE_ELEMENT_ID);
    }
    incomingCall.setState(incomingCall._STATE.IGNORED);
    incomingCall.updateSignallingInfo({
      hangup_time: getCurrentTime(),
      hangup_party: 'local',
      hangup_reason: 'Ignored',
      signalling_errors: {
        "timestamp": getCurrentTime(),
        "error_code": 'Ignored',
        "error_description": 'Ignored'
      }
    });
    hangupClearance.call(this, incomingCall);
    this.emit('onIncomingCallIgnored', incomingCall.getCallInfo());
    return true;
  } else {
    Plivo.log.warn('No incoming calls to ignore');
    return false;
  }
};

Client.prototype.sendDtmf = function (digit) {
  if (typeof digit == 'undefined' || digit == null) {
    return Plivo.log.warn('DTMF digit can not be null');
  } else if (typeof constants.DTMF_TONE_FLAG[digit] == 'undefined') {
    return Plivo.log.warn(digit + ' is not a valid DTMF digit');
  }

  if (this._currentSession) {
    Plivo.log.debug(`sendDtmf - ${this._currentSession.callUUID}`);
    try {
      Plivo.log.debug('sending dtmf digit '  + digit);
      this._currentSession.session.sendDTMF(digit);
      if (digit === '*') {
        return documentUtil.playAudio('dtmfstar');
      } else if (digit === '#') {
        return documentUtil.playAudio('dtmfpound');
      }
      return documentUtil.playAudio('dtmf' + digit);
    } catch (err) {
      Plivo.log.error('Call has not been confirmed cannot send DTMF');
      Plivo.AppError.call(this, {"name":err.name,"message":err.message,"method":"sendDtmf()"});
      Plivo.sendEvents.call(this, { "msg": "ERROR_EVENT", "name": err.name, "info": err.message, "method": "sendDtmf()" }, this._currentSession);
    }
  } else {
    Plivo.log.warn('No call session exists to sendDtmf');
  }
};

Client.prototype.mute = function () {
  if (this._currentSession) {
    Plivo.log.debug('mute called');
    try{
      this._currentSession.session.mute();
      if (this.callStats) {
        this.callStats.sendFabricEvent(this._currentSession.session.connection, this.callStats.fabricEvent.audioMute, this._currentSession.callUUID);
      }
      if (this.statsSocket) {
        this.statsSocket.onToggleMute(this._currentSession, "mute");
      }
    }catch(err){
      Plivo.log.error('error in mute :',err);
      Plivo.AppError.call(this, {"name":err.name,"message":err.message,"method":"mute()"});
      Plivo.sendEvents.call(this, { "msg": "ERROR_EVENT", "name": err.name, "info": err.message, "method": "mute()" }, this._currentSession);
    }

  } else {
    Plivo.log.warn('No call session exists to mute');
    return false;
  }

  return true;
};

Client.prototype.unmute = function () {
  if (this._currentSession) {
    Plivo.log.debug('unmute called');
    try{
      this._currentSession.session.unmute();
      if (this.callStats) {
        this.callStats.sendFabricEvent(this._currentSession.session.connection, this.callStats.fabricEvent.audioUnmute, this._currentSession.callUUID);
      }
      if (this.statsSocket) {
        this.statsSocket.onToggleMute(this._currentSession, "unmute");
      }
    }catch(err){
      Plivo.log.error('error in unmute : ',err);
      Plivo.AppError.call(this, {"name":err.name,"message":err.message,"method":"unmute()"});
      Plivo.sendEvents.call(this, { "msg": "ERROR_EVENT", "name": err.name, "info": err.message, "method": "unmute()" }, this._currentSession);
    }
  } else {
    Plivo.log.warn('No call session exists to unmute');
    return false;
  }

  return true;
};

Client.prototype.setRingTone = function (val) {
  if (val === false || val === null) {
    this.ringToneFlag = false;
  }
  else if (typeof val === 'string') {
    this.ringToneFlag = 'user';
    Plivo.log.debug('setRingTone() url : ' + val);
    this.ringToneView.src = val;
  }
  else {
    this.ringToneFlag = true;
  }
  return true;
};

Client.prototype.setRingToneBack = function (val) {
  if (val === false || val === null) {
    this.ringToneBackFlag = false;
  }
  else if (typeof val == 'string') {
    this.ringToneBackFlag = 'user';
    Plivo.log.debug('setRingToneBack() url : ' + val);
    this.ringBackToneView.src = val;
  }
  else {
    this.ringToneBackFlag = true;
  }

  return true;
};

Client.prototype.setConnectTone = function (val) {
  if (!val) {
    this.connectToneFlag = false;
  }
  else {
    this.connectToneFlag = true;
  }
  return true;
};

Client.prototype.setDtmfTone = function (digit, url) {
  if (url === false || url === null) {
    constants.DTMF_TONE_FLAG[digit] = false;
  }
  else if (typeof url === 'string') {
    Plivo.log.debug('set dtmf tone');
    constants.DTMF_TONE_FLAG[digit] = 'user';
    var elementName = 'dtmf' + digit;
    var element = document.getElementById(elementName);

    element.src = url;
  }
  else {
    constants.DTMF_TONE_FLAG[digit] = true;
  }

  return true;
};

Client.prototype.getCallUUID = function () {
  if (this._currentSession) {
    return this._currentSession.callUUID;
  }
  return null;
};

Client.prototype.getLastCallUUID = function () {
  if (this._lastCallSession) {
    return this._lastCallSession.callUUID;
  }
  return null;
}

Client.prototype.getIncomingCalls = function () {
  const incomingCalls = [];
  this.incomingInvites.forEach(a => {
    incomingCalls.push(a.getCallInfo());
  })
  return incomingCalls;
};

Client.prototype.setDebug = function (debug) {
  if (debug && ['INFO', 'DEBUG', 'WARN', 'ERROR', 'ALL', 'OFF'].indexOf(debug) != -1) {
    Plivo.log.setLevel(debug);
  }
};

Client.prototype.getPeerConnection = function (){
  if (this._currentSession && this._currentSession.session && this._currentSession.session.connection ){
    return {"status":"success", "pc":this._currentSession.session.connection }; 
  }else{
    return {"status":"called in wrong state", "pc":null};
  }
}

Client.prototype.version = '2.1.15';

Client.prototype.webRTC = function () {
  return window.RTCPeerConnection ? true : false;
}

Client.prototype.supportedBrowsers = function() {
  return "Chrome, Firefox";
};

Client.prototype.sendQualityFeedback = function (callUUID, score, comment) {
  var score = Number(score);
  /* handle all failures  */
  if (!this.callStats) {
    Plivo.log.warn('Stats integration not configured, ignoring feedback');
    return;
  }
  // On logout don't allow to sendQuality fb
  if (!this.userName) {
    Plivo.log.error('sendQualityFeedback() userName is null, isLoggedIn : ' + this.isLoggedIn);
    return;
  }
  if (!callUUID) {
    Plivo.log.error('sendQualityFeedback() callUUID is mandatory');
    return;
  }

  if (comment && comment.toString().length > 200) {
    Plivo.log.error('sendQualityFeedback() comment max length is 200 character');
    return;
  }
  if (!comment) {
    Plivo.log.error('sendQualityFeedback() comment is mandatory')
  }
  /* Success */
  if (score > 0 && score <= 5) {  // consider scores between 1-5
    var feedback = {
      overall : score,
      comment : comment
    };
    
    let session
    if (this._currentSession && this._currentSession.callUUID === callUUID) {
      session = this._currentSession;
    } else if (this._lastCallSession && this._lastCallSession.callUUID === callUUID) {
      session = this._lastCallSession;
    }
    //{ "score": score, "comment": comment }
    if (this.statsSocket) {
      this.statsSocket.qualityFeedback(session, feedback);
    }
    feedback.userID = this.userName;
    this.callStats.sendUserFeedback(callUUID, feedback, function (message) {
      Plivo.log.debug('Stats sendFeedback status: ' + message);
    });
    Plivo.log.debug('Feedback sent for callUUID: ' + callUUID);

  } else {
    Plivo.log.error('sendQualityFeedback() score: ' + score + ' , score should be from 1-5 range');
  }
};

Client.prototype.submitCallQualityFeedback = function (callUUID, starRating, issues, note, sendConsoleLogs) {

  return new Promise ((resolve, reject) => {
    /* handle all failures  */

    // On logout don't allow to sendQuality feedback
    if (!this.userName) {
      Plivo.log.error('sendQualityFeedback() userName is null, isLoggedIn : ' + this.isLoggedIn);
      reject("username not found");
      return;
    }
    if (!callUUID) {
      Plivo.log.error('submitCallQualityFeedback() callUUID is mandatory');
      reject("callUUID is mandatory");
      return;
    }

    // Validate Star Rating
    if (!starRating) {
      Plivo.log.error('submitCallQualityFeedback() starRating is not given ');
      reject("Star rating is Mandatory");
      return;
    }

    // Validate Score to be less than 5 to take extra details 
    var score = Number(starRating);
    if (score > 0 && score <= 5) {  // consider scores from 1-5
    
      // Validate Note
      if (note && note.toString().length > 280) {
        Plivo.log.error('submitCallQualityFeedback() max length for note is 280 characters');
        reject("Maximum length for note is 280 charecters");
        return;
      }

      // Validate Issues
      var issuesEnum = [];
      if(!Array.isArray(issues)){
        reject("Attribute issues should be an array");
        return;
      }

      if (score!=5 && (!issues || issues.length<1)) {
        Plivo.log.error('submitCallQualityFeedback() Atleast one issue is mandatory for feedback');
        reject("Atleast one issue is mandatory for feedback");
        return;
      } else if (issues || issues.length >= 1) {
        //Extract enum for issue
        issues.forEach(function(issue) {
          if(typeof issue=="string"){
            let _issue = issue.trim().toUpperCase();
            let extractedIssue = constants.DEFAULT_COMMENTS[_issue];
            if(extractedIssue)
                issuesEnum.push(extractedIssue);
          }
        });

        if (issuesEnum.length<1) {
          var validIssues = Object.keys(constants.DEFAULT_COMMENTS);
          if(score ==5 ){
            // star rating can choose to send or not send issues  
            Plivo.log.debug('submitCallQualityFeedback() Feedback with full rating without any Issues or matches from predefined list of issues -'+ validIssues);
          } else{
            // Validate Issues match the predefined issues list
            Plivo.log.error('submitCallQualityFeedback() Issues must be from the predefined list of issues for feedback -' + validIssues);
            reject("Issues must be from the predefined list of issues - "+ validIssues);
            return;
          }
        }
      }

      var feedback = {
        overall : score,
        comment : issuesEnum + " " + note || ""
      };

      if (this.callStats) {
        //Send Feedback to CallStats.io 
        this.callStats.sendUserFeedback(callUUID, feedback, function(message) {
          Plivo.log.debug('Stats sendFeedback status: ' + message);
          return;
        });
      }

      // Send Feedback to CallInsights 
      let session
      if (this._currentSession && this._currentSession.callUUID === callUUID) {
        session = this._currentSession;
      } else if (this._lastCallSession && this._lastCallSession.callUUID === callUUID) {
        session = this._lastCallSession;
      }
      if (session && this.statsSocket) {
         this.statsSocket.qualityFeedback(session, feedback);
      }

      // Send console logs

      // if (!(sendConsoleLogs === false || sendConsoleLogs === true)){
      //     Plivo.log.error('submitCallQualityFeedback() sendConsoleLogs Attribute should be either true or false');
      //     reject("sendConsoleLogs Attribute should be either true or false");
      //     return;
      // }

      if(sendConsoleLogs==true){
        var url = this.bucketApiUrl;
        var consoleBody = this.bucketApiBody;
        if(!url) {
          reject("Feedback is sent. But console logs could not be sent")
          return;
        }
        consoleBody.calluuid = callUUID;
        var filename="consolelogs"+callUUID+ this.userName;
        sendConsoleLogsToBucket(url, consoleBody, filename , feedback)
        .then((result)=>{
          resolve("Feedback is sent with console logs");
        }).catch((err)=>{
          Plivo.log.error("Feedback was not able to send console logs");
          reject(err);
          return;
        });
      }else{
        resolve("Feedback is sent");
      }

    }else{
      Plivo.log.error('submitCallQualityFeedback() score: '+score+' , score should be from 1-5 range');
      reject("score should be from 1-5 range");
      return;
    }

  });

};

var sendConsoleLogsToBucket = function(url, consoleBody, filename, feedback){
    
    return new Promise(function(resolve, reject) {
      fetch(url, {
        method   : 'POST',
        headers  : new Headers({'Content-Type': 'application/json'}),
        body     : JSON.stringify(consoleBody)
      }).then(response => {
        if (response.ok) {
          response.text().then(responsebody => {
            if (!responsebody) {
              Plivo.log.error('Did not get s3 url to upload');
              reject('Log file was not uploaded to server');
              return;
            }
            responsebody = JSON.parse(responsebody);
            var temps3url = new URL(responsebody.data);
            let content = Plivo.log.consolelogs();
            var binaryData = [];
            if(feedback)
              binaryData.push(JSON.stringify(feedback)+" \n");
            binaryData.push(content);
            var file = new Blob(binaryData, {type: "text/plain;charset=utf-8"});
            var myHeaders = new Headers();
            myHeaders.append("Content-Type", "text/plain");

            fetch(temps3url , {
                  method   : 'PUT',
                  headers  : myHeaders,
                  body     : file
              }).then(function (response) {
                  Plivo.log.info("Log file uploaded to server");
                  resolve("done");
              }).catch(function (err) {
                  Plivo.log.error("Log file was not uploaded to server", err);
                  reject("Log file was not uploaded to server");
              });
          }).catch((error) => {
            Plivo.log.error('Did not get s3 url to upload', error);
            reject('Log file was not uploaded to server');
          })
        }else{
          Plivo.log.error("WS API server did not return the presigned S3 Url for uploading call logs");
          reject("Bad response from server");
        }
      })
      .catch(function(error) {
          Plivo.log.error("WS API server did not return the presigned S3 Url for uploading call logs" , error);
          reject("API server did not return the presigned S3 Url for uploading call logs");
      });
  });
};

var owaNotification = function (connection) {
  if (connection && connection.signalingState != "closed" && SipLib.adapter.browserDetails.browser == "chrome"){
    var pc = connection;
    pc.getStats(function (res) {
      res.result().forEach(function (result) {
        var report = result;
        //Setting bytes send and audio Input Level
        report.stat('bytesSent') && Plivo.log.debug("Bytes sent by WebSDK client: " + report.stat('bytesSent') + " audioInputLevel: " + report.stat('audioInputLevel'));
        if (report.type === 'ssrc' && report.stat('mediaType') === 'audio' && parseInt(report.stat('bytesSent'), 10) === 0 && report.stat('audioInputLevel') === 0) {
          Plivo.log.debug("One way audio detected");
          _emitter.call(this, 'audio', 'warning', 'no_microphone_access', 0, true, "no access to your microphone");
        }

      });
    }, pc.getLocalStreams()[0].getAudioTracks()[0], function (err) { console.log(err); });
  }

};

var _emitter = function(group, level, type, value, active, desc) {
  var msgTemplate = { "group":group,
                      "level":level,
                      "type":type,
                      "value":value,
                      "active":active,
                      "desc":desc || ""
                    };
  this.emit('mediaMetrics', msgTemplate);
};

var _createSession = function(extraHeaders, phoneNumber) {
  var opts = {};
  var destinationUri;

  if (phoneNumber) {
    phoneNumber = String(phoneNumber);
  }

  if (typeof phoneNumber === 'undefined' || phoneNumber === null || phoneNumber.length <= 0) {
    Plivo.log.warn('Destination address cant be null and its length must be > 0');
    return false;
  }

  if (this._currentSession) {
    Plivo.log.warn("Can't make another call while in call");
    return false;
  }
  
  if (this.incomingInvites.size) {
    Plivo.log.warn("Can't make a call while there is an incoming call");
    return false;
  }

  extraHeaders = extraHeaders || {};
  var cleanExtraHeaders = [];
  this._outboundExtraHeaders = {};
  this._outboundCallNumber = phoneNumber;
  for (var key in extraHeaders) {
    var value = extraHeaders[key];
    if (headersUtil.checkExtraHeaderKey(key) && headersUtil.checkExtraHeaderVal(value)) {
      cleanExtraHeaders.push(key + ': ' + value);
      this._outboundExtraHeaders[key] = value;
      Plivo.log.debug('valid hdr = ' + key + ' -> ' + value);
    } else {
      Plivo.log.debug('invalid hdr = ' + key + ' -> ' + value);
    }
  }
  // client route region
  if (this.options.clientRegion) {
    cleanExtraHeaders.push("X-ClientRegion: " + this.options.clientRegion);
  }

  if (phoneNumber.substring(0, 4) != 'sip:') {
    destinationUri = 'sip:' + phoneNumber;
  } else {
    destinationUri = phoneNumber;
  }
  opts.sessionTimersExpires = constants.SESSION_TIMERS_EXPIRES;

  opts.pcConfig = {
    'sdpSemantics':'plan-b',
    'iceServers': [
      { 'urls': constants.STUN_SERVERS }
    ]
  };

  var audioConstraints = this.options.audioConstraints || true;
  opts.mediaConstraints = {
    audio: audioConstraints,
    video: false
  };
  opts.rtcConstraints = this.options.dscp ? ({ "optional": [{ "googDscp": true }] }) : null;
  opts.extraHeaders = cleanExtraHeaders;
  opts.mediaStream = window.localStream || null;

  opts.eventHandlers = {
    'sending': (evt) => {
      Plivo.log.debug('Outgoing call sending');
      this._currentSession.addConnectionStage(`O-invite@${dateMs()}`);
      this._currentSession.updateSignallingInfo({
        call_initiation_time: getCurrentTime()
      });
      Plivo.log.debug('call initiation time, sending invite');
      var outboundConnection = this._currentSession.session.connection || null;
      if(this.connectToneFlag !== false){
        documentUtil.playAudio(constants.CONNECT_TONE_ELEMENT_ID);
      }

      //Adding remote stream
      outboundConnection.ontrack = (evt) => {
        Plivo.log.debug('Outgoing call received addStream');
        if (!this._currentSession) return;
        this._currentSession.addConnectionStage(`addStream-success@${dateMs()}`);
        if(evt.streams[0]){
          /// on direct 200 OK with out 18x, we get The play() request was interrupted by a new load request. 100 timeout sec is workaround
          setTimeout(() => {
            this.remoteView.srcObject = evt.streams[0];
          }, 100);
          if(this.ringToneBackFlag && !isSessionConfirmed(this._currentSession.session)){
            setTimeout(() => {
              if (!isSessionConfirmed(this._currentSession.session)) {
                this.remoteView.pause();
              }
            }, 100)
          }else if(!this.ringToneBackFlag && !isSessionConfirmed(this._currentSession.session)){
            Plivo.log.debug('playAudio - MediaServer');
          }
        } else {
          Plivo.log.error('Outgoing call addStream failure');
          this._currentSession.addConnectionStage(`addStream-failure@${dateMs()}`);
        }
      };
      outboundConnection.oniceconnectionstatechange = () => {
        var iceState = outboundConnection.iceConnectionState;
        Plivo.log.debug('oniceconnectionstatechange:: '+iceState);
        if (!this._currentSession) return;
        this._currentSession.addConnectionStage(`iceConnectionState-${iceState}@${dateMs()}`);
        //Notify network drops
        iceConnectionCheck.call(this, iceState);
        if (this.callStats && this._currentSession.callUUID && outboundConnection) {
           if (iceState == 'failed' || iceState == 'disconnected') {
              Plivo.log.debug('iceState :: '+iceState)
              var errname = new DOMError(iceState, iceState);
              this.callStats.reportError(
                outboundConnection, this._currentSession.callUUID, 
                this.callStats.webRTCFunctions.iceConnectionFailure, 
                errname
              );
           }
           if (iceState == 'connected') {
            this.emit('onMediaConnected', this._currentSession.getCallInfo());
          }
        }
      }
    },
    'sdp': (evt) => {
      try{
        evt.sdp = checkCodecPreference(this.options.codecs, evt.sdp);
      }catch(err){
        Plivo.log.debug('checkCodecPreference err - ',err);
      }
    },
    'progress': (evt) => {
      const callUUID = evt.response.getHeader('X-Calluuid');
      this._currentSession.setCallUUID(callUUID);
      this._currentSession.setState(this._currentSession._STATE.RINGING);
      this.callUUID = callUUID;

      this.emit('onCallRemoteRinging', this._currentSession.getCallInfo());

      // Fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1495569
      // https://plivo-team.atlassian.net/browse/SUP-373
      if (this.browserDetails.browser === 'firefox' && this.browserDetails.version > 62 &&
          evt.response.body.indexOf('a=mid:0' === -1)) {
        evt.response.body = evt.response.body.replace('a=ice-pwd', 'a=mid:0\na=ice-pwd');
      }

      if (this.callStats && this._currentSession.session.connection) {
        var peerConnectionCallback = (message) => {
          Plivo.log.debug('Stats new fabric message: ' + message);
        };
        var dest = evt.response.headers.To[0].parsed.uri.user;
        this.callStats.addNewFabric(
          this._currentSession.session.connection, 
          dest, this.callStats.fabricUsage.audio, 
          this._currentSession.callUUID, peerConnectionCallback
        );
      }

      this._currentSession.addConnectionStage(`progress-${evt.response.status_code}@${dateMs()}`);
      Plivo.log.debug(`progress-${evt.response.status_code}@${dateMs()}`);
      this._currentSession.updateSignallingInfo({
        ring_start_time: getCurrentTime()
      });
      this._currentSession.setPostDialDelayEndTime(getCurrentTime());
      Plivo.log.debug('Outgoing call progress',evt.response.status_code);
      Plivo.log.debug('ringback tone enabled : '+this.ringToneBackFlag);
      // Stop connect tone on 18x response
      this.connectToneView.paused? null: documentUtil.stopAudio(constants.CONNECT_TONE_ELEMENT_ID);
      
      if(this.ringToneBackFlag){
        documentUtil.playAudio(constants.RINGBACK_ELEMENT_ID);
      }

      if(evt.response.status_code == 183 && evt.response.body){
        Plivo.log.debug(`callSession - ${this._currentSession.callUUID}`);
        this._currentSession.setPostDialDelayEndTime(getCurrentTime());

        // ringback tone is not enabled then use media server ringback tone
        if(!this.ringToneBackFlag){
          this.ringBackToneView.paused? null : documentUtil.stopAudio(constants.RINGBACK_ELEMENT_ID);
          return;
        }
      }
    },
    'accepted': (evt) => {
      const callUUID = evt.response.getHeader('X-Calluuid');
      this._currentSession.setCallUUID(callUUID);
      Plivo.log.info('Outgoing call accepted');
      Plivo.sendEvents.call(this, { "msg": "CALL_ANSWERED", 
                                    "info": "Outgoing call answered",
                                    "clientName"  : SipLib.adapter.browserDetails.browser,
                                    "userAgent"   : userAgent , 
                                    "clientVersionMajor" : clientVersionParse.major || clientVersionParse[0] || '0',
                                    "clientVersionMinor" : clientVersionParse.minor || clientVersionParse[1] || '0',
                                    "clientVersionPatch" : clientVersionParse.patch || clientVersionParse[2] || '0',
                                    "sdkName"        : sdkName ,
                                    "sdkVersionMajor": sdkVersionParse.major , 
                                    "sdkVersionMinor": sdkVersionParse.minor , 
                                    "sdkVersionPatch": sdkVersionParse.patch , 
                                    "devicePlatform": devicePlatform,
                                    "deviceOs"    : deviceOs
                                  }, this._currentSession);
      this._currentSession.updateSignallingInfo({
        answer_time: getCurrentTime()
      });
      this._currentSession.setPostDialDelayEndTime(getCurrentTime());

      var peerConnectionCallback = function (message) {
        Plivo.log.debug('Stats new fabric message: ' + message);
      };

      callStart.call(this);
      if (this.callStats && this._currentSession.session.connection) {
      const dest = evt.response.headers.To[0].parsed.uri.user;
       this.callStats.addNewFabric(
         this._currentSession.session.connection, 
         dest, this.callStats.fabricUsage.audio, 
         this._currentSession.callUUID, peerConnectionCallback
       );
      }
    },
    'confirmed': (evt) => {
      Plivo.log.debug(`Outgoing call confirmed - ${this._currentSession.callUUID}`);
      this._currentSession.addConnectionStage('confirmed@'+dateMs());
      this._currentSession.setState(this._currentSession._STATE.ANSWERED);
      this._currentSession.updateSignallingInfo({
        call_confirmed_time: getCurrentTime()
      });
      this.remoteView.paused && this.remoteView.play();
      //disableRtpTimeOut if enabled
      if (this.options.disableRtpTimeOut) {
        this._currentSession.session.connection.disableRtpTimeOut = true;
      }
      this.ringToneView.paused? null : documentUtil.stopAudio(constants.RINGTONE_ELEMENT_ID);
      this.ringBackToneView.paused? null : documentUtil.stopAudio(constants.RINGBACK_ELEMENT_ID);
      this.connectToneView.paused? null : documentUtil.stopAudio(constants.CONNECT_TONE_ELEMENT_ID);
      if ((this.statsSocket && this.callstatskey &&
            (
              (this.browserDetails.browser === 'chrome' && this.browserDetails.version > 63) ||
              (this.browserDetails.browser === 'firefox' && this.browserDetails.version > 59)
            )
          ) || 
          (this.browserDetails.browser === 'chrome' && this.browserDetails.version > 63)) {
        statsCollector.call(this, this._currentSession);
      } else if (this.statsSocket && this.callstatskey) {
        Plivo.log.warn("This browser version is not supported for collecting data for Call Insights API but the call will proceed despite this. Supported versions are Chrome version - 64 and above, Firefox version - 63 and above");
      }
      this.emit('onCallAnswered', this._currentSession.getCallInfo());
      setTimeout(owaNotification.bind(this), 3000, this._currentSession.session.connection, this);

    },
    'icecandidate': (event) => {
      const candidate = event.candidate;
      if(candidate && candidate.candidate.search('srflx') != -1) {
        event.ready();
        return;
      }
      if (this._currentSession.gotInitalIce) return;
      this._currentSession.gotInitalIce = true;
      setTimeout(() => {
        if (!this._currentSession) return;
        const connection = this._currentSession.session.connection;
        if (connection.iceGatheringState !== 'complete') {
          event.ready();
          Plivo.log.debug('iceGathering taking more than 2sec ' + connection.iceGatheringState);
          _emitter.call(this,'network','warning','ice_timeout', 2000, true, "Possible NAT/Firewall issue");
        }
      }, 2000)
    },
    'icetimeout': (sec) => {
      Plivo.log.debug('iceGathering timed out');
      _emitter.call(this,'network', 'warning', 'ice_timeout', sec, true, "Possible NAT/Firewall issue");
      if (this.statsSocket) {
        this.statsSocket.onIceFailure(this._currentSession, 'ice_timeout');
      }
    },
    'failed': (evt) => {
      Plivo.log.debug('Outgoing call failed: ' + evt.cause);

      if (!this._currentSession) return;

      this._currentSession.addConnectionStage('failed@'+dateMs());
      this._currentSession.updateSignallingInfo({
        hangup_time: getCurrentTime(),
        hangup_party: evt.originator,
        hangup_reason: evt.cause,
      });
      if (evt.cause === 'Rejected') {
        this._currentSession.setState(this._currentSession._STATE.REJECTED);
      } else if (evt.cause === 'Canceled') {
        this._currentSession.setState(this._currentSession._STATE.CANCELED);
      } else {
        this._currentSession.setState(this._currentSession._STATE.FAILED);
      }
      
      this.ringBackToneView.paused? null : documentUtil.stopAudio(constants.RINGBACK_ELEMENT_ID);
      this.connectToneView.paused? null : documentUtil.stopAudio(constants.CONNECT_TONE_ELEMENT_ID);

      if(evt.message) {
        this._currentSession.setCallUUID(evt.message.getHeader('X-CallUUID') || null);
      }
      
      if (this.callStats && this._currentSession.callUUID && !evt.cause.match('edia')) { // dont pass media errors as signalling err
        var errName = evt.cause, errMsg = errName;
        if (evt.message) {
          evt.message.status_code && (errMsg = String(evt.message.status_code));
        }

        var errname = new DOMError(errName, errMsg);
        Plivo.log.debug(errname);
        this.callStats.reportError(null, this._currentSession.callUUID, this.callStats.webRTCFunctions.signalingError, errname);
      }
      
      if (this.statsSocket && this._currentSession.callUUID && this.callstatskey && !evt.cause.match('edia')) { // dont pass media errors as signalling err
        var errName = evt.cause, errMsg = errName;
        if (evt.message) {
          evt.message.status_code && (errMsg = String(evt.message.status_code));
        }
        this._currentSession.updateSignallingInfo({
          signalling_errors: {
            "timestamp": getCurrentTime(),
            "error_code": errMsg,
            "error_description": errName
          }
        });
      }
      this.emit('onCallFailed', evt.cause, this._currentSession.getCallInfo());
      hangupClearance.call(this, this._currentSession);
    },    
    'ended': (evt) => {
      Plivo.log.debug(`Outgoing call ended - ${this._currentSession.callUUID}`);
      Plivo.log.info('Outgoing call ended');
      this._currentSession.addConnectionStage('ended@'+dateMs());
      this._currentSession.setState(this._currentSession._STATE.ENDED);
      this._currentSession.updateSignallingInfo({
        hangup_time: getCurrentTime(),
        hangup_party: evt.originator,
        hangup_reason: evt.cause,
      });

      if (this.callStats) {
        this.callStats.sendFabricEvent(
          this._currentSession.session.connection, 
          this.callStats.fabricEvent.fabricTerminated, 
          this._currentSession.callUUID
        );
      }
      this.emit('onCallTerminated',{"originator":evt.originator, "reason":evt.cause}, this._currentSession.getCallInfo());
      Plivo.AppError.call(this, {"name":"onCallTerminated","originator":evt.originator,"reason":evt.cause});
      hangupClearance.call(this, this._currentSession);
    },
    'getusermediafailed': (err) => {
      Plivo.log.error('getusermediafailed: '+err);
      if (this.userName && this.callStats) {
        err.message = "getusermediafailed";
        this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.getUserMedia, err);
      }
      if (this.statsSocket) {
        this.statsSocket.onMediaFailure(this._currentSession, err);
      }
    },
    'peerconnection:createofferfailed': (err) => {
      Plivo.log.error('peerconnection:createofferfailed: ', err);
      if (this.userName && this.callStats) {
        err.message = "peerconnection:createofferfailed";
        this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.createOffer, err);
      }
      if (this.statsSocket) {
        this.statsSocket.onSDPfailure(this._currentSession, "createofferfailed");
      }
    },
    'peerconnection:createanswerfailed': (err) => {
      Plivo.log.error('peerconnection:createanswerfailed: ', err);
      if (this.userName && this.callStats) {
        err.message = "peerconnection:createanswerfailed";
        this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.createAnswer, err);
      }
      if (this.statsSocket) {
        this.statsSocket.onSDPfailure(this._currentSession, "createanswerfailed");
      }
    },
    'peerconnection:setlocaldescriptionfailed': (err) => {
      Plivo.log.error('peerconnection:setlocaldescriptionfailed: ', err);
      if (this.userName && this.callStats) {
        err.message = "peerconnection:setlocaldescriptionfailed";
        this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.setLocalDescription, err);
      }
      if (this.statsSocket) {
        this.statsSocket.onSDPfailure(this._currentSession, "setlocaldescriptionfailed");
      }
    },
    'peerconnection:setremotedescriptionfailed': (err) => {
      if(err.message && !/pranswer/.test(err.message)){
        Plivo.log.error('peerconnection:setremotedescriptionfailed: ',err);
        if (this.userName && this.callStats) {
          err.message = "peerconnection:setremotedescriptionfailed";
          this.callStats.reportError(null, this.userName, this.callStats.webRTCFunctions.setRemoteDescription, err);
        }
        if (this.statsSocket) {
          this.statsSocket.onSDPfailure(this._currentSession, "setremotedescriptionfailed");
        }
      }
    }
  };
  try {
    this.phone.call(destinationUri, opts);
    Plivo.log.debug('Outgoing call options : ', JSON.stringify(opts.mediaConstraints));
  } catch (err) {
    Plivo.log.error('Failed to execute plivo.onCalling event handler',err);
    Plivo.AppError.call(this, { "name": err.name, "message": err.message, "method": "call()"});
    Plivo.sendEvents.call(this, { "msg": "ERROR_EVENT", "name": err.name, "info": err.message, "method": "call()" }, this._currentSession);
    return false;
  }
  return true;
};

var dateMs = function () {
  return (new Date()).getTime();
}

var getCurrentTime = function () {
  return Date.now();
}

var applyStatsSettings = function() {
  var storage = this.storage
  storage.local_audio = [];
  storage.remote_audio = [];
  storage.mosLocalMeasures = [];
  storage.mosRemoteMeasures = [];
  storage.jitterLocalMeasures = [];
  storage.jitterRemoteMeasures = [];
  storage.packetLossRemoteMeasures = [];
  storage.packetLossLocalMeasures = [];
  storage.rtt = [];
  storage.audioCodec = null;
  // maintain all active and inactive waring status here
  storage.warning = {
    audioLocalMeasures : false,
    audioRemoteMeasures : false,
    mosLocalMeasures : false,
    mosRemoteMeasures : false,
    jitterLocalMeasures : false,
    jitterRemoteMeasures : false,
    packetLossRemoteMeasures : false,
    packetLossLocalMeasures : false,
    rtt : false,
    ice_connection : false
  }
  storage.startAnalysis = false; // dont start mos immediately after call answer , wait for 5 secs
  setTimeout(function () {
    storage.startAnalysis = true;
    Plivo.log.debug('Stats startAnalysis started');
  }, 5000);
  return true;
}
var callStart = function() {
  this.storage = {};
  return applyStatsSettings.call(this);
}
var callStatsTokenCb = function() {
  var forcenew = true;
  return (forcenew, callback) => {
    Plivo.log.info('Stats token req...');
    var options = {
      'eventHandlers': {
        'succeeded': function (e) {
          Plivo.log.info('Stats token success!');
          var getToken = JSON.parse(e.response.getHeader('x-token'));
          if (getToken && getToken !== "0") {
            return callback(null, getToken.token);
          } else {
            Plivo.log.error('Stats token failed with 0');
            return callback('token failed 0');
          }
        },
        'failed': function (e) {
          if (e.response && e.response.status_code) {
            Plivo.log.error('Stats token failed!', e.response.status_code);
            return callback(e.response.status_code);
          } else {
            Plivo.log.error('Stats token failed!');
            return callback('failed');
          }
        }
      },
      'extraHeaders':[`X-appID: ${this.options.appId}`, `X-userID: ${this.userName}`]
    }
    this.phone.sendMessage('admin', '-- Plivo web client --', options);          
  }
}

var statsCollector = function (callSession) {
  if (this.browserDetails.browser == "chrome" || this.browserDetails.browser == "firefox") {
    const stats = new GetStats(this, this.statsCallback);
    callSession.setCallStats(stats);
    Plivo.log.debug('stats are: ', stats);
  } else {
    Plivo.log.debug('ignoring webrtc stats collection for ' + main.browserDetails.browser);
  }
  return true;
}

var iceConnectionCheck = function(iceState){
  // If iceState goes to disconnected or failed trigger media metrics event
  if( ["disconnected","failed"].indexOf(iceState) != -1){
    _emitter.call(this,'network','warning','ice_connection', iceState, true, "network drop");
    if(this.storage){
      this.storage.warning.ice_connection=true;
    }
  }
  if(iceState == "connected" && this.storage && this.storage.warning.ice_connection === true){
   _emitter.call(this,'network','warning','ice_connection', iceState, false); 
   this.storage.warning.ice_connection=false;
  }
}

var detectOWA  = function(cb){
  var localStream,pc1,pc2,servers=null;
  pc1 = new RTCPeerConnection(servers);
  pc2 = new RTCPeerConnection(servers);

  navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(function (stream) {
    localStream = stream;
    localOffer(pc1);
  }).catch(errHandler);

  pc1.onicecandidate = function (e) {
    onIceCandidate(pc2, e);
  }

  pc2.onicecandidate = function (e) {
    onIceCandidate(pc1, e)
  }

  function onIceCandidate(pc, event) {
    if (!event.candidate) { return }
    pc.addIceCandidate(event.candidate)
      .then()
      .catch(errHandler);
  }

  function errHandler(err) {
    cb && cb(null, err);
  }

  function localOffer(pc) {
    pc.addStream(localStream);
    pc.createOffer().then(function (des) {
      pc.setLocalDescription(des).then(function () {
        remoteOffer(pc2, des);
      }).catch(errHandler);
    }).catch(errHandler);
  }

  function remoteOffer(pc, sdp) {
    pc.setRemoteDescription(sdp).then(function () {
      if (sdp.type == "offer") {
        pc.createAnswer().then(function (description) {
          pc.setLocalDescription(description).then(function () {
          }).catch(errHandler);
          remoteOffer(pc1, description);
        }).catch(errHandler);
      }
    }).catch(errHandler);
  }

  function stopStream() {
    if (localStream) {
      localStream.getTracks().forEach(function (track) {
        track.stop();
        localStream.removeTrack(track);
        localStream = null;
      });
    }
    pc1.signalingState == "stable" && pc1.close();
    pc2.signalingState == "stable" && pc2.close();
  }

  function getStats() {
    Plivo.log.debug('getUM precheck icestate : ' + pc1.iceConnectionState);
    var statsCounter = 0;
    function processGetStats() {
      if (pc1.getLocalStreams()[0]) {
        pc1.getStats(function (res) {
          res.result().forEach(function (result) {
            var report = result;

            if (report.type === 'ssrc' && report.stat('mediaType') === 'audio') {
              var cbr = {
                "bytesSent": report.stat('bytesSent'),
                "audioInputLevel": report.stat('audioInputLevel')
              };
              if (Number(cbr.audioInputLevel) <= 0 && statsCounter != 2) {
                statsCounter++;
                setTimeout(processGetStats, 1000);
                Plivo.log.debug('getUM precheck re-attempt: ' + statsCounter);
              } else {
                cb && cb(cbr, null);
                setTimeout(stopStream, 3000); // since siplib new getUM at next moment is throwing user denied media
              }
            }
          });
        },
        pc1.getLocalStreams()[0].getAudioTracks()[0],
        errHandler
        );
      }
    }
    processGetStats();
  }

  // Don't wait more than 500ms
  setTimeout(getStats, 500);
}

var calcConnStage = function (obj) {
  var alinObj = [];
  var connStart;
  for (var i = 0; obj.length > i; i++) {
    var row = obj[i].split('@');
    if (i == 0) {
      connStart = row[1];
      alinObj.push(row[0] + ' = ' + row[1] + "#");
    } else {
      var ms = (new Date(row[1]) - new Date(connStart));
      if (ms > 1000) {
        ms = ms / 1000;
        ms = String(ms) + "s#";
      } else {
        ms = String(ms) + "ms#";
      }
      alinObj.push(row[0] + ' = ' + row[1] + ' +' + ms);
    }
  }
  alinObj = JSON.stringify(alinObj);
  alinObj = alinObj.replace(/[[",\]]/g, '');
  alinObj = alinObj.replace(/#/g, '\n');
  return alinObj;
}

var isSessionConfirmed = function(session){
  if(session){
    return session.isEstablished();
  }else{
    Plivo.log.debug("session not available");
    return false
  }
}

var hangupClearance = function(session) {
  Plivo.AppError.call(this, calcConnStage(session.connectionStages),'log');
  // if this is ongoing call session then set callSession to null
  session.clearCallStats();
  if (session === this._currentSession) {
    // Audio element clearence 
    this.remoteView.pause();
    this._lastCallSession = session;
    // this is maintained along with the _lastCallSession for backward compatiblity.
    this.lastCallUUID = session.callUUID;
    this._currentSession = null;
    
    this.callSession = null;
    this.callUUID = null;
    this.callDirection = null;
  } else if(this.incomingInvites.has(session.callUUID)) {
    this.incomingInvites.delete(session.callUUID);
  }
  if (this.lastIncomingCall && this.lastIncomingCall.callUUID === session.callUUID) {
    this.lastIncomingCall = null;
    // These are set to maintain backward compatiblity.
    if (!this.options.allowMultipleIncomingCalls) {
      this.callSession = null;
      this.callUUID = null;
      this.callDirection = null;
    }
    if (this.incomingInvites.size) {
      this.lastIncomingCall = this.incomingInvites.values().next().value;
      // These are set to maintain backward compatiblity.
      if (!this.options.allowMultipleIncomingCalls) {
        this.callSession = this.lastIncomingCall.session;
        this.callUUID = this.lastIncomingCall.callUUID;
        this.callDirection = this.lastIncomingCall.direction;
      }
    }
  }
  const signallingInfo = session.getSignallingInfo();

  Plivo.sendEvents.call(this, { "msg": "CALL_SUMMARY", 
                                "signalling"  : signallingInfo,
                                "clientName"  : SipLib.adapter.browserDetails.browser,
                                "userAgent"   : userAgent , 
                                "clientVersionMajor" : clientVersionParse.major || clientVersionParse[0] || '0',
                                "clientVersionMinor" : clientVersionParse.minor || clientVersionParse[1] || '0',
                                "clientVersionPatch" : clientVersionParse.patch || clientVersionParse[2] || '0',
                                "sdkName"        : sdkName ,
                                "sdkVersionMajor": sdkVersionParse.major , 
                                "sdkVersionMinor": sdkVersionParse.minor , 
                                "sdkVersionPatch": sdkVersionParse.patch , 
                                "devicePlatform": devicePlatform,
                                "deviceOs"    : deviceOs
                              }, session);
  if (this._currentSession) return;
  delete this.storage;
  if ( window.localStream){
    if(SipLib.adapter.browserDetails.browser == 'chrome' || this.permOnClick){ // stop local streams only for chrome
      try{
        window.localStream.getTracks()
        .forEach((track) => {
          track.stop();
          window.localStream.removeTrack(track);
        });
        window.localStream = null;
      } catch (err) {
        Plivo.log.debug('error on stop track in localStream : ' + err.message);
      }
    }
  }
}

var checkSDKVersion = function (){
  var apiHeaders = new Headers();
  apiHeaders.append('Accept', 'application/json');

  var init = {   method: 'GET',
                 headers: apiHeaders,
                 //mode: 'no-cors',
                 //cache: 'default' 
               };

  var req = new Request(constants.SDKVERSION_API_URL);

  fetch(req)
  .then(response => {
    if (response.ok) {
      response.json().then(json => {

        let websdkVerUpdate = JSON.parse(json.data);
        let inUseSDKVer = '2.1.15'.split('-')[0]; // Parse to extract major release version , omit trailing params like beta 
        let currentSDKVer = websdkVerUpdate.currentSDK.version.split('-')[0];
        let deprecatedSDKVer = websdkVerUpdate.deprecatedSDK.version.split('-')[0];

        // compareVersions 1 if greater , 0 if equal , -1 is smaller 
        if(compareVersions(currentSDKVer,inUseSDKVer)>0)
        Plivo.log.info("Not using latest WebSDK version " + currentSDKVer + " released on" + websdkVerUpdate.currentSDK.date +
          ". Change Description : "+ websdkVerUpdate.currentSDK.description);

        if(compareVersions(inUseSDKVer,deprecatedSDKVer)<=0)
        Plivo.log.warn("Deprecated version is being used. Versions older than " + deprecatedSDKVer +" will not be supported after " +
          websdkVerUpdate.deprecatedSDK.notSupportedAfter + ". Change Description : " + websdkVerUpdate.deprecatedSDK.description );

      });
    }
  });
}

module.exports = Client;


/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Client = __webpack_require__(/*! ./client */ "./lib/client.js");

function Plivo(options) {
  var client  = new Client(options);

  Object.defineProperties(this, {
    client: {
      enumerable: true,
      value: client
    }
  });
}

module.exports = Plivo;

/***/ }),

/***/ "./lib/media/audioDevice.js":
/*!**********************************!*\
  !*** ./lib/media/audioDevice.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(/*! ../util/constants */ "./lib/util/constants.js");
var Logger = __webpack_require__(/*! ../util/logger */ "./lib/util/logger.js");

// this local variable is created as a replacement of the older global Plivo.
const Plivo = { log: Logger, audioConstraints: {} };

var setAudioContraints = function(constraints) {
  Plivo.audioConstraints = constraints;
};

let availableAudioDevices = [];

let audioDevDicSetterCb = null;

var availableDevices = function(filterBy){
  return new Promise( function(resolve,reject){
    navigator.mediaDevices.enumerateDevices()
    // Array list of all devices
    .then(function(e){
      //Array desc of a single device
      var list =[];
      e.filter(function(dev){
        if(filterBy == "input"){
          if(dev.kind == "audioinput"){
            list.push(dev);
          }
        }else if(filterBy == "output"){
          if(dev.kind == "audiooutput"){
            list.push(dev);
          }
        }else{
          // push all audio input and output devices
          if( !(/video/i).test(dev.kind) ){
            list.push(dev);
          }
        }
      });
      resolve(list);
    })
    .catch(function (error){
      reject(error);
    })
  });
}

var revealAudioDevices = function(arg){
  return new Promise(function(resolve,reject){
    if(navigator.mediaDevices.getUserMedia) {
      navigator.mediaDevices.getUserMedia({audio:true,video:false})
        .then(function(stream) {
          if(arg == "returnStream"){
            resolve(stream);
          }else{
            stream.getTracks().forEach(function(track) {
              track.stop();
            });
            resolve("success");         
          }
        })
        .catch(function(err) {
          Plivo.log.error('failed to get user media :: '+err.name);
          reject(err.name); 
      });
    }else{ reject("no getUserMedia support"); }
  }); 
}

var inputDevices = (function(){
  return {
    set: function(deviceId){
      if (typeof deviceId != "string") {
        Plivo.log.error('deviceId should be string');
        return false;
      }
      const device = availableAudioDevices.filter(d => {
        return (d.deviceId === deviceId && d.kind === 'audioinput');
      });
      if (!device.length) {
        Plivo.log.error('Invalid input device Id')
        return false;
      }
      if(typeof Plivo.audioConstraints === 'object' && 'optional' in Plivo.audioConstraints){
        let updated = false;
        Plivo.audioConstraints.optional.forEach(e => {
          if (e.sourceId) {
            e.sourceId = deviceId;
            updated = true;
          }
        });
        if (!updated) {
          Plivo.audioConstraints.optional.push({"sourceId":deviceId});
        }
      } else if (typeof Plivo.audioConstraints === 'boolean') {
        Plivo.audioConstraints = { deviceId: deviceId };
      } else {
        Plivo.audioConstraints.deviceId = deviceId;
      }
      return true;
    },
    get: function(){
      if(Plivo.audioConstraints.optional){
        var sourceId = Plivo.audioConstraints.optional.filter(function(e){
          return e["sourceId"];
        });
        if(sourceId.length > 0){
          return sourceId[0]["sourceId"];
        }else{
          return "";
        }
      } else if (Plivo.audioConstraints.deviceId) {
        return Plivo.audioConstraints.deviceId;
      } else{
        return "";
      }
    },
    reset: function(){
      if(Plivo.audioConstraints.optional){
        Plivo.audioConstraints.optional = Plivo.audioConstraints.optional.filter(function(e){
          return !e["sourceId"];
        });
      } else if (Plivo.audioConstraints.deviceId) {
        delete Plivo.audioConstraints.deviceId;
      }
      return true;
    }
  }
})();

var outputDevices = (function(){
  return {
    set : function(deviceId){
      const device = availableAudioDevices.filter(d => {
        return (d.deviceId === deviceId && d.kind === 'audiooutput');
      });
      if (!device.length) {
        Plivo.log.error('Invalid output device Id');
        return false;
      }
      var speakerElement = document.querySelectorAll('[data-devicetype="speakerDevice"]');
      speakerElement.forEach(function(e){
        e.setSinkId && e.setSinkId(deviceId);
      });
      return true;
    },
    get: function(){
      var speakerElement = document.querySelector('[data-devicetype="speakerDevice"]');
      if(speakerElement.sinkId)
        return speakerElement.sinkId;
    },
    reset: function(){
      var speakerElement = document.querySelectorAll('[data-devicetype="speakerDevice"]');
      speakerElement.forEach(function(e){
        e.setSinkId && e.setSinkId("");
      });
      return true;
    },
    media: function(source){
      var sourceMap = {
        dtmf : "dtmfstar",
        ringback: constants.RINGBACK_ELEMENT_ID    
      }
      if(source && source in sourceMap){
        return document.getElementById(sourceMap[source]);
      }else{
        return document.getElementById(constants.RINGBACK_ELEMENT_ID);
      }
    }
  }
})();

var ringtoneDevices = (function(){
  return {
    set : function(deviceId){
      const device = availableAudioDevices.filter(d => {
        return (d.deviceId === deviceId && d.kind === 'audiooutput');
      });
      if (!device.length) {
        Plivo.log.error('Invalid output device Id');
        return false;
      }
      var ringToneElement = document.getElementById(constants.RINGTONE_ELEMENT_ID);
      ringToneElement.setSinkId && ringToneElement.setSinkId(deviceId);
      return true;
    },
    get: function(){
      var ringToneElement = document.getElementById(constants.RINGTONE_ELEMENT_ID);
      if(ringToneElement.sinkId)
        return ringToneElement.sinkId;   
    },
    reset: function(){
      var ringToneElement = document.getElementById(constants.RINGTONE_ELEMENT_ID);
      ringToneElement.setSinkId && ringToneElement.setSinkId("");
      return true;
    },
    media: function(){
      return document.getElementById(constants.RINGTONE_ELEMENT_ID);
    }
  }
})();

/*
  @param store true/false - true to store in Client for reference 
*/
var audioDevDictionary = function(store){
  return new Promise( function(resolve,reject){
    availableDevices().then(function(devices){
      var audioRef = [];
      let lableIsPresent = false;
      devices.forEach(function(dev){
        // If device label is not set then audioRef should be null
        if(dev.label){
          var strObj = JSON.stringify(dev);
          audioRef.push(strObj);
          lableIsPresent = true;
        }else{
          audioRef = null;	
        }
      });
      if(store){
        if (lableIsPresent) availableAudioDevices = devices;
        // Calling audioDevDicSetterCb for backward compatibity
        if (audioDevDicSetterCb) audioDevDicSetterCb(audioRef);
        resolve(true);
      }else{
        resolve({devices: devices, audioRef: audioRef}); // If you don't want to store then receive as cb
      }
    }).catch(function(err){
      Plivo.log.error('Error availableDevices() ',err);
      reject(err);
    });
  });
}

var checkAudioDevChange = function(){
  var that = this;
  audioDevDictionary().then(function(deviceInfo){
    const devices = deviceInfo.devices;
    const audioRef = deviceInfo.audioRef;
    if(availableAudioDevices && devices){
      //Check if device is newly added with devices
      devices.forEach(function(device){
        if(!availableAudioDevices.filter(a => a.deviceId === device.deviceId).length){ // If not present
          /*
            Setting USB audio device as default in mac sound settings will create below 
            1. fire new default device obj for USB audio
            2. fire new device obj with proper lable name for USB audio
            So ignore any new default device object, since we reference point '2'
          */
          if(!/default/i.test(device.deviceId)){
            that.emit('audioDeviceChange',{change:"added",device:device});
          }
        }
      });
      //Check if device is removed with exising audioDic
      availableAudioDevices.forEach(function(device){
        if(!devices.filter(a => a.deviceId === device.deviceId).length){ // If not present
          /*
            Ignore any default device object which is removed
          */
          if(!/default/i.test(device.deviceId)){
            that.emit('audioDeviceChange',{change:"removed",device:device});
          }
        }        
      });
    }
    if(!availableAudioDevices){
      that.emit('audioDeviceChange',{change:"",device:""});
    }
    if(devices){ //Update existing audioDevDic
      availableAudioDevices = devices;
      // Calling audioDevDicSetterCb for backward compatibity
      if (audioDevDicSetterCb) audioDevDicSetterCb(audioRef);
    }
  }).catch(function(err){
    Plivo.log.error('Error checkAudioDevChange() ',err);
  });
}

var audioDevDicSetter = function(setter) {
  audioDevDicSetterCb = setter;
}

module.exports.inputDevices = inputDevices;
module.exports.outputDevices = outputDevices;
module.exports.ringtoneDevices = ringtoneDevices;
module.exports.revealAudioDevices = revealAudioDevices;
module.exports.availableDevices = availableDevices;
module.exports.audioDevDictionary = audioDevDictionary;
module.exports.checkAudioDevChange = checkAudioDevChange;
module.exports.setAudioContraints = setAudioContraints;
module.exports.audioDevDicSetter = audioDevDicSetter;


/***/ }),

/***/ "./lib/media/document.js":
/*!*******************************!*\
  !*** ./lib/media/document.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var constants = __webpack_require__(/*! ../util/constants */ "./lib/util/constants.js");
var Logger = __webpack_require__(/*! ../util/logger */ "./lib/util/logger.js");

// this local variable is created as a replacement of the older global Plivo.
const Plivo = { log: Logger };

var setup = function(options, cb) {
  var remoteView = document.createElement('audio');
  remoteView.id = constants.REMOTE_VIEW_ID;
  remoteView.hidden = true;
  remoteView.autoplay = true;
  remoteView.width = 0;
  remoteView.height = 0;
  remoteView.setAttribute('data-devicetype','speakerDevice');
  document.body.appendChild(remoteView);

  var audioConnectingElement = document.createElement('audio');
  audioConnectingElement.id = constants.CONNECT_TONE_ELEMENT_ID;
  audioConnectingElement.loop = 'loop';
  audioConnectingElement.src = constants.CONNECT_TONE_URL;
  audioConnectingElement.setAttribute('data-devicetype','speakerDevice');
  document.body.appendChild(audioConnectingElement);

  var audioRingBackElement = document.createElement('audio');
  audioRingBackElement.id = constants.RINGBACK_ELEMENT_ID;
  audioRingBackElement.loop = 'loop';
  audioRingBackElement.src = constants.RINGBACK_URL;
  audioRingBackElement.setAttribute('data-devicetype','speakerDevice');
  document.body.appendChild(audioRingBackElement);

  var audioRingToneElement = document.createElement('audio');
  audioRingToneElement.id = constants.RINGTONE_ELEMENT_ID;
  audioRingToneElement.loop = 'loop';
  audioRingToneElement.src = constants.RINGTONE_URL;
  audioRingToneElement.setAttribute('data-devicetype','ringtoneDevice');
  document.body.appendChild(audioRingToneElement);

  var format = 'mp3';
  var baseUrl = 'https://cdn.plivo.com/sdk/browser/audio/dtmf-';

  var addDTMFTone = function (baseUrl, digit, format) {
    var id = 'dtmf' + digit;  
    var src = baseUrl + digit + '.' + format;
    var obj = document.createElement('audio');
    obj.id = id;
    obj.src = src;
    obj.setAttribute('data-devicetype','speakerDevice');
    document.body.appendChild(obj);
  };

  for (var i = 0; i <= 9; i++) {
    addDTMFTone(baseUrl, i, format);
  }

  addDTMFTone(baseUrl, 'star', format);
  addDTMFTone(baseUrl, 'pound', format);

  if(options.permOnClick){
    window.localStream = null;
    cb({status:'success',stream:false});
  }else{
    getLocalMedia(options.audioConstraints,function(evt){
      cb(evt);
    });
  }
};

var getLocalMedia = function(audioConstraints, cb){
  if (navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia({audio: audioConstraints,video: false})
      .then(function(stream) {
        window.localStream = stream;
        Plivo.log.debug('getUserMedia success');
        cb({'status':'success','stream':true});      
      })
      .catch(function(err) {
        Plivo.log.error('failed to get user media :: '+err.name);
        cb({'status':'failure','error':err.name});    
    });
  }else{
    Plivo.log.error('getUserMedia not available');
    cb({status:'failure','error':'getUserMedia not supported'});
  }
}

var playAudio = function(elementId) {
  try {
    const audioElement = document.getElementById(elementId)
    audioElement.currentTime = 0;
    audioElement.play();
    Plivo.log.debug('playAudio - '+elementId);
  } catch (e) { 
    Plivo.log.debug('failed to play audio for elementId ' + elementId + ' Cause: ' + e);
  }
};

var stopAudio = function(elementId) {
  try {
    document.getElementById(elementId).pause();
    Plivo.log.debug('stopAudio - '+elementId);
  } catch (e) {
    Plivo.log.debug('failed to stop audio for elementId ' + elementId + ' Cause: ' + e);
  }
};

var maskPage = function () {
  var tag = document.createElement('div');
  tag.id = "plivo_mask";
  document.body.insertBefore(tag, document.body.firstChild);
  tag.style.position = "fixed";
  tag.style.top = "0";
  tag.style.left = "0";
  tag.style.width = "100%";
  tag.style.height = "100%";
  tag.style.background = "#000";
  tag.style.opacity = "0.8";
  tag.style.filter = "alpha(opacity=80)";
  tag.style.zindex = "50";
};

module.exports.setup = setup;
module.exports.getLocalMedia = getLocalMedia;
module.exports.playAudio = playAudio;
module.exports.stopAudio = stopAudio;
module.exports.maskPage = maskPage;


/***/ }),

/***/ "./lib/stats/rtpstats.js":
/*!*******************************!*\
  !*** ./lib/stats/rtpstats.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(/*! ../util/constants */ "./lib/util/constants.js");
const AudioLevel = __webpack_require__(/*! ../util/audiolevel */ "./lib/util/audiolevel.js");
var Logger = __webpack_require__(/*! ../util/logger */ "./lib/util/logger.js");

// this local variable is created as a replacement of the older global Plivo.
const Plivo = { log: Logger };

var getRTPStats = function(that, cb){
  var cs = this;
  cs.clientScope = that;
  cs.pc = that._currentSession.session.connection;
  cs.xcallUUID = that._currentSession.callUUID;
  cs.callUUID = that._currentSession.sipCallID;
  cs.corelationId = that._currentSession.sipCallID;
  cs.userName = that.userName;
  cs.storage = that.storage;
  cs.callstatskey = that.callstatskey;
  cs.statsioused = that.statsioused;

  if(!cs.pc || !cs.callUUID){
    cs.pc? null : Plivo.log.error("pc obj is null, webrtc stats error");
    cs.callUUID? null : Plivo.log.error("callUUID is null, webrtc stats error");
    // delete cs;
    return;
  }
  // If all fine then go for further processing
  cs.baseStatsCollected = false;
  cs.packets = {};

  const senderMediaStream = new MediaStream();
  senderMediaStream.addTrack(cs.pc.getSenders()[0].track);
  const receiverMediaStream = new MediaStream();
  receiverMediaStream.addTrack(cs.pc.getReceivers()[0].track);
  cs.localAudioLevelHelper = new AudioLevel(senderMediaStream);
  cs.remoteAudioLevelHelper = new AudioLevel(receiverMediaStream);

  try {
    // the format of codec information in the sdp message
    // a=rtpmap:0 PCMU/8000
    var codec = cs.pc.remoteDescription.sdp.match(/rtpmap:.*/)[0].split(' ')[1].split('/')[0];
  } catch (e) {
    Plivo.log.debug('Error fetching codec from remote description sdp message' , e);
  }

  this.statsTimer = setInterval(function(){
     var stream = {codec:"",local:{}, remote:{}, networkType: ""};
     if(that.browserDetails.browser=="chrome"){

        cs.pc.getStats(function (res) {
          res.result().forEach(function(result) {
            if (result.type === 'localcandidate') {
              if (result.stat("candidateType") === 'host' && stream.gotNetworkType) {
                return;
              }
              switch (result.stat("networkType")) {
                case 'wlan':
                  stream.networkType = 'wifi'
                  break;
                case 'lan':
                  stream.networkType = 'ethernet'
                default:
                  stream.networkType = result.stat("networkType");
              }
              if (result.stat("candidateType") !== 'host') {
                stream.gotNetworkType = true;
              }
              return;
            }
            if(result.type != "ssrc"){
              return;
            }
            if(result.stat('bytesSent')){
              result.names().forEach(function(e){
                stream["local"][e] = result.stat(e);
              });
            }
            if(result.stat('bytesReceived')){
              result.names().forEach(function(e){
                stream["remote"][e] = result.stat(e);
              });
            }
            if(result.stat('googCodecName')){
              stream["codec"] = result.stat("googCodecName");
            }
          });
          stream.local.audioInputLevel = cs.localAudioLevelHelper.getAudioLevel();
          stream.remote.audioOutputLevel = cs.remoteAudioLevelHelper.getAudioLevel();
          cs.processStats(stream, cb);
        },
          null,
          function(err){
            Plivo.log.error('peerConnection rtpstats getStats error', err);
        });
     }else if(that.browserDetails.browser=="firefox"){
        stream["codec"] = codec || '';
        cs.pc.getSenders()[0].getStats().then(function(results) {
          stream["local"] = results.get('outbound_rtp_audio_0');

          if (results.has('outbound_rtcp_audio_0')) {
            const outboundRTCP = results.get('outbound_rtcp_audio_0');
            stream["local"].rtt         = outboundRTCP.roundTripTime;
            stream["local"].jitter      = outboundRTCP.jitter;
            stream["local"].packetsLost = outboundRTCP.packetsLost;
          }
          cs.pc.getReceivers()[0].getStats().then(function(results) {
            stream["remote"] = results.get('inbound_rtp_audio_0');
            stream.local.audioInputLevel = cs.localAudioLevelHelper.getAudioLevel();
            stream.remote.audioOutputLevel = cs.remoteAudioLevelHelper.getAudioLevel();
            cs.processStats(stream, cb);
          })
          .catch((e) => {
            Plivo.log.debug('Error in getStats RemoteStreams API ' , e);
          });
        })
        .catch((e) => {
          Plivo.log.debug('Error in getStats LocalStreams API ' , e);
        });
     }else {
        Plivo.log.error(`Unsuppported browser is being used. Plivo supports only ${that.supportedBrowsers()}`)
     }

  },constants.GETSTATS_INTERVAL);
}
// stream - object with local and remote
getRTPStats.prototype.processStats = function(stream, cb){
  var cs = this;
  cs.collected = {
    msg     :"CALL_STATS",
    callstats_key: cs.callstatskey,
    local   : {},
    remote  : {},
    codec   : stream.codec,
    xcallUUID: cs.xcallUUID,
    callUUID: cs.callUUID,
    corelationId: cs.corelationId,
    userName: cs.userName,
    timeStamp: Date.now(),
    domain  : constants.DOMAIN,
    source  : constants.STATS_SOURCE,
    version : constants.STATS_VERSION,
    networkType : stream.networkType || 'unknown',
    networkEffectiveType : navigator.connection ? navigator.connection.effectiveType : 'unknown',
    networkDownlinkSpeed : navigator.connection ? navigator.connection.downlink : -1,
    statsIOUsed : cs.statsioused
  };
  
  cs.collected.local.audioLevel = cs.handleNull(stream.local.audioInputLevel, "int");
  cs.collected.remote.audioLevel = cs.handleNull(stream.remote.audioOutputLevel, "int");
  if(cs.clientScope.browserDetails.browser=="chrome") {
    cs.collected.local.rtt = cs.handleNull(stream.local.googRtt, "float");
    cs.collected.local.jitter = cs.handleNull(stream.local.googJitterReceived, "float");
    cs.collected.remote.jitter = cs.handleNull(stream.remote.googJitterReceived, "float");
  } else if(cs.clientScope.browserDetails.browser=="firefox") {
    cs.collected.local.rtt = cs.handleNull(stream.local.rtt), "float";
    cs.collected.local.jitter = cs.handleNull(stream.local.jitter, "float");
    cs.collected.remote.jitter = cs.handleNull(stream.remote.jitter, "float");
  }
  cs.collected.remote.packetsReceived = cs.handleNull(stream.remote.packetsReceived, "int");
  cs.collected.local.packetsSent = cs.handleNull(stream.local.packetsSent, "int");
  cs.collected.remote.bytesReceived = cs.handleNull(stream.remote.bytesReceived, "int");
  cs.collected.local.bytesSent = cs.handleNull(stream.local.bytesSent, "int");
  cs.collected.remote.packetsLost = cs.handleNull(stream.remote.packetsLost, "int");
  cs.collected.local.packetsLost = cs.handleNull(stream.local.packetsLost, "int");
  cs.collected.remote.ssrc = cs.handleNull(stream.remote.ssrc, "int");
  cs.collected.local.ssrc = cs.handleNull(stream.local.ssrc, "int");
  cs.calculateStats(stream);
  cb(cs.collected);
}

getRTPStats.prototype.calculateStats =function(stream){
  var cs = this;
  function basePackets(stream){
    cs.packets.prePacketsReceived = cs.handleNull(stream.remote.packetsReceived, "int");
    cs.packets.prePacketsSent = cs.handleNull(stream.local.packetsSent, "int");
    cs.packets.preRemotePacketsLoss = cs.handleNull(stream.remote.packetsLost, "int");
    cs.packets.preLocalPacketsLoss = cs.handleNull(stream.local.packetsLost, "int");
  }
  if(!cs.baseStatsCollected){
    cs.collected.local.fractionLoss = 0;
    cs.collected.remote.fractionLoss = 0;
    basePackets(stream);
    cs.baseStatsCollected=true;
    return;
  }

  //Calculating local packet Loss
  var localPacketsLost = cs.handleNull(stream.local.packetsLost, "int") -  cs.packets.preLocalPacketsLoss;
  var localPacketsSent = cs.handleNull(stream.local.packetsSent, "int") - cs.packets.prePacketsSent;
  cs.collected.local.fractionLoss = cs.handleNull((localPacketsLost / localPacketsSent).toFixed(3), "int");

  // Calculating remote packet Loss
  var remotePacketsLost = cs.handleNull(stream.remote.packetsLost, "int") - cs.packets.preRemotePacketsLoss;
  var remotePacketsReceived = cs.handleNull(stream.remote.packetsReceived, "int") - cs.packets.prePacketsReceived;
  cs.collected.remote.fractionLoss = cs.handleNull((remotePacketsLost / (remotePacketsReceived+remotePacketsLost)).toFixed(3), "int");

  // Mean Opinion Score
  function processMos(type, rtt, jitter, fractionLoss){
    var mosObj = cs.storage[type];

    if((jitter == null) || (fractionLoss == null || isNaN(fractionLoss)) || (Number(rtt || 0) == 0)) {
      cs.collected.local.mos = null;
      return; }

    function mosCal(){
      var effectiveLatency = 0;
      var Rval = 0;
      var Rfactor = (cs.storage.audioCodec == "opus") ? 95 : 93.2;
      var mos;
      effectiveLatency = rtt + (jitter * 2) + 10;
      if(effectiveLatency < 160){
        Rval = Rfactor - (effectiveLatency/40);
      }else{
        Rval = Rfactor - (effectiveLatency - 120)/10;
      }
      Rval = Rval - (fractionLoss * 2.5);
      if (Rval <= 0) {
        mos = 1;
      } else if (Rval < 100) {
        mos = 1 + (0.035) * Rval + (.000007) * Rval * (Rval-60) * (100-Rval);
        mos = mos.toFixed(3);
      } else {
        mos = 4.5;
      }
      mosObj.push(mos);
      Plivo.log.debug('mos '+type,mos);

      if(type == 'mosLocalMeasures'){
        cs.collected.local.mos = Number( mos || 0);
      }
      if(type == 'mosRemoteMeasures'){
        cs.collected.local.mos = Math.min(Number( mos || 0), cs.collected.local.mos);
      }

    }
    if(mosObj.length == 2){
      mosCal(); // add 3rd sample
      var totMosObj = mosObj.filter(function (item, pos){
        return item < 3; // mos 1-5 emit warning for mos value less than 3
      });
      if(totMosObj.length >= 2){ // if atleast 2 items has mos less than 3
        var mosSum = totMosObj.reduce(function(sum, val){
          return sum + val;
        });
        var mosAvg = (mosSum / totMosObj.length ).toFixed(3);
        cs.storage.warning[type] = true;
        Plivo.log.debug(type+" : getting low mos : ", cs , mosObj);
        // cannot use parent class function here
        //_emitter(cs,'network','warning','low_mos', mosAvg, true, type);
      }else{
        cs.storage.warning[type] ? (cs.storage.warning[type]=false) :null;
          // cannot use parent class function here
          //  _emitter(cs,'network','warning','low_mos', 0, false, type))
      }
    }else{
      mosCal();
    }
    if(mosObj.length == 3)
      mosObj.splice(0,2) // remove first 2, after every 3 samples
  }

  processMos('mosLocalMeasures',cs.collected.local.rtt, cs.collected.local.jitter, cs.collected.local.fractionLoss);
  processMos('mosRemoteMeasures',cs.collected.local.rtt, cs.collected.remote.jitter, cs.collected.remote.fractionLoss);
  basePackets(stream);
  return true;
}

getRTPStats.prototype.stop = function() {
  this.localAudioLevelHelper.stop();
  this.remoteAudioLevelHelper.stop();
}

getRTPStats.prototype.handleNull = function (value, type){
  if(value == null || isNaN(value)) {
    return value;
  } else {
    returnValue = (type == "int") ? Number(value) : Number(value).toFixed(3);
    return returnValue;
  }
}

module.exports = {
   getRTPStats : getRTPStats
}


/***/ }),

/***/ "./lib/stats/ws.js":
/*!*************************!*\
  !*** ./lib/stats/ws.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Logger = __webpack_require__(/*! ../util/logger */ "./lib/util/logger.js");
var constants = __webpack_require__(/*! ../util/constants */ "./lib/util/constants.js");

// this local variable is created as a replacement of the older global Plivo.
const Plivo = { log: Logger };

var statsSocket = function (client, callstatskey) {
	this.url = constants.STATSSOCKET_URL;
	this.ws = null;
	this.userName = client.userName;
	this.callstatskey = callstatskey;
	this.connect();
};

statsSocket.prototype.heartbeat =function(that){
	if (this.isConnected()) {
		var msg= JSON.stringify({
			"heartbeat":"healthy",
			"username" : that.userName
		});
		this.ws.send(msg);
		Plivo.log.debug('sent heartbeat to statsSocket :' , msg);
		return true;
	} else {
		Plivo.log.error('unable to send heartbeat, statsSocket is not open');
		return false;
	}
}

statsSocket.prototype.addCallInfo = function(callSession, obj) {
	obj.callstats_key = this.callstatskey;
	obj.callUUID = callSession.sipCallID;
	obj.corelationId = callSession.sipCallID;
	obj.xcallUUID = callSession.callUUID;
	obj.timeStamp = Date.now();
	obj.userName = this.userName;
	obj.domain = constants.DOMAIN;
	obj.source = constants.STATS_SOURCE;
	obj.version = constants.STATS_VERSION;
	return obj;
};

statsSocket.prototype.connect = function (first_argument) {
	Plivo.log.debug('opening statsSocket');
	// if (this.ws) {
	// 	this.disconnect();
	// }
	try {
		this.ws = new WebSocket(this.url);
		// this.ws.binaryType = 'arraybuffer';
		this.ws.onopen = onOpen.bind(this);
		this.ws.onclose = onClose.bind(this);
		this.ws.onmessage = onMessage.bind(this);
		this.ws.onerror = onError.bind(this);
	} catch (e) {
		Plivo.log.error('statsSocket open error : ' , e);
		onError.call(this, e);
	}
};

statsSocket.prototype.disconnect = function (e) {
	Plivo.log.debug('statsSocket disconnect()', e);

	if (this.ws) {
		// unbind websocket event callbacks
		this.ws.onopen = function () { };
		this.ws.onclose = function () { };
		this.ws.onmessage = function () { };
		this.ws.onerror = function () { };

		this.ws.close();
		this.ws = null;
	}
};

statsSocket.prototype.send = function (message) {
	if (this.isConnected()) {
		Plivo.log.debug('stats : ' , message);
		var callstats = JSON.stringify(message);
		this.ws.send(callstats);
		Plivo.log.debug('stats send success');
		return true;
	} else {
		Plivo.log.error('unable to send message, statsSocket is not open');
		return false;
	}
};

statsSocket.prototype.isConnected = function () {
	if (this.ws.readyState === this.ws.OPEN) {
		return true;
	} else {
		return false;
	}
};
/* Event handlers */

function onOpen() {
	Plivo.log.debug('statsSocket ' + this.url + ' connected');
}

function onClose(e) {
	Plivo.log.debug('statsSocket close()', e);
	var that = this;
	Plivo.log.debug('statsSocket ' + this.url + ' closed');
	if (e.wasClean === false) {
		Plivo.log.debug('statsSocket abrupt disconnection,  reconnecting in ', constants.STATSSOCKET_RECONNECT_SEC / 1000 + ' sec');
		if (!this.isConnected()) {
			setTimeout(function () {
				that.connect();
			}, constants.STATSSOCKET_RECONNECT_SEC);
		}
	}
}

function onMessage(e) {
	Plivo.log.info('received statsSocket message: ', e.data);
}

function onError(e) {
	Plivo.log.debug('statsSocket ' + this.url + ' error: ' + e);
}

/*
	Fabric events
*/
statsSocket.prototype.signallingEvent = function (stats_code) {
	constants.SIP_ERROR_CODE[stats_code];
}

statsSocket.prototype.onIceFailure = function (callSession, error) {
	if (callSession.callUUID && this.callstatskey) {
		var obj = { "msg": "ICE_FAILURE", "error": error };
		obj = this.addCallInfo(callSession, obj);
		this.send(obj);
	}
}

statsSocket.prototype.onMediaFailure = function (callSession, error) {
	if (callSession.callUUID && this.callstatskey) {
		var obj = { "msg": "MEDIA_FAILURE", "error": error };
		obj = this.addCallInfo(callSession, obj);
		this.send(obj);
	}
}

statsSocket.prototype.onSDPfailure = function (callSession, error) {
	if (callSession.callUUID && this.callstatskey) {
		var obj = { "msg": "SDP_FAILURE", "error": error };
		obj = this.addCallInfo(callSession, obj);
		this.send(obj);
	}
}

statsSocket.prototype.onToggleMute = function (callSession, action) {
	if (callSession.callUUID && this.callstatskey) {
		var obj = { "msg": "TOGGLE_MUTE", "action": action };
		obj = this.addCallInfo(callSession, obj);
		this.send(obj);
	}
}
statsSocket.prototype.qualityFeedback = function (callSession, feedback) {
	// feedback.msg = "FEEDBACK";
	// feedback.timeStamp = Math.floor(Date.now() / 1000);
	// this.send(feedback);
	if (callSession.callUUID && this.callstatskey) {
		var obj = { "msg": "FEEDBACK", "info": feedback };
		obj = this.addCallInfo(callSession, obj);
		this.send(obj);
	}
}

module.exports = {
	statsSocket: statsSocket
}


/***/ }),

/***/ "./lib/util/CallSession.js":
/*!*********************************!*\
  !*** ./lib/util/CallSession.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function CallSession(options) {
  this._STATE = {
    INITIALIZED: 'initialized',
    RINGING: 'ringing',
    ANSWERED: 'answered',
    REJECTED: 'rejected',
    IGNORED: 'ignored',
    CANCELED: 'canceled',
    FAILED: 'failed',
    ENDED: 'ended'
  };
  
  this.callUUID = options.callUUID;
  this.sipCallID = options.sipCallID;
  this.direction = options.direction;
  this.src = options.src;
  this.dest = options.dest;
  this.state = this._STATE.INITIALIZED;
  this.extraHeaders = options.extraHeaders;
  this.session = options.session;
  this.connectionStages = [];
  this.gotInitalIce = false;
  this._stats = null;
  this.signallingInfo = {};
  
  if (options.call_initiation_time) {
    this.signallingInfo.call_initiation_time = options.call_initiation_time;
  }
    
  this.postDialDelayEndTime;
  
}

CallSession.prototype.setCallState = function() {
  this._connectionStages = [];
};

CallSession.prototype.setCallUUID = function(callUUID) {
  this.callUUID = callUUID;
};

CallSession.prototype.setState = function(state) {
  this.state = state;
};

CallSession.prototype.addConnectionStage = function(stage) {
  this.connectionStages.push(stage);
};

CallSession.prototype.getConnectionStages = function() {
  return this.connectionStages;
};

CallSession.prototype.setCallStats = function(stats) {
  this._stats = stats;
};

CallSession.prototype.clearCallStats = function() {
  if (!this._stats) return;
  clearInterval(this._stats.statsTimer);
  this._stats.stop();
  this._stats = null;
}

CallSession.prototype.updateSignallingInfo = function(object) {
  this.signallingInfo = Object.assign(this.signallingInfo, object);
};

CallSession.prototype.getSignallingInfo = function() {
  return Object.assign(this.signallingInfo, {
    post_dial_delay: this.postDialDelayEndTime - this.signallingInfo.call_initiation_time
  });
};

CallSession.prototype.setPostDialDelayEndTime = function(time) {
  if (!this.postDialDelayEndTime) {
    this.postDialDelayEndTime = time;
  }
};

CallSession.prototype.getCallInfo = function() {
  return {
    callUUID: this.callUUID,
    direction: this.direction,
    src: this.src,
    dest: this.dest,
    state: this.state,
    extraHeaders: this.extraHeaders,
  }
};

module.exports = CallSession;

/***/ }),

/***/ "./lib/util/audiolevel.js":
/*!********************************!*\
  !*** ./lib/util/audiolevel.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Based on https://github.com/otalk/hark
// and https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode
var Logger = __webpack_require__(/*! ./logger */ "./lib/util/logger.js");

function AudioContextFactory() {
  this.AudioContext = window.AudioContext || window.webkitAudioContext;
  this.audioContext = null;
  this.audioContextCount = 0;
}

AudioContextFactory.prototype.getAudioContext = function() {
  if (!this.audioContext) {
    this.audioContext = new AudioContext();
  }
  this.audioContextCount += 1;
  return this.audioContext;
}

AudioContextFactory.prototype.stop = function() {
  if (!this.audioContext) return;
  this.audioContextCount -= 1;
  if (this.audioContextCount === 0) {
    this.audioContext.close();
    this.audioContext = null;
    Logger.debug('AudioContext no longer needed so closed');
  }
}

const audioContextFactory = new AudioContextFactory();

// stream is instance of MediaStream.
function AudioLevel(stream) {
  this.volumeLevel = -100;
  this.fftBins = null;
  this.analyser = null;
  this.stopped = false;

  const audioContext = audioContextFactory.getAudioContext();
  this.analyser = audioContext.createAnalyser();

  this.analyser.fftSize = 1024;
  this.analyser.minDecibels = -100;
  this.analyser.maxDecibels = 0;
  this.analyser.smoothingTimeConstant = 0.1;
  this.fftBins = new Float32Array(this.analyser.frequencyBinCount);
  this.sourceNode = audioContext.createMediaStreamSource(stream);
  this.sourceNode.connect(this.analyser);
}

AudioLevel.prototype.getAudioLevel = function() {
  let maxVolume = -100;
  const fftBins = this.fftBins;
  this.analyser.getFloatFrequencyData(fftBins);

  for(var i=4, ii=fftBins.length; i < ii; i++) {
    if (fftBins[i] > maxVolume && fftBins[i] < 0) {
      maxVolume = fftBins[i];
    }
  };
  return maxVolume;
}

AudioLevel.prototype.stop = function() {
  if (this.stopped) return;
  this.stopped = true;
  this.analyser.disconnect();
  this.sourceNode.disconnect();
  audioContextFactory.stop();
}

module.exports = AudioLevel;


/***/ }),

/***/ "./lib/util/callAnalytics.js":
/*!***********************************!*\
  !*** ./lib/util/callAnalytics.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Logger = __webpack_require__(/*! ./logger */ "./lib/util/logger.js");

// this local variable is created as a replacement of the older global Plivo.
const Plivo = { log: Logger };

var processSteams = function(_emitter, streams, isLocalMuted){
  var that = this;
  function processAudioLevel(type,val){
    var audioObj = that.storage[type];
    if(audioObj.length == 2){ // Check at every 3 collection
      audioObj.push(Number(val));

      // unchanged volume level is processed here; 
      var identicalCollector = {};
      var audioVol = null; // most identical audio volume gets updated here
      audioObj.forEach(function(val){
          identicalCollector[val] = identicalCollector[val] + 1 || 1;
      });
      for(var vol in identicalCollector){
        if(identicalCollector[vol] >=2){ // if 2 or more vol is same out of 3 sample
          audioVol = Number(vol);
        }
      }
      if(typeof audioVol == "number"){ //identical volumes like 0, 8 are considered to mute  
        that.storage.warning[type] = true;
        if(audioVol > 1){
          Plivo.log.debug('Same audioLevel detected for '+type+" : ",that.str(audioObj));
        }else{
          Plivo.log.debug('Audio mute detected for '+type+" : ",that.str(audioObj));
        }
        if (!(isLocalMuted && type == 'local_audio')) {
          _emitter.call(that,'audio','warning','no_audio_received', audioVol, true, type);
        }
      }else{
        that.storage.warning[type] ? (that.storage.warning[type]=false, _emitter.call(that,'audio','warning','no_audio_received', 0, false, type)) : null;
      }
    }else{
      audioObj.push(Number(val));
    }
    if(audioObj.length == 3)
      audioObj.splice(0,2) // remove first 2, after every 3 samples
  }
  function processRtt(type, val){
    var val = Number(val);
    var rttObj = that.storage[type];
    if(rttObj.length == 2){
      rttObj.push(val);
      // console.debug('processRtt',rttObj);
      var totRttObj = rttObj.filter(function (item, pos){
        return item > 400;
      });
      if(totRttObj.length >= 2){
        var rttSum = totRttObj.reduce(function(sum, val){
          return sum + val;
        });
        var rttAvg = (rttSum / totRttObj.length ).toFixed(2);
        that.storage.warning[type] = true;
        Plivo.log.debug(type+" : getting high rtt  : ",that.str(totRttObj));
        _emitter.call(that,'network','warning','high_rtt', rttAvg, true, 'high latency');
      }else{
        that.storage.warning[type] ? (that.storage.warning[type]=false, _emitter.call(that,'network','warning','high_rtt', 0, false)) : null;
      }     
    }else{
      rttObj.push(val);
    }
    if(rttObj.length == 3)
      rttObj.splice(0,2) // remove first 2, after every 3 samples     
  }
  function processJitter(type,val){
    var val = Number(val);
    var jitterObj = that.storage[type];
    if(jitterObj.length == 2){
      jitterObj.push(val);
      // console.debug('processJitter',jitterObj);
      var totJitterObj = jitterObj.filter(function (item, pos){
        return item > 30;
      });
      if(totJitterObj.length >= 2){
        var jitterSum = totJitterObj.reduce(function(sum, val){
          return sum + val;
        });
        var jitterAvg = jitterSum / totJitterObj.length;
        that.storage.warning[type] = true;
        Plivo.log.debug(type+" : getting high jitter rate : ",that.str(totJitterObj));
        _emitter.call(that,'network','warning','high_jitter', jitterAvg, true, type);
      }else{
        that.storage.warning[type] ? (that.storage.warning[type]=false, _emitter.call(that,'network','warning','high_jitter', 0, false, type)) : null;
      }
    }else{
      jitterObj.push(val);
    }
    if(jitterObj.length == 3)
      jitterObj.splice(0,2) // remove first 2, after every 3 samples          
  }
  function processMos(type,val){
    // Ignore first 3 MOS score of a new call, since first 2-3 mos comes as fair
    var mosObj = that.storage[type];
    if(mosObj.length == 2){
      mosObj.push(val);
      // console.debug('processMos',mosObj);
      var totMosObj = mosObj.filter(function (item, pos){
        // filter if the mos score is less than 3.
        // https://www.voip-info.org/call-quality-metrics/
        return item < 3.5;
      });
      if(totMosObj.length >= 2){
        that.storage.warning[type] = true;
        Plivo.log.debug(type+" : getting low mos : ",that.str(mosObj));
        _emitter.call(that,'network','warning','low_mos', totMosObj[0], true, type);
      }else{
        that.storage.warning[type] ? (that.storage.warning[type]=false, _emitter.call(that,'network','warning','low_mos', 0, false, type)) : null;
      }
    }else{
      mosObj.push(val);
    }
    if(mosObj.length == 3)
      mosObj.splice(0,2) // remove first 2, after every 3 samples
  }
  function processPacketLoss(type, val){
    var val = Number(val);
    var plossObj = that.storage[type];
    if(plossObj.length == 2){ // Check at every 3 collection
      plossObj.push(val);
      // console.debug('processPacketLoss',plossObj);
      var totPlossObj = plossObj.filter(function (item, pos){
        if(that.storage.audioCodec == "opus"){
          return item >= 0.10; // greater than 10%
        }else{
          return item >= 0.02; // greater than 2%
        }
      });
      if(totPlossObj.length >= 2){
        var plossSum = totPlossObj.reduce(function (sum, val){
          return sum + val;
        });
        var plossAvg = plossSum / totPlossObj.length;
        plossAvg = plossAvg.toFixed(3);
        that.storage.warning[type] = true;
        Plivo.log.debug(type+' : ploss score value is high :',that.str(totPlossObj));
        _emitter.call(that,'network','warning','high_packetloss', plossAvg, true, type);
      }else{
        that.storage.warning[type] ? (that.storage.warning[type]=false,_emitter.call(that,'network','warning','high_packetloss', 0, false, type)): null;
      }
    }else{
      plossObj.push(val);
    }
    if(plossObj.length == 3)
      plossObj.splice(0,2) // remove first 2, after every 3 samples
  }

  // actual handler
  if(!that.storage || !that.storage.startAnalysis){  // start only if startAnalysis becomes true
    return;
  }

  if (streams.local) {
    processRtt("rtt", streams.local.rtt);
    processJitter('jitterLocalMeasures', streams.local.jitter);
    processMos('mosRemoteMeasures', streams.local.mos);
    processPacketLoss('packetLossLocalMeasures', streams.local.fractionLoss);
    processAudioLevel("local_audio", streams.local.audioLevel);
  }
  if (streams.remote) {
    processJitter('jitterRemoteMeasures', streams.remote.jitter);
    processPacketLoss('packetLossRemoteMeasures', streams.remote.fractionLoss);
    processAudioLevel("remote_audio", streams.remote.audioLevel);
  }
}
module.exports = processSteams;


/***/ }),

/***/ "./lib/util/codecPreference.js":
/*!*************************************!*\
  !*** ./lib/util/codecPreference.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var codecPref = function(prefCodecs, sdp){

  function getPayloadValue(codec, sdp){
    var reg = new RegExp( 'a=rtpmap:.* '+codec+'(.*)', 'ig');
    if(sdp.match(reg)){
      return sdp.match(reg)[0].split(' ')[0].match(/\d+/);
    }else{
      return false;
    }
  }

  function clearCodec(payloadVal, sdp){
    var reg;
    payloadVal.forEach(function(codec){
      var val = getPayloadValue(codec,sdp);
      // clear in rtpmap
      reg = new RegExp ('\na=rtpmap:.*'+codec+'\/.*','ig');
      sdp = sdp.replace(reg,'');
      // clear in fmtp
      reg = new RegExp ('\na=fmtp:'+val+' (.*)','ig');
      sdp = sdp.replace(reg,'');
      // clear in rtcp
      reg = new RegExp ('\na=rtcp-fb:'+val+' (.*)','ig');
      sdp = sdp.replace(reg,'');
    });
    return sdp;
  }
  
  if(prefCodecs.length > 0){
    var totalList = ['OPUS','G722','PCMA','PCMU','ISAC','CN'];
    var codecListName = prefCodecs;
    var codecListVal = "";
    codecListName.forEach(function(codec){
      var index = totalList.indexOf(codec);
      if(index > -1){
        totalList.splice(index, 1);
      }
      var codecPayloadVal = getPayloadValue(codec,sdp);
      if(codecPayloadVal)
        codecListVal += codecPayloadVal + " ";
    });
    codecListVal = codecListVal.slice(0,-1);
    sdp = sdp.replace(sdp.match(/m=audio .*[a-z] (.*)/i)[1],codecListVal);
    sdp = clearCodec(totalList,sdp);
  }
  return sdp;
}

module.exports = codecPref

/***/ }),

/***/ "./lib/util/constants.js":
/*!*******************************!*\
  !*** ./lib/util/constants.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

let urlsconstants = {};
if (true) {
  urlsconstants = __webpack_require__(/*! ./constants.prod.js */ "./lib/util/constants.prod.js")
}else{}

module.exports = urlsconstants;

//webrtc settings
module.exports.DEFAULT_LOG_LEVEL = 'INFO';
module.exports.NUMBER_OF_SIMULTANEOUS_INCOMING_CALLS_ALLOWED = 50;

module.exports.REGISTER_EXPIRES_SECONDS = 120;
module.exports.SESSION_TIMERS_EXPIRES = 300;
module.exports.WS_RECOVERY_MAX_INTERVAL = 20;
module.exports.WS_RECOVERY_MIN_INTERVAL = 2;
module.exports.DEFAULT_CODECS = ['OPUS','PCMU'];
module.exports.STUN_SERVERS = ['stun:stun.l.google.com:19302','stun:stun1.l.google.com:19302'];
module.exports.LIB_NAME = 'plivojs';
module.exports.DEBUG_MODES = ['INFO','DEBUG','WARN','ERROR','ALL','ALL-PLAIN','OFF'];
module.exports.REGION = ["usa_west","usa_east","australia","europe","asia","south_america"];
//document settings
module.exports.RINGTONE_URL = 'https://cdn.plivo.com/sdk/browser/audio/us-ring.mp3';
// same url with a parameter for workaround the chrome bug 
// https://bugs.chromium.org/p/chromium/issues/detail?id=770694
module.exports.RINGBACK_URL = 'https://cdn.plivo.com/sdk/browser/audio/us-ring.mp3?v=ringback';
module.exports.CONNECT_TONE_URL = 'https://cdn.plivo.com/sdk/browser/audio/connect-tone.mp3';
module.exports.SELF_VIEW_ID = 'plivo_webrtc_selfview';
module.exports.REMOTE_VIEW_ID = 'plivo_webrtc_remoteview'; // depreciate it. Since remote view is needed only for Video 
module.exports.RINGBACK_ELEMENT_ID = 'plivo_ringbacktone';
module.exports.RINGTONE_ELEMENT_ID = 'plivo_ringtone';
module.exports.CONNECT_TONE_ELEMENT_ID = 'plivo_connect_tone';
module.exports.DTMF_TONE_FLAG = {
  '0': true,
  '1': true,
  '2': true,
  '3': true,
  '4': true,
  '5': true,
  '6': true,
  '7': true,
  '8': true,
  '9': true,
  '#': true,
  '*': true
};

module.exports.DEFAULT_COMMENTS = {
  'AUDIO_LAG':'audio_lag', 
  'BROKEN_AUDIO':'broken_audio', 
  'CALL_DROPPED':'call_dropped', 
  'CALLERID_ISSUES':'callerid_issue',
  'DIGITS_NOT_CAPTURED':'digits_not_captured', 
  'ECHO':'echo',
  'HIGH_CONNECT_TIME':'high_connect_time',
  'LOW_AUDIO_LEVEL':'low_audio_level',
  'ONE_WAY_AUDIO':'one_way_audio', 
  'OTHERS':'others',
  'ROBOTIC_AUDIO':'robotic_audio'
};

module.exports.GETSTATS_INTERVAL = 5000;
module.exports.GETSTATS_HEARTBEATINTERVAL = 100000;
module.exports.STATSSOCKET_RECONNECT_SEC = 10000;
module.exports.STATS_SAMPLE_QUEUE = 1;
module.exports.SIP_ERROR_CODE = {
    404: "User was not reachable",
    486: "User was busy",
    408: "No response from user",
    480: "No response from user",
    603: "Call rejected by user",
    484: "Invalid destination format",
    503: "Network issue while connecting the call",
    501: "Incompatible client configuration",
    487: "Call cancelled by caller",
    400: "Bad request - Parameters not valid",
    401: "Call authorization failed",
    403: "Call authorization failed",
    404: "Call authorization failed",
    405: "Call authorization failed",
    483: "Too many hops detected for call connection",
    500: "Internal Server Error",
    502: "There is an issue with the Carrier Gateway",
};
var DEFAULT_OFFER_OPTIONS = {};
if (typeof navigator !== 'undefined' && navigator.mozGetUserMedia) {
  DEFAULT_OFFER_OPTIONS = {
    offerToReceiveAudio: true
  };
} else {
  DEFAULT_OFFER_OPTIONS.mandatory = {
    OfferToReceiveAudio: true
  };
}
module.exports.DEFAULT_OFFER_OPTIONS = DEFAULT_OFFER_OPTIONS;
module.exports.STATS_SOURCE = 'BrowserSDK';
module.exports.STATS_VERSION = 'v1';


/***/ }),

/***/ "./lib/util/constants.prod.js":
/*!************************************!*\
  !*** ./lib/util/constants.prod.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports.DOMAIN = 'phone.plivo.com'; 
module.exports.WS_SERVERS = 'wss://phone.plivo.com:5063';
module.exports.S3BUCKET_API_URL = 'https://stats.plivo.com/v1/browser/bucketurl/';
module.exports.SDKVERSION_API_URL = 'https://stats.plivo.com/v1/browser/websdkversion/';
module.exports.STATSSOCKET_URL = "wss://insights.plivo.com/ws";
module.exports.STATS_API_URL = 'https://stats.plivo.com/v1/browser/validate/';


/***/ }),

/***/ "./lib/util/headers.js":
/*!*****************************!*\
  !*** ./lib/util/headers.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var checkExtraHeaderKey = function (key) {
  //key started by X-Ph-
  if (key.substr(0, 5) != "X-Ph-" && key.substr(0, 5) != "X-PH-") {
    return false;
  }

  //key only contain [A-Z], [a-z] and [0-9], max length = 24
  //19 = 24 - 5
  var keyRegex = /^([a-z0-9A-Z\-]){1,19}$/; //- added to Customer headers key on 11th Oct as per close.io request
  return keyRegex.test(key.substr(5)) !== false;
};

var checkExtraHeaderVal = function (value) {
  //value only contain [A-Z], [a-z], [0-9] and '%', max length = 48
  var valRegex = /^([a-z0-9A-Z_\-\+\(\)%]){1,120}$/; //+-_() added to Customer headers on 13th April as per close.io request
  return valRegex.test(value) !== false;
};

var receiveExtraHeader = function(request, headers) {
  var cleanExtraHeaders = {};
  for (var key in headers) {
    var val = request.getHeader(key);
    if (checkExtraHeaderKey(key) && checkExtraHeaderVal(val)) {
      cleanExtraHeaders[key] = val;
    }
  }

  return cleanExtraHeaders;
};

module.exports.checkExtraHeaderKey = checkExtraHeaderKey;
module.exports.checkExtraHeaderVal = checkExtraHeaderVal;
module.exports.receiveExtraHeader = receiveExtraHeader;


/***/ }),

/***/ "./lib/util/logger.js":
/*!****************************!*\
  !*** ./lib/util/logger.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var consoleLogsArr=[];

var logger = function (options) {
	options? options : (options = {});
	var allowedMethods = ['INFO','DEBUG','WARN','ERROR','ALL','OFF']
		,logMethod = options.logMethod || "INFO"
		,enableDate = options.enableDate || false
		,loggingName = options.loggingName || "";
	var localStorage = (typeof chrome != 'undefined' && chrome.storage) ? chrome.storage.local : window.localStorage;
	var methodsOrder = ['ERROR','WARN','INFO','DEBUG','ALL'];		
	var logit = function(){
		function logging(){
			let date = new Date();
			let msdate = "";
			if(enableDate) 
				msdate = "["+ (date).toISOString().substring(0, 10)+" "+date.toString().split(" ")[4]+"."+date.getMilliseconds()+"]";
			let premsg = msdate+ " ["+filter+"] "+loggingName+" :: ";

			if(consoleLogsArr.length >= 900) consoleLogsArr.shift(); // lines uptill which sdk will store logs in memory
			consoleLogsArr.push(premsg + arg1 + arg2 + " \n");
            if(methodsOrder.indexOf(filter) > methodsOrder.indexOf(logMethod)) {
                return;
            }

			switch (filter){
				case "OFF":
					// do nothing
				break;
				case "INFO":
					console.info(premsg, arg1 , arg2);
				break;
				case "DEBUG":
					console.debug(premsg, arg1 , arg2);
				break;
				case "WARN":
					console.warn(premsg, arg1 , arg2);
				break;
				case "ERROR":
					console.error(premsg, arg1 , arg2);
				break;
				default :
					console.log(premsg, arg1 , arg2);
			}
		}
		var filter = arguments[0].toUpperCase() // will give info/debug/warn/error etc
			,args = arguments[1]
			,arg1 = args[0] || ""
			,arg2 = args[1] || "";

		if( ['INFO', 'DEBUG', 'WARN', 'ERROR', 'ALL', 'OFF'].indexOf(logMethod) != -1){
		    logging();
		}else if(logMethod == filter){
		    logging();
		}else{
			return;
		}
	}
	return {
		info: function(){
			logit('info',arguments);
		},
		debug: function(){
			logit('debug',arguments);
		},
		warn: function(){
			logit('warn',arguments);
		},
		error: function(){
			logit('error',arguments);
		},
		setLevel: function(method){
			method = method.toUpperCase();
			if(allowedMethods.indexOf(method) != -1){ // in allowed methods?
				logMethod = method;
				if(['DEBUG','ALL'].indexOf(method) == -1){ // if not debug/all!
					localStorage.debug="";
				}
				return 'logLevel is now : '+logMethod;
			}else{ 
				return 'only : '+allowedMethods.toString() + ' are allowed in run time!'
			}
		},
		level: function(){
			return logMethod;
		},
		consolelogs: function(){
			return consoleLogsArr;
		}
	}
}

// Initialise log in off mode and later setLevel
module.exports = new logger({ enableDate: true, loggingName: 'PlivoSDK', logMethod: "DEBUG" });;




/***/ }),

/***/ "./lib/util/plivostats.js":
/*!********************************!*\
  !*** ./lib/util/plivostats.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/***
Copyright (c) 2013-2018, callstats.io
All rights reserved.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
***/

/*! callstats  version = 3.53.1 2018-08-07 11-35-59 */

!function() {
    function a(b, c, d) {
        function e(g, h) {
            if (!c[g]) {
                if (!b[g]) {
                    var i = "function" == typeof require && require;
                    if (!h && i) return require(g, !0);
                    if (f) return f(g, !0);
                    var j = new Error("Cannot find module '" + g + "'");
                    throw j.code = "MODULE_NOT_FOUND", j;
                }
                var k = c[g] = {
                    exports: {}
                };
                b[g][0].call(k.exports, function(a) {
                    return e(b[g][1][a] || a);
                }, k, k.exports, a, b, c, d);
            }
            return c[g].exports;
        }
        for (var f = "function" == typeof require && require, g = 0; g < d.length; g++) e(d[g]);
        return e;
    }
    return a;
}()({
    1: [ function(a, b, c) {
        (function(a, d, e) {
            !function(a) {
                if ("object" == typeof c && void 0 !== b) b.exports = a(); else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else { var e; }
            }(function() {
                var b, c, f;
                return function a(b, c, d) {
                    function e(g, h) {
                        if (!c[g]) {
                            if (!b[g]) {
                                var i = "function" == typeof _dereq_ && _dereq_;
                                if (!h && i) return i(g, !0);
                                if (f) return f(g, !0);
                                var j = new Error("Cannot find module '" + g + "'");
                                throw j.code = "MODULE_NOT_FOUND", j;
                            }
                            var k = c[g] = {
                                exports: {}
                            };
                            b[g][0].call(k.exports, function(a) {
                                var c = b[g][1][a];
                                return e(c || a);
                            }, k, k.exports, a, b, c, d);
                        }
                        return c[g].exports;
                    }
                    for (var f = "function" == typeof _dereq_ && _dereq_, g = 0; g < d.length; g++) e(d[g]);
                    return e;
                }({
                    1: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(a) {
                            function b(a) {
                                var b = new c(a), d = b.promise();
                                return b.setHowMany(1), b.setUnwrap(), b.init(), d;
                            }
                            var c = a._SomePromiseArray;
                            a.any = function(a) {
                                return b(a);
                            }, a.prototype.any = function() {
                                return b(this);
                            };
                        };
                    }, {} ],
                    2: [ function(b, c, d) {
                        "use strict";
                        function e() {
                            this._customScheduler = !1, this._isTickUsed = !1, this._lateQueue = new k(16), 
                            this._normalQueue = new k(16), this._haveDrainedQueues = !1, this._trampolineEnabled = !0;
                            var a = this;
                            this.drainQueues = function() {
                                a._drainQueues();
                            }, this._schedule = j;
                        }
                        function f(a, b, c) {
                            this._lateQueue.push(a, b, c), this._queueTick();
                        }
                        function g(a, b, c) {
                            this._normalQueue.push(a, b, c), this._queueTick();
                        }
                        function h(a) {
                            this._normalQueue._pushOne(a), this._queueTick();
                        }
                        var i;
                        try {
                            throw new Error();
                        } catch (a) {
                            i = a;
                        }
                        var j = b("./schedule"), k = b("./queue"), l = b("./util");
                        e.prototype.setScheduler = function(a) {
                            var b = this._schedule;
                            return this._schedule = a, this._customScheduler = !0, b;
                        }, e.prototype.hasCustomScheduler = function() {
                            return this._customScheduler;
                        }, e.prototype.enableTrampoline = function() {
                            this._trampolineEnabled = !0;
                        }, e.prototype.disableTrampolineIfNecessary = function() {
                            l.hasDevTools && (this._trampolineEnabled = !1);
                        }, e.prototype.haveItemsQueued = function() {
                            return this._isTickUsed || this._haveDrainedQueues;
                        }, e.prototype.fatalError = function(b, c) {
                            c ? (a.stderr.write("Fatal " + (b instanceof Error ? b.stack : b) + "\n"), a.exit(2)) : this.throwLater(b);
                        }, e.prototype.throwLater = function(a, b) {
                            if (1 === arguments.length && (b = a, a = function() {
                                throw b;
                            }), "undefined" != typeof setTimeout) setTimeout(function() {
                                a(b);
                            }, 0); else try {
                                this._schedule(function() {
                                    a(b);
                                });
                            } catch (a) {
                                throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
                            }
                        }, l.hasDevTools ? (e.prototype.invokeLater = function(a, b, c) {
                            this._trampolineEnabled ? f.call(this, a, b, c) : this._schedule(function() {
                                setTimeout(function() {
                                    a.call(b, c);
                                }, 100);
                            });
                        }, e.prototype.invoke = function(a, b, c) {
                            this._trampolineEnabled ? g.call(this, a, b, c) : this._schedule(function() {
                                a.call(b, c);
                            });
                        }, e.prototype.settlePromises = function(a) {
                            this._trampolineEnabled ? h.call(this, a) : this._schedule(function() {
                                a._settlePromises();
                            });
                        }) : (e.prototype.invokeLater = f, e.prototype.invoke = g, e.prototype.settlePromises = h), 
                        e.prototype._drainQueue = function(a) {
                            for (;a.length() > 0; ) {
                                var b = a.shift();
                                if ("function" == typeof b) {
                                    var c = a.shift(), d = a.shift();
                                    b.call(c, d);
                                } else b._settlePromises();
                            }
                        }, e.prototype._drainQueues = function() {
                            this._drainQueue(this._normalQueue), this._reset(), this._haveDrainedQueues = !0, 
                            this._drainQueue(this._lateQueue);
                        }, e.prototype._queueTick = function() {
                            this._isTickUsed || (this._isTickUsed = !0, this._schedule(this.drainQueues));
                        }, e.prototype._reset = function() {
                            this._isTickUsed = !1;
                        }, c.exports = e, c.exports.firstLineError = i;
                    }, {
                        "./queue": 26,
                        "./schedule": 29,
                        "./util": 36
                    } ],
                    3: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(a, b, c, d) {
                            var e = !1, f = function(a, b) {
                                this._reject(b);
                            }, g = function(a, b) {
                                b.promiseRejectionQueued = !0, b.bindingPromise._then(f, f, null, this, a);
                            }, h = function(a, b) {
                                0 == (50397184 & this._bitField) && this._resolveCallback(b.target);
                            }, i = function(a, b) {
                                b.promiseRejectionQueued || this._reject(a);
                            };
                            a.prototype.bind = function(f) {
                                e || (e = !0, a.prototype._propagateFrom = d.propagateFromFunction(), a.prototype._boundValue = d.boundValueFunction());
                                var j = c(f), k = new a(b);
                                k._propagateFrom(this, 1);
                                var l = this._target();
                                if (k._setBoundTo(j), j instanceof a) {
                                    var m = {
                                        promiseRejectionQueued: !1,
                                        promise: k,
                                        target: l,
                                        bindingPromise: j
                                    };
                                    l._then(b, g, void 0, k, m), j._then(h, i, void 0, k, m), k._setOnCancel(j);
                                } else k._resolveCallback(l);
                                return k;
                            }, a.prototype._setBoundTo = function(a) {
                                void 0 !== a ? (this._bitField = 2097152 | this._bitField, this._boundTo = a) : this._bitField = -2097153 & this._bitField;
                            }, a.prototype._isBound = function() {
                                return 2097152 == (2097152 & this._bitField);
                            }, a.bind = function(b, c) {
                                return a.resolve(c).bind(b);
                            };
                        };
                    }, {} ],
                    4: [ function(a, b, c) {
                        "use strict";
                        function d() {
                            try {
                                Promise === f && (Promise = e);
                            } catch (a) {}
                            return f;
                        }
                        var e;
                        "undefined" != typeof Promise && (e = Promise);
                        var f = a("./promise")();
                        f.noConflict = d, b.exports = f;
                    }, {
                        "./promise": 22
                    } ],
                    5: [ function(a, b, c) {
                        "use strict";
                        var d = Object.create;
                        if (d) {
                            var e = d(null), f = d(null);
                            e[" size"] = f[" size"] = 0;
                        }
                        b.exports = function(b) {
                            function c(a, c) {
                                var d;
                                if (null != a && (d = a[c]), "function" != typeof d) {
                                    var e = "Object " + h.classString(a) + " has no method '" + h.toString(c) + "'";
                                    throw new b.TypeError(e);
                                }
                                return d;
                            }
                            function d(a) {
                                return c(a, this.pop()).apply(a, this);
                            }
                            function e(a) {
                                return a[this];
                            }
                            function f(a) {
                                var b = +this;
                                return b < 0 && (b = Math.max(0, b + a.length)), a[b];
                            }
                            var g, h = a("./util"), i = h.canEvaluate;
                            h.isIdentifier;
                            b.prototype.call = function(a) {
                                var b = [].slice.call(arguments, 1);
                                return b.push(a), this._then(d, void 0, void 0, b, void 0);
                            }, b.prototype.get = function(a) {
                                var b, c = "number" == typeof a;
                                if (c) b = f; else if (i) {
                                    var d = g(a);
                                    b = null !== d ? d : e;
                                } else b = e;
                                return this._then(b, void 0, void 0, a, void 0);
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    6: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e) {
                            var f = a("./util"), g = f.tryCatch, h = f.errorObj, i = b._async;
                            b.prototype.break = b.prototype.cancel = function() {
                                if (!e.cancellation()) return this._warn("cancellation is disabled");
                                for (var a = this, b = a; a._isCancellable(); ) {
                                    if (!a._cancelBy(b)) {
                                        b._isFollowing() ? b._followee().cancel() : b._cancelBranched();
                                        break;
                                    }
                                    var c = a._cancellationParent;
                                    if (null == c || !c._isCancellable()) {
                                        a._isFollowing() ? a._followee().cancel() : a._cancelBranched();
                                        break;
                                    }
                                    a._isFollowing() && a._followee().cancel(), a._setWillBeCancelled(), b = a, a = c;
                                }
                            }, b.prototype._branchHasCancelled = function() {
                                this._branchesRemainingToCancel--;
                            }, b.prototype._enoughBranchesHaveCancelled = function() {
                                return void 0 === this._branchesRemainingToCancel || this._branchesRemainingToCancel <= 0;
                            }, b.prototype._cancelBy = function(a) {
                                return a === this ? (this._branchesRemainingToCancel = 0, this._invokeOnCancel(), 
                                !0) : (this._branchHasCancelled(), !!this._enoughBranchesHaveCancelled() && (this._invokeOnCancel(), 
                                !0));
                            }, b.prototype._cancelBranched = function() {
                                this._enoughBranchesHaveCancelled() && this._cancel();
                            }, b.prototype._cancel = function() {
                                this._isCancellable() && (this._setCancelled(), i.invoke(this._cancelPromises, this, void 0));
                            }, b.prototype._cancelPromises = function() {
                                this._length() > 0 && this._settlePromises();
                            }, b.prototype._unsetOnCancel = function() {
                                this._onCancelField = void 0;
                            }, b.prototype._isCancellable = function() {
                                return this.isPending() && !this._isCancelled();
                            }, b.prototype.isCancellable = function() {
                                return this.isPending() && !this.isCancelled();
                            }, b.prototype._doInvokeOnCancel = function(a, b) {
                                if (f.isArray(a)) for (var c = 0; c < a.length; ++c) this._doInvokeOnCancel(a[c], b); else if (void 0 !== a) if ("function" == typeof a) {
                                    if (!b) {
                                        var d = g(a).call(this._boundValue());
                                        d === h && (this._attachExtraTrace(d.e), i.throwLater(d.e));
                                    }
                                } else a._resultCancelled(this);
                            }, b.prototype._invokeOnCancel = function() {
                                var a = this._onCancel();
                                this._unsetOnCancel(), i.invoke(this._doInvokeOnCancel, this, a);
                            }, b.prototype._invokeInternalOnCancel = function() {
                                this._isCancellable() && (this._doInvokeOnCancel(this._onCancel(), !0), this._unsetOnCancel());
                            }, b.prototype._resultCancelled = function() {
                                this.cancel();
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    7: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b) {
                            function c(a, c, h) {
                                return function(i) {
                                    var j = h._boundValue();
                                    a: for (var k = 0; k < a.length; ++k) {
                                        var l = a[k];
                                        if (l === Error || null != l && l.prototype instanceof Error) {
                                            if (i instanceof l) return f(c).call(j, i);
                                        } else if ("function" == typeof l) {
                                            var m = f(l).call(j, i);
                                            if (m === g) return m;
                                            if (m) return f(c).call(j, i);
                                        } else if (d.isObject(i)) {
                                            for (var n = e(l), o = 0; o < n.length; ++o) {
                                                var p = n[o];
                                                if (l[p] != i[p]) continue a;
                                            }
                                            return f(c).call(j, i);
                                        }
                                    }
                                    return b;
                                };
                            }
                            var d = a("./util"), e = a("./es5").keys, f = d.tryCatch, g = d.errorObj;
                            return c;
                        };
                    }, {
                        "./es5": 13,
                        "./util": 36
                    } ],
                    8: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(a) {
                            function b() {
                                this._trace = new b.CapturedTrace(d());
                            }
                            function c() {
                                if (e) return new b();
                            }
                            function d() {
                                var a = f.length - 1;
                                if (a >= 0) return f[a];
                            }
                            var e = !1, f = [];
                            return a.prototype._promiseCreated = function() {}, a.prototype._pushContext = function() {}, 
                            a.prototype._popContext = function() {
                                return null;
                            }, a._peekContext = a.prototype._peekContext = function() {}, b.prototype._pushContext = function() {
                                void 0 !== this._trace && (this._trace._promiseCreated = null, f.push(this._trace));
                            }, b.prototype._popContext = function() {
                                if (void 0 !== this._trace) {
                                    var a = f.pop(), b = a._promiseCreated;
                                    return a._promiseCreated = null, b;
                                }
                                return null;
                            }, b.CapturedTrace = null, b.create = c, b.deactivateLongStackTraces = function() {}, 
                            b.activateLongStackTraces = function() {
                                var c = a.prototype._pushContext, f = a.prototype._popContext, g = a._peekContext, h = a.prototype._peekContext, i = a.prototype._promiseCreated;
                                b.deactivateLongStackTraces = function() {
                                    a.prototype._pushContext = c, a.prototype._popContext = f, a._peekContext = g, a.prototype._peekContext = h, 
                                    a.prototype._promiseCreated = i, e = !1;
                                }, e = !0, a.prototype._pushContext = b.prototype._pushContext, a.prototype._popContext = b.prototype._popContext, 
                                a._peekContext = a.prototype._peekContext = d, a.prototype._promiseCreated = function() {
                                    var a = this._peekContext();
                                    a && null == a._promiseCreated && (a._promiseCreated = this);
                                };
                            }, b;
                        };
                    }, {} ],
                    9: [ function(b, c, d) {
                        "use strict";
                        c.exports = function(c, d) {
                            function e(a, b) {
                                return {
                                    promise: b
                                };
                            }
                            function f() {
                                return !1;
                            }
                            function g(a, b, c) {
                                var d = this;
                                try {
                                    a(b, c, function(a) {
                                        if ("function" != typeof a) throw new TypeError("onCancel must be a function, got: " + N.toString(a));
                                        d._attachCancellationCallback(a);
                                    });
                                } catch (a) {
                                    return a;
                                }
                            }
                            function h(a) {
                                if (!this._isCancellable()) return this;
                                var b = this._onCancel();
                                void 0 !== b ? N.isArray(b) ? b.push(a) : this._setOnCancel([ b, a ]) : this._setOnCancel(a);
                            }
                            function i() {
                                return this._onCancelField;
                            }
                            function j(a) {
                                this._onCancelField = a;
                            }
                            function k() {
                                this._cancellationParent = void 0, this._onCancelField = void 0;
                            }
                            function l(a, b) {
                                if (0 != (1 & b)) {
                                    this._cancellationParent = a;
                                    var c = a._branchesRemainingToCancel;
                                    void 0 === c && (c = 0), a._branchesRemainingToCancel = c + 1;
                                }
                                0 != (2 & b) && a._isBound() && this._setBoundTo(a._boundTo);
                            }
                            function m(a, b) {
                                0 != (2 & b) && a._isBound() && this._setBoundTo(a._boundTo);
                            }
                            function n() {
                                var a = this._boundTo;
                                return void 0 !== a && a instanceof c ? a.isFulfilled() ? a.value() : void 0 : a;
                            }
                            function o() {
                                this._trace = new G(this._peekContext());
                            }
                            function p(a, b) {
                                if (O(a)) {
                                    var c = this._trace;
                                    if (void 0 !== c && b && (c = c._parent), void 0 !== c) c.attachExtraTrace(a); else if (!a.__stackCleaned__) {
                                        var d = y(a);
                                        N.notEnumerableProp(a, "stack", d.message + "\n" + d.stack.join("\n")), N.notEnumerableProp(a, "__stackCleaned__", !0);
                                    }
                                }
                            }
                            function q(a, b, c, d, e) {
                                if (void 0 === a && null !== b && Y) {
                                    if (void 0 !== e && e._returnedNonUndefined()) return;
                                    if (0 == (65535 & d._bitField)) return;
                                    c && (c += " ");
                                    var f = "", g = "";
                                    if (b._trace) {
                                        for (var h = b._trace.stack.split("\n"), i = w(h), j = i.length - 1; j >= 0; --j) {
                                            var k = i[j];
                                            if (!Q.test(k)) {
                                                var l = k.match(R);
                                                l && (f = "at " + l[1] + ":" + l[2] + ":" + l[3] + " ");
                                                break;
                                            }
                                        }
                                        if (i.length > 0) for (var m = i[0], j = 0; j < h.length; ++j) if (h[j] === m) {
                                            j > 0 && (g = "\n" + h[j - 1]);
                                            break;
                                        }
                                    }
                                    var n = "a promise was created in a " + c + "handler " + f + "but was not returned from it, see http://goo.gl/rRqMUw" + g;
                                    d._warn(n, !0, b);
                                }
                            }
                            function r(a, b) {
                                var c = a + " is deprecated and will be removed in a future version.";
                                return b && (c += " Use " + b + " instead."), s(c);
                            }
                            function s(a, b, d) {
                                if (ga.warnings) {
                                    var e, f = new M(a);
                                    if (b) d._attachExtraTrace(f); else if (ga.longStackTraces && (e = c._peekContext())) e.attachExtraTrace(f); else {
                                        var g = y(f);
                                        f.stack = g.message + "\n" + g.stack.join("\n");
                                    }
                                    ba("warning", f) || z(f, "", !0);
                                }
                            }
                            function t(a, b) {
                                for (var c = 0; c < b.length - 1; ++c) b[c].push("From previous event:"), b[c] = b[c].join("\n");
                                return c < b.length && (b[c] = b[c].join("\n")), a + "\n" + b.join("\n");
                            }
                            function u(a) {
                                for (var b = 0; b < a.length; ++b) (0 === a[b].length || b + 1 < a.length && a[b][0] === a[b + 1][0]) && (a.splice(b, 1), 
                                b--);
                            }
                            function v(a) {
                                for (var b = a[0], c = 1; c < a.length; ++c) {
                                    for (var d = a[c], e = b.length - 1, f = b[e], g = -1, h = d.length - 1; h >= 0; --h) if (d[h] === f) {
                                        g = h;
                                        break;
                                    }
                                    for (var h = g; h >= 0; --h) {
                                        var i = d[h];
                                        if (b[e] !== i) break;
                                        b.pop(), e--;
                                    }
                                    b = d;
                                }
                            }
                            function w(a) {
                                for (var b = [], c = 0; c < a.length; ++c) {
                                    var d = a[c], e = "    (No stack trace)" === d || S.test(d), f = e && da(d);
                                    e && !f && (U && " " !== d.charAt(0) && (d = "    " + d), b.push(d));
                                }
                                return b;
                            }
                            function x(a) {
                                for (var b = a.stack.replace(/\s+$/g, "").split("\n"), c = 0; c < b.length; ++c) {
                                    var d = b[c];
                                    if ("    (No stack trace)" === d || S.test(d)) break;
                                }
                                return c > 0 && "SyntaxError" != a.name && (b = b.slice(c)), b;
                            }
                            function y(a) {
                                var b = a.stack, c = a.toString();
                                return b = "string" == typeof b && b.length > 0 ? x(a) : [ "    (No stack trace)" ], 
                                {
                                    message: c,
                                    stack: "SyntaxError" == a.name ? b : w(b)
                                };
                            }
                            function z(a, b, c) {
                                if ("undefined" != typeof console) {
                                    var d;
                                    if (N.isObject(a)) {
                                        var e = a.stack;
                                        d = b + T(e, a);
                                    } else d = b + String(a);
                                    "function" == typeof J ? J(d, c) : "function" != typeof console.log && "object" != typeof console.log || console.log(d);
                                }
                            }
                            function A(a, b, c, d) {
                                var e = !1;
                                try {
                                    "function" == typeof b && (e = !0, "rejectionHandled" === a ? b(d) : b(c, d));
                                } catch (a) {
                                    L.throwLater(a);
                                }
                                "unhandledRejection" === a ? ba(a, c, d) || e || z(c, "Unhandled rejection ") : ba(a, d);
                            }
                            function B(a) {
                                var b;
                                if ("function" == typeof a) b = "[function " + (a.name || "anonymous") + "]"; else {
                                    b = a && "function" == typeof a.toString ? a.toString() : N.toString(a);
                                    if (/\[object [a-zA-Z0-9$_]+\]/.test(b)) try {
                                        b = JSON.stringify(a);
                                    } catch (a) {}
                                    0 === b.length && (b = "(empty array)");
                                }
                                return "(<" + C(b) + ">, no stack trace)";
                            }
                            function C(a) {
                                return a.length < 41 ? a : a.substr(0, 38) + "...";
                            }
                            function D() {
                                return "function" == typeof fa;
                            }
                            function E(a) {
                                var b = a.match(ea);
                                if (b) return {
                                    fileName: b[1],
                                    line: parseInt(b[2], 10)
                                };
                            }
                            function F(a, b) {
                                if (D()) {
                                    for (var c, d, e = a.stack.split("\n"), f = b.stack.split("\n"), g = -1, h = -1, i = 0; i < e.length; ++i) {
                                        var j = E(e[i]);
                                        if (j) {
                                            c = j.fileName, g = j.line;
                                            break;
                                        }
                                    }
                                    for (var i = 0; i < f.length; ++i) {
                                        var j = E(f[i]);
                                        if (j) {
                                            d = j.fileName, h = j.line;
                                            break;
                                        }
                                    }
                                    g < 0 || h < 0 || !c || !d || c !== d || g >= h || (da = function(a) {
                                        if (P.test(a)) return !0;
                                        var b = E(a);
                                        return !!(b && b.fileName === c && g <= b.line && b.line <= h);
                                    });
                                }
                            }
                            function G(a) {
                                this._parent = a, this._promisesCreated = 0;
                                var b = this._length = 1 + (void 0 === a ? 0 : a._length);
                                fa(this, G), b > 32 && this.uncycle();
                            }
                            var H, I, J, K = c._getDomain, L = c._async, M = b("./errors").Warning, N = b("./util"), O = N.canAttachTrace, P = /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/, Q = /\((?:timers\.js):\d+:\d+\)/, R = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/, S = null, T = null, U = !1, V = !(0 == N.env("BLUEBIRD_DEBUG")), W = !(0 == N.env("BLUEBIRD_WARNINGS") || !V && !N.env("BLUEBIRD_WARNINGS")), X = !(0 == N.env("BLUEBIRD_LONG_STACK_TRACES") || !V && !N.env("BLUEBIRD_LONG_STACK_TRACES")), Y = 0 != N.env("BLUEBIRD_W_FORGOTTEN_RETURN") && (W || !!N.env("BLUEBIRD_W_FORGOTTEN_RETURN"));
                            c.prototype.suppressUnhandledRejections = function() {
                                var a = this._target();
                                a._bitField = -1048577 & a._bitField | 524288;
                            }, c.prototype._ensurePossibleRejectionHandled = function() {
                                if (0 == (524288 & this._bitField)) {
                                    this._setRejectionIsUnhandled();
                                    var a = this;
                                    setTimeout(function() {
                                        a._notifyUnhandledRejection();
                                    }, 1);
                                }
                            }, c.prototype._notifyUnhandledRejectionIsHandled = function() {
                                A("rejectionHandled", H, void 0, this);
                            }, c.prototype._setReturnedNonUndefined = function() {
                                this._bitField = 268435456 | this._bitField;
                            }, c.prototype._returnedNonUndefined = function() {
                                return 0 != (268435456 & this._bitField);
                            }, c.prototype._notifyUnhandledRejection = function() {
                                if (this._isRejectionUnhandled()) {
                                    var a = this._settledValue();
                                    this._setUnhandledRejectionIsNotified(), A("unhandledRejection", I, a, this);
                                }
                            }, c.prototype._setUnhandledRejectionIsNotified = function() {
                                this._bitField = 262144 | this._bitField;
                            }, c.prototype._unsetUnhandledRejectionIsNotified = function() {
                                this._bitField = -262145 & this._bitField;
                            }, c.prototype._isUnhandledRejectionNotified = function() {
                                return (262144 & this._bitField) > 0;
                            }, c.prototype._setRejectionIsUnhandled = function() {
                                this._bitField = 1048576 | this._bitField;
                            }, c.prototype._unsetRejectionIsUnhandled = function() {
                                this._bitField = -1048577 & this._bitField, this._isUnhandledRejectionNotified() && (this._unsetUnhandledRejectionIsNotified(), 
                                this._notifyUnhandledRejectionIsHandled());
                            }, c.prototype._isRejectionUnhandled = function() {
                                return (1048576 & this._bitField) > 0;
                            }, c.prototype._warn = function(a, b, c) {
                                return s(a, b, c || this);
                            }, c.onPossiblyUnhandledRejection = function(a) {
                                var b = K();
                                I = "function" == typeof a ? null === b ? a : N.domainBind(b, a) : void 0;
                            }, c.onUnhandledRejectionHandled = function(a) {
                                var b = K();
                                H = "function" == typeof a ? null === b ? a : N.domainBind(b, a) : void 0;
                            };
                            var Z = function() {};
                            c.longStackTraces = function() {
                                if (L.haveItemsQueued() && !ga.longStackTraces) throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
                                if (!ga.longStackTraces && D()) {
                                    var a = c.prototype._captureStackTrace, b = c.prototype._attachExtraTrace;
                                    ga.longStackTraces = !0, Z = function() {
                                        if (L.haveItemsQueued() && !ga.longStackTraces) throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");
                                        c.prototype._captureStackTrace = a, c.prototype._attachExtraTrace = b, d.deactivateLongStackTraces(), 
                                        L.enableTrampoline(), ga.longStackTraces = !1;
                                    }, c.prototype._captureStackTrace = o, c.prototype._attachExtraTrace = p, d.activateLongStackTraces(), 
                                    L.disableTrampolineIfNecessary();
                                }
                            }, c.hasLongStackTraces = function() {
                                return ga.longStackTraces && D();
                            };
                            var $ = function() {
                                try {
                                    if ("function" == typeof CustomEvent) {
                                        var a = new CustomEvent("CustomEvent");
                                        return N.global.dispatchEvent(a), function(a, b) {
                                            var c = new CustomEvent(a.toLowerCase(), {
                                                detail: b,
                                                cancelable: !0
                                            });
                                            return !N.global.dispatchEvent(c);
                                        };
                                    }
                                    if ("function" == typeof Event) {
                                        var a = new Event("CustomEvent");
                                        return N.global.dispatchEvent(a), function(a, b) {
                                            var c = new Event(a.toLowerCase(), {
                                                cancelable: !0
                                            });
                                            return c.detail = b, !N.global.dispatchEvent(c);
                                        };
                                    }
                                    var a = document.createEvent("CustomEvent");
                                    return a.initCustomEvent("testingtheevent", !1, !0, {}), N.global.dispatchEvent(a), 
                                    function(a, b) {
                                        var c = document.createEvent("CustomEvent");
                                        return c.initCustomEvent(a.toLowerCase(), !1, !0, b), !N.global.dispatchEvent(c);
                                    };
                                } catch (a) {}
                                return function() {
                                    return !1;
                                };
                            }(), _ = function() {
                                return N.isNode ? function() {
                                    return a.emit.apply(a, arguments);
                                } : N.global ? function(a) {
                                    var b = "on" + a.toLowerCase(), c = N.global[b];
                                    return !!c && (c.apply(N.global, [].slice.call(arguments, 1)), !0);
                                } : function() {
                                    return !1;
                                };
                            }(), aa = {
                                promiseCreated: e,
                                promiseFulfilled: e,
                                promiseRejected: e,
                                promiseResolved: e,
                                promiseCancelled: e,
                                promiseChained: function(a, b, c) {
                                    return {
                                        promise: b,
                                        child: c
                                    };
                                },
                                warning: function(a, b) {
                                    return {
                                        warning: b
                                    };
                                },
                                unhandledRejection: function(a, b, c) {
                                    return {
                                        reason: b,
                                        promise: c
                                    };
                                },
                                rejectionHandled: e
                            }, ba = function(a) {
                                var b = !1;
                                try {
                                    b = _.apply(null, arguments);
                                } catch (a) {
                                    L.throwLater(a), b = !0;
                                }
                                var c = !1;
                                try {
                                    c = $(a, aa[a].apply(null, arguments));
                                } catch (a) {
                                    L.throwLater(a), c = !0;
                                }
                                return c || b;
                            };
                            c.config = function(a) {
                                if (a = Object(a), "longStackTraces" in a && (a.longStackTraces ? c.longStackTraces() : !a.longStackTraces && c.hasLongStackTraces() && Z()), 
                                "warnings" in a) {
                                    var b = a.warnings;
                                    ga.warnings = !!b, Y = ga.warnings, N.isObject(b) && "wForgottenReturn" in b && (Y = !!b.wForgottenReturn);
                                }
                                if ("cancellation" in a && a.cancellation && !ga.cancellation) {
                                    if (L.haveItemsQueued()) throw new Error("cannot enable cancellation after promises are in use");
                                    c.prototype._clearCancellationData = k, c.prototype._propagateFrom = l, c.prototype._onCancel = i, 
                                    c.prototype._setOnCancel = j, c.prototype._attachCancellationCallback = h, c.prototype._execute = g, 
                                    ca = l, ga.cancellation = !0;
                                }
                                return "monitoring" in a && (a.monitoring && !ga.monitoring ? (ga.monitoring = !0, 
                                c.prototype._fireEvent = ba) : !a.monitoring && ga.monitoring && (ga.monitoring = !1, 
                                c.prototype._fireEvent = f)), c;
                            }, c.prototype._fireEvent = f, c.prototype._execute = function(a, b, c) {
                                try {
                                    a(b, c);
                                } catch (a) {
                                    return a;
                                }
                            }, c.prototype._onCancel = function() {}, c.prototype._setOnCancel = function(a) {}, 
                            c.prototype._attachCancellationCallback = function(a) {}, c.prototype._captureStackTrace = function() {}, 
                            c.prototype._attachExtraTrace = function() {}, c.prototype._clearCancellationData = function() {}, 
                            c.prototype._propagateFrom = function(a, b) {};
                            var ca = m, da = function() {
                                return !1;
                            }, ea = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
                            N.inherits(G, Error), d.CapturedTrace = G, G.prototype.uncycle = function() {
                                var a = this._length;
                                if (!(a < 2)) {
                                    for (var b = [], c = {}, d = 0, e = this; void 0 !== e; ++d) b.push(e), e = e._parent;
                                    a = this._length = d;
                                    for (var d = a - 1; d >= 0; --d) {
                                        var f = b[d].stack;
                                        void 0 === c[f] && (c[f] = d);
                                    }
                                    for (var d = 0; d < a; ++d) {
                                        var g = b[d].stack, h = c[g];
                                        if (void 0 !== h && h !== d) {
                                            h > 0 && (b[h - 1]._parent = void 0, b[h - 1]._length = 1), b[d]._parent = void 0, 
                                            b[d]._length = 1;
                                            var i = d > 0 ? b[d - 1] : this;
                                            h < a - 1 ? (i._parent = b[h + 1], i._parent.uncycle(), i._length = i._parent._length + 1) : (i._parent = void 0, 
                                            i._length = 1);
                                            for (var j = i._length + 1, k = d - 2; k >= 0; --k) b[k]._length = j, j++;
                                            return;
                                        }
                                    }
                                }
                            }, G.prototype.attachExtraTrace = function(a) {
                                if (!a.__stackCleaned__) {
                                    this.uncycle();
                                    for (var b = y(a), c = b.message, d = [ b.stack ], e = this; void 0 !== e; ) d.push(w(e.stack.split("\n"))), 
                                    e = e._parent;
                                    v(d), u(d), N.notEnumerableProp(a, "stack", t(c, d)), N.notEnumerableProp(a, "__stackCleaned__", !0);
                                }
                            };
                            var fa = function() {
                                var a = /^\s*at\s*/, b = function(a, b) {
                                    return "string" == typeof a ? a : void 0 !== b.name && void 0 !== b.message ? b.toString() : B(b);
                                };
                                if ("number" == typeof Error.stackTraceLimit && "function" == typeof Error.captureStackTrace) {
                                    Error.stackTraceLimit += 6, S = a, T = b;
                                    var c = Error.captureStackTrace;
                                    return da = function(a) {
                                        return P.test(a);
                                    }, function(a, b) {
                                        Error.stackTraceLimit += 6, c(a, b), Error.stackTraceLimit -= 6;
                                    };
                                }
                                var d = new Error();
                                if ("string" == typeof d.stack && d.stack.split("\n")[0].indexOf("stackDetection@") >= 0) return S = /@/, 
                                T = b, U = !0, function(a) {
                                    a.stack = new Error().stack;
                                };
                                var e;
                                try {
                                    throw new Error();
                                } catch (a) {
                                    e = "stack" in a;
                                }
                                return "stack" in d || !e || "number" != typeof Error.stackTraceLimit ? (T = function(a, b) {
                                    return "string" == typeof a ? a : "object" != typeof b && "function" != typeof b || void 0 === b.name || void 0 === b.message ? B(b) : b.toString();
                                }, null) : (S = a, T = b, function(a) {
                                    Error.stackTraceLimit += 6;
                                    try {
                                        throw new Error();
                                    } catch (b) {
                                        a.stack = b.stack;
                                    }
                                    Error.stackTraceLimit -= 6;
                                });
                            }();
                            "undefined" != typeof console && void 0 !== console.warn && (J = function(a) {
                                console.warn(a);
                            }, N.isNode && a.stderr.isTTY ? J = function(a, b) {
                                var c = b ? "[33m" : "[31m";
                                console.warn(c + a + "[0m\n");
                            } : N.isNode || "string" != typeof new Error().stack || (J = function(a, b) {
                                console.warn("%c" + a, b ? "color: darkorange" : "color: red");
                            }));
                            var ga = {
                                warnings: W,
                                longStackTraces: !1,
                                cancellation: !1,
                                monitoring: !1
                            };
                            return X && c.longStackTraces(), {
                                longStackTraces: function() {
                                    return ga.longStackTraces;
                                },
                                warnings: function() {
                                    return ga.warnings;
                                },
                                cancellation: function() {
                                    return ga.cancellation;
                                },
                                monitoring: function() {
                                    return ga.monitoring;
                                },
                                propagateFromFunction: function() {
                                    return ca;
                                },
                                boundValueFunction: function() {
                                    return n;
                                },
                                checkForgottenReturns: q,
                                setBounds: F,
                                warn: s,
                                deprecated: r,
                                CapturedTrace: G,
                                fireDomEvent: $,
                                fireGlobalEvent: _
                            };
                        };
                    }, {
                        "./errors": 12,
                        "./util": 36
                    } ],
                    10: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(a) {
                            function b() {
                                return this.value;
                            }
                            function c() {
                                throw this.reason;
                            }
                            a.prototype.return = a.prototype.thenReturn = function(c) {
                                return c instanceof a && c.suppressUnhandledRejections(), this._then(b, void 0, void 0, {
                                    value: c
                                }, void 0);
                            }, a.prototype.throw = a.prototype.thenThrow = function(a) {
                                return this._then(c, void 0, void 0, {
                                    reason: a
                                }, void 0);
                            }, a.prototype.catchThrow = function(a) {
                                if (arguments.length <= 1) return this._then(void 0, c, void 0, {
                                    reason: a
                                }, void 0);
                                var b = arguments[1], d = function() {
                                    throw b;
                                };
                                return this.caught(a, d);
                            }, a.prototype.catchReturn = function(c) {
                                if (arguments.length <= 1) return c instanceof a && c.suppressUnhandledRejections(), 
                                this._then(void 0, b, void 0, {
                                    value: c
                                }, void 0);
                                var d = arguments[1];
                                d instanceof a && d.suppressUnhandledRejections();
                                var e = function() {
                                    return d;
                                };
                                return this.caught(c, e);
                            };
                        };
                    }, {} ],
                    11: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(a, b) {
                            function c() {
                                return f(this);
                            }
                            function d(a, c) {
                                return e(a, c, b, b);
                            }
                            var e = a.reduce, f = a.all;
                            a.prototype.each = function(a) {
                                return e(this, a, b, 0)._then(c, void 0, void 0, this, void 0);
                            }, a.prototype.mapSeries = function(a) {
                                return e(this, a, b, b);
                            }, a.each = function(a, d) {
                                return e(a, d, b, 0)._then(c, void 0, void 0, a, void 0);
                            }, a.mapSeries = d;
                        };
                    }, {} ],
                    12: [ function(a, b, c) {
                        "use strict";
                        function d(a, b) {
                            function c(d) {
                                if (!(this instanceof c)) return new c(d);
                                l(this, "message", "string" == typeof d ? d : b), l(this, "name", a), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : Error.call(this);
                            }
                            return k(c, Error), c;
                        }
                        function e(a) {
                            if (!(this instanceof e)) return new e(a);
                            l(this, "name", "OperationalError"), l(this, "message", a), this.cause = a, this.isOperational = !0, 
                            a instanceof Error ? (l(this, "message", a.message), l(this, "stack", a.stack)) : Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
                        }
                        var f, g, h = a("./es5"), i = h.freeze, j = a("./util"), k = j.inherits, l = j.notEnumerableProp, m = d("Warning", "warning"), n = d("CancellationError", "cancellation error"), o = d("TimeoutError", "timeout error"), p = d("AggregateError", "aggregate error");
                        try {
                            f = TypeError, g = RangeError;
                        } catch (a) {
                            f = d("TypeError", "type error"), g = d("RangeError", "range error");
                        }
                        for (var q = "join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "), r = 0; r < q.length; ++r) "function" == typeof Array.prototype[q[r]] && (p.prototype[q[r]] = Array.prototype[q[r]]);
                        h.defineProperty(p.prototype, "length", {
                            value: 0,
                            configurable: !1,
                            writable: !0,
                            enumerable: !0
                        }), p.prototype.isOperational = !0;
                        var s = 0;
                        p.prototype.toString = function() {
                            var a = Array(4 * s + 1).join(" "), b = "\n" + a + "AggregateError of:\n";
                            s++, a = Array(4 * s + 1).join(" ");
                            for (var c = 0; c < this.length; ++c) {
                                for (var d = this[c] === this ? "[Circular AggregateError]" : this[c] + "", e = d.split("\n"), f = 0; f < e.length; ++f) e[f] = a + e[f];
                                d = e.join("\n"), b += d + "\n";
                            }
                            return s--, b;
                        }, k(e, Error);
                        var t = Error.__BluebirdErrorTypes__;
                        t || (t = i({
                            CancellationError: n,
                            TimeoutError: o,
                            OperationalError: e,
                            RejectionError: e,
                            AggregateError: p
                        }), h.defineProperty(Error, "__BluebirdErrorTypes__", {
                            value: t,
                            writable: !1,
                            enumerable: !1,
                            configurable: !1
                        })), b.exports = {
                            Error: Error,
                            TypeError: f,
                            RangeError: g,
                            CancellationError: t.CancellationError,
                            OperationalError: t.OperationalError,
                            TimeoutError: t.TimeoutError,
                            AggregateError: t.AggregateError,
                            Warning: m
                        };
                    }, {
                        "./es5": 13,
                        "./util": 36
                    } ],
                    13: [ function(a, b, c) {
                        var d = function() {
                            "use strict";
                            return void 0 === this;
                        }();
                        if (d) b.exports = {
                            freeze: Object.freeze,
                            defineProperty: Object.defineProperty,
                            getDescriptor: Object.getOwnPropertyDescriptor,
                            keys: Object.keys,
                            names: Object.getOwnPropertyNames,
                            getPrototypeOf: Object.getPrototypeOf,
                            isArray: Array.isArray,
                            isES5: d,
                            propertyIsWritable: function(a, b) {
                                var c = Object.getOwnPropertyDescriptor(a, b);
                                return !(c && !c.writable && !c.set);
                            }
                        }; else {
                            var e = {}.hasOwnProperty, f = {}.toString, g = {}.constructor.prototype, h = function(a) {
                                var b = [];
                                for (var c in a) e.call(a, c) && b.push(c);
                                return b;
                            }, i = function(a, b) {
                                return {
                                    value: a[b]
                                };
                            }, j = function(a, b, c) {
                                return a[b] = c.value, a;
                            }, k = function(a) {
                                return a;
                            }, l = function(a) {
                                try {
                                    return Object(a).constructor.prototype;
                                } catch (a) {
                                    return g;
                                }
                            }, m = function(a) {
                                try {
                                    return "[object Array]" === f.call(a);
                                } catch (a) {
                                    return !1;
                                }
                            };
                            b.exports = {
                                isArray: m,
                                keys: h,
                                names: h,
                                defineProperty: j,
                                getDescriptor: i,
                                freeze: k,
                                getPrototypeOf: l,
                                isES5: d,
                                propertyIsWritable: function() {
                                    return !0;
                                }
                            };
                        }
                    }, {} ],
                    14: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(a, b) {
                            var c = a.map;
                            a.prototype.filter = function(a, d) {
                                return c(this, a, d, b);
                            }, a.filter = function(a, d, e) {
                                return c(a, d, e, b);
                            };
                        };
                    }, {} ],
                    15: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d) {
                            function e(a, b, c) {
                                this.promise = a, this.type = b, this.handler = c, this.called = !1, this.cancelPromise = null;
                            }
                            function f(a) {
                                this.finallyHandler = a;
                            }
                            function g(a, b) {
                                return null != a.cancelPromise && (arguments.length > 1 ? a.cancelPromise._reject(b) : a.cancelPromise._cancel(), 
                                a.cancelPromise = null, !0);
                            }
                            function h() {
                                return j.call(this, this.promise._target()._settledValue());
                            }
                            function i(a) {
                                if (!g(this, a)) return m.e = a, m;
                            }
                            function j(a) {
                                var e = this.promise, j = this.handler;
                                if (!this.called) {
                                    this.called = !0;
                                    var k = this.isFinallyHandler() ? j.call(e._boundValue()) : j.call(e._boundValue(), a);
                                    if (k === d) return k;
                                    if (void 0 !== k) {
                                        e._setReturnedNonUndefined();
                                        var n = c(k, e);
                                        if (n instanceof b) {
                                            if (null != this.cancelPromise) {
                                                if (n._isCancelled()) {
                                                    var o = new l("late cancellation observer");
                                                    return e._attachExtraTrace(o), m.e = o, m;
                                                }
                                                n.isPending() && n._attachCancellationCallback(new f(this));
                                            }
                                            return n._then(h, i, void 0, this, void 0);
                                        }
                                    }
                                }
                                return e.isRejected() ? (g(this), m.e = a, m) : (g(this), a);
                            }
                            var k = a("./util"), l = b.CancellationError, m = k.errorObj, n = a("./catch_filter")(d);
                            return e.prototype.isFinallyHandler = function() {
                                return 0 === this.type;
                            }, f.prototype._resultCancelled = function() {
                                g(this.finallyHandler);
                            }, b.prototype._passThrough = function(a, b, c, d) {
                                return "function" != typeof a ? this.then() : this._then(c, d, void 0, new e(this, b, a), void 0);
                            }, b.prototype.lastly = b.prototype.finally = function(a) {
                                return this._passThrough(a, 0, j, j);
                            }, b.prototype.tap = function(a) {
                                return this._passThrough(a, 1, j);
                            }, b.prototype.tapCatch = function(a) {
                                var c = arguments.length;
                                if (1 === c) return this._passThrough(a, 1, void 0, j);
                                var d, e = new Array(c - 1), f = 0;
                                for (d = 0; d < c - 1; ++d) {
                                    var g = arguments[d];
                                    if (!k.isObject(g)) return b.reject(new TypeError("tapCatch statement predicate: expecting an object but got " + k.classString(g)));
                                    e[f++] = g;
                                }
                                e.length = f;
                                var h = arguments[d];
                                return this._passThrough(n(e, h, this), 1, void 0, j);
                            }, e;
                        };
                    }, {
                        "./catch_filter": 7,
                        "./util": 36
                    } ],
                    16: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e, f, g) {
                            function h(a, c, d) {
                                for (var f = 0; f < c.length; ++f) {
                                    d._pushContext();
                                    var g = n(c[f])(a);
                                    if (d._popContext(), g === m) {
                                        d._pushContext();
                                        var h = b.reject(m.e);
                                        return d._popContext(), h;
                                    }
                                    var i = e(g, d);
                                    if (i instanceof b) return i;
                                }
                                return null;
                            }
                            function i(a, c, e, f) {
                                if (g.cancellation()) {
                                    var h = new b(d), i = this._finallyPromise = new b(d);
                                    this._promise = h.lastly(function() {
                                        return i;
                                    }), h._captureStackTrace(), h._setOnCancel(this);
                                } else {
                                    (this._promise = new b(d))._captureStackTrace();
                                }
                                this._stack = f, this._generatorFunction = a, this._receiver = c, this._generator = void 0, 
                                this._yieldHandlers = "function" == typeof e ? [ e ].concat(o) : o, this._yieldedPromise = null, 
                                this._cancellationPhase = !1;
                            }
                            var j = a("./errors"), k = j.TypeError, l = a("./util"), m = l.errorObj, n = l.tryCatch, o = [];
                            l.inherits(i, f), i.prototype._isResolved = function() {
                                return null === this._promise;
                            }, i.prototype._cleanup = function() {
                                this._promise = this._generator = null, g.cancellation() && null !== this._finallyPromise && (this._finallyPromise._fulfill(), 
                                this._finallyPromise = null);
                            }, i.prototype._promiseCancelled = function() {
                                if (!this._isResolved()) {
                                    var a, c = void 0 !== this._generator.return;
                                    if (c) this._promise._pushContext(), a = n(this._generator.return).call(this._generator, void 0), 
                                    this._promise._popContext(); else {
                                        var d = new b.CancellationError("generator .return() sentinel");
                                        b.coroutine.returnSentinel = d, this._promise._attachExtraTrace(d), this._promise._pushContext(), 
                                        a = n(this._generator.throw).call(this._generator, d), this._promise._popContext();
                                    }
                                    this._cancellationPhase = !0, this._yieldedPromise = null, this._continue(a);
                                }
                            }, i.prototype._promiseFulfilled = function(a) {
                                this._yieldedPromise = null, this._promise._pushContext();
                                var b = n(this._generator.next).call(this._generator, a);
                                this._promise._popContext(), this._continue(b);
                            }, i.prototype._promiseRejected = function(a) {
                                this._yieldedPromise = null, this._promise._attachExtraTrace(a), this._promise._pushContext();
                                var b = n(this._generator.throw).call(this._generator, a);
                                this._promise._popContext(), this._continue(b);
                            }, i.prototype._resultCancelled = function() {
                                if (this._yieldedPromise instanceof b) {
                                    var a = this._yieldedPromise;
                                    this._yieldedPromise = null, a.cancel();
                                }
                            }, i.prototype.promise = function() {
                                return this._promise;
                            }, i.prototype._run = function() {
                                this._generator = this._generatorFunction.call(this._receiver), this._receiver = this._generatorFunction = void 0, 
                                this._promiseFulfilled(void 0);
                            }, i.prototype._continue = function(a) {
                                var c = this._promise;
                                if (a === m) return this._cleanup(), this._cancellationPhase ? c.cancel() : c._rejectCallback(a.e, !1);
                                var d = a.value;
                                if (!0 === a.done) return this._cleanup(), this._cancellationPhase ? c.cancel() : c._resolveCallback(d);
                                var f = e(d, this._promise);
                                if (!(f instanceof b) && null === (f = h(f, this._yieldHandlers, this._promise))) return void this._promiseRejected(new k("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s", String(d)) + "From coroutine:\n" + this._stack.split("\n").slice(1, -7).join("\n")));
                                f = f._target();
                                var g = f._bitField;
                                0 == (50397184 & g) ? (this._yieldedPromise = f, f._proxy(this, null)) : 0 != (33554432 & g) ? b._async.invoke(this._promiseFulfilled, this, f._value()) : 0 != (16777216 & g) ? b._async.invoke(this._promiseRejected, this, f._reason()) : this._promiseCancelled();
                            }, b.coroutine = function(a, b) {
                                if ("function" != typeof a) throw new k("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
                                var c = Object(b).yieldHandler, d = i, e = new Error().stack;
                                return function() {
                                    var b = a.apply(this, arguments), f = new d(void 0, void 0, c, e), g = f.promise();
                                    return f._generator = b, f._promiseFulfilled(void 0), g;
                                };
                            }, b.coroutine.addYieldHandler = function(a) {
                                if ("function" != typeof a) throw new k("expecting a function but got " + l.classString(a));
                                o.push(a);
                            }, b.spawn = function(a) {
                                if (g.deprecated("Promise.spawn()", "Promise.coroutine()"), "function" != typeof a) return c("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");
                                var d = new i(a, this), e = d.promise();
                                return d._run(b.spawn), e;
                            };
                        };
                    }, {
                        "./errors": 12,
                        "./util": 36
                    } ],
                    17: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e, f, g) {
                            var h = a("./util");
                            h.canEvaluate, h.tryCatch, h.errorObj;
                            b.join = function() {
                                var a, b = arguments.length - 1;
                                if (b > 0 && "function" == typeof arguments[b]) {
                                    a = arguments[b];
                                    var d;
                                }
                                var e = [].slice.call(arguments);
                                a && e.pop();
                                var d = new c(e).promise();
                                return void 0 !== a ? d.spread(a) : d;
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    18: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e, f, g) {
                            function h(a, b, c, d) {
                                this.constructor$(a), this._promise._captureStackTrace();
                                var e = j();
                                this._callback = null === e ? b : k.domainBind(e, b), this._preservedValues = d === f ? new Array(this.length()) : null, 
                                this._limit = c, this._inFlight = 0, this._queue = [], n.invoke(this._asyncInit, this, void 0);
                            }
                            function i(a, c, e, f) {
                                if ("function" != typeof c) return d("expecting a function but got " + k.classString(c));
                                var g = 0;
                                if (void 0 !== e) {
                                    if ("object" != typeof e || null === e) return b.reject(new TypeError("options argument must be an object but it is " + k.classString(e)));
                                    if ("number" != typeof e.concurrency) return b.reject(new TypeError("'concurrency' must be a number but it is " + k.classString(e.concurrency)));
                                    g = e.concurrency;
                                }
                                return g = "number" == typeof g && isFinite(g) && g >= 1 ? g : 0, new h(a, c, g, f).promise();
                            }
                            var j = b._getDomain, k = a("./util"), l = k.tryCatch, m = k.errorObj, n = b._async;
                            k.inherits(h, c), h.prototype._asyncInit = function() {
                                this._init$(void 0, -2);
                            }, h.prototype._init = function() {}, h.prototype._promiseFulfilled = function(a, c) {
                                var d = this._values, f = this.length(), h = this._preservedValues, i = this._limit;
                                if (c < 0) {
                                    if (c = -1 * c - 1, d[c] = a, i >= 1 && (this._inFlight--, this._drainQueue(), this._isResolved())) return !0;
                                } else {
                                    if (i >= 1 && this._inFlight >= i) return d[c] = a, this._queue.push(c), !1;
                                    null !== h && (h[c] = a);
                                    var j = this._promise, k = this._callback, n = j._boundValue();
                                    j._pushContext();
                                    var o = l(k).call(n, a, c, f), p = j._popContext();
                                    if (g.checkForgottenReturns(o, p, null !== h ? "Promise.filter" : "Promise.map", j), 
                                    o === m) return this._reject(o.e), !0;
                                    var q = e(o, this._promise);
                                    if (q instanceof b) {
                                        q = q._target();
                                        var r = q._bitField;
                                        if (0 == (50397184 & r)) return i >= 1 && this._inFlight++, d[c] = q, q._proxy(this, -1 * (c + 1)), 
                                        !1;
                                        if (0 == (33554432 & r)) return 0 != (16777216 & r) ? (this._reject(q._reason()), 
                                        !0) : (this._cancel(), !0);
                                        o = q._value();
                                    }
                                    d[c] = o;
                                }
                                return ++this._totalResolved >= f && (null !== h ? this._filter(d, h) : this._resolve(d), 
                                !0);
                            }, h.prototype._drainQueue = function() {
                                for (var a = this._queue, b = this._limit, c = this._values; a.length > 0 && this._inFlight < b; ) {
                                    if (this._isResolved()) return;
                                    var d = a.pop();
                                    this._promiseFulfilled(c[d], d);
                                }
                            }, h.prototype._filter = function(a, b) {
                                for (var c = b.length, d = new Array(c), e = 0, f = 0; f < c; ++f) a[f] && (d[e++] = b[f]);
                                d.length = e, this._resolve(d);
                            }, h.prototype.preservedValues = function() {
                                return this._preservedValues;
                            }, b.prototype.map = function(a, b) {
                                return i(this, a, b, null);
                            }, b.map = function(a, b, c, d) {
                                return i(a, b, c, d);
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    19: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e, f) {
                            var g = a("./util"), h = g.tryCatch;
                            b.method = function(a) {
                                if ("function" != typeof a) throw new b.TypeError("expecting a function but got " + g.classString(a));
                                return function() {
                                    var d = new b(c);
                                    d._captureStackTrace(), d._pushContext();
                                    var e = h(a).apply(this, arguments), g = d._popContext();
                                    return f.checkForgottenReturns(e, g, "Promise.method", d), d._resolveFromSyncValue(e), 
                                    d;
                                };
                            }, b.attempt = b.try = function(a) {
                                if ("function" != typeof a) return e("expecting a function but got " + g.classString(a));
                                var d = new b(c);
                                d._captureStackTrace(), d._pushContext();
                                var i;
                                if (arguments.length > 1) {
                                    f.deprecated("calling Promise.try with more than 1 argument");
                                    var j = arguments[1], k = arguments[2];
                                    i = g.isArray(j) ? h(a).apply(k, j) : h(a).call(k, j);
                                } else i = h(a)();
                                var l = d._popContext();
                                return f.checkForgottenReturns(i, l, "Promise.try", d), d._resolveFromSyncValue(i), 
                                d;
                            }, b.prototype._resolveFromSyncValue = function(a) {
                                a === g.errorObj ? this._rejectCallback(a.e, !1) : this._resolveCallback(a, !0);
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    20: [ function(a, b, c) {
                        "use strict";
                        function d(a) {
                            return a instanceof Error && k.getPrototypeOf(a) === Error.prototype;
                        }
                        function e(a) {
                            var b;
                            if (d(a)) {
                                b = new j(a), b.name = a.name, b.message = a.message, b.stack = a.stack;
                                for (var c = k.keys(a), e = 0; e < c.length; ++e) {
                                    var f = c[e];
                                    l.test(f) || (b[f] = a[f]);
                                }
                                return b;
                            }
                            return g.markAsOriginatingFromRejection(a), a;
                        }
                        function f(a, b) {
                            return function(c, d) {
                                if (null !== a) {
                                    if (c) {
                                        var f = e(h(c));
                                        a._attachExtraTrace(f), a._reject(f);
                                    } else if (b) {
                                        var g = [].slice.call(arguments, 1);
                                        a._fulfill(g);
                                    } else a._fulfill(d);
                                    a = null;
                                }
                            };
                        }
                        var g = a("./util"), h = g.maybeWrapAsError, i = a("./errors"), j = i.OperationalError, k = a("./es5"), l = /^(?:name|message|stack|cause)$/;
                        b.exports = f;
                    }, {
                        "./errors": 12,
                        "./es5": 13,
                        "./util": 36
                    } ],
                    21: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b) {
                            function c(a, b) {
                                var c = this;
                                if (!f.isArray(a)) return d.call(c, a, b);
                                var e = h(b).apply(c._boundValue(), [ null ].concat(a));
                                e === i && g.throwLater(e.e);
                            }
                            function d(a, b) {
                                var c = this, d = c._boundValue(), e = void 0 === a ? h(b).call(d, null) : h(b).call(d, null, a);
                                e === i && g.throwLater(e.e);
                            }
                            function e(a, b) {
                                var c = this;
                                if (!a) {
                                    var d = new Error(a + "");
                                    d.cause = a, a = d;
                                }
                                var e = h(b).call(c._boundValue(), a);
                                e === i && g.throwLater(e.e);
                            }
                            var f = a("./util"), g = b._async, h = f.tryCatch, i = f.errorObj;
                            b.prototype.asCallback = b.prototype.nodeify = function(a, b) {
                                if ("function" == typeof a) {
                                    var f = d;
                                    void 0 !== b && Object(b).spread && (f = c), this._then(f, e, void 0, this, a);
                                }
                                return this;
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    22: [ function(b, c, d) {
                        "use strict";
                        c.exports = function() {
                            function d() {}
                            function e(a, b) {
                                if (null == a || a.constructor !== f) throw new t("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");
                                if ("function" != typeof b) throw new t("expecting a function but got " + o.classString(b));
                            }
                            function f(a) {
                                a !== v && e(this, a), this._bitField = 0, this._fulfillmentHandler0 = void 0, this._rejectionHandler0 = void 0, 
                                this._promise0 = void 0, this._receiver0 = void 0, this._resolveFromExecutor(a), 
                                this._promiseCreated(), this._fireEvent("promiseCreated", this);
                            }
                            function g(a) {
                                this.promise._resolveCallback(a);
                            }
                            function h(a) {
                                this.promise._rejectCallback(a, !1);
                            }
                            function i(a) {
                                var b = new f(v);
                                b._fulfillmentHandler0 = a, b._rejectionHandler0 = a, b._promise0 = a, b._receiver0 = a;
                            }
                            var j, k = function() {
                                return new t("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n");
                            }, l = function() {
                                return new f.PromiseInspection(this._target());
                            }, m = function(a) {
                                return f.reject(new t(a));
                            }, n = {}, o = b("./util");
                            j = o.isNode ? function() {
                                var b = a.domain;
                                return void 0 === b && (b = null), b;
                            } : function() {
                                return null;
                            }, o.notEnumerableProp(f, "_getDomain", j);
                            var p = b("./es5"), q = b("./async"), r = new q();
                            p.defineProperty(f, "_async", {
                                value: r
                            });
                            var s = b("./errors"), t = f.TypeError = s.TypeError;
                            f.RangeError = s.RangeError;
                            var u = f.CancellationError = s.CancellationError;
                            f.TimeoutError = s.TimeoutError, f.OperationalError = s.OperationalError, f.RejectionError = s.OperationalError, 
                            f.AggregateError = s.AggregateError;
                            var v = function() {}, w = {}, x = {}, y = b("./thenables")(f, v), z = b("./promise_array")(f, v, y, m, d), A = b("./context")(f), B = A.create, C = b("./debuggability")(f, A), D = (C.CapturedTrace, 
                            b("./finally")(f, y, x)), E = b("./catch_filter")(x), F = b("./nodeback"), G = o.errorObj, H = o.tryCatch;
                            return f.prototype.toString = function() {
                                return "[object Promise]";
                            }, f.prototype.caught = f.prototype.catch = function(a) {
                                var b = arguments.length;
                                if (b > 1) {
                                    var c, d = new Array(b - 1), e = 0;
                                    for (c = 0; c < b - 1; ++c) {
                                        var f = arguments[c];
                                        if (!o.isObject(f)) return m("Catch statement predicate: expecting an object but got " + o.classString(f));
                                        d[e++] = f;
                                    }
                                    return d.length = e, a = arguments[c], this.then(void 0, E(d, a, this));
                                }
                                return this.then(void 0, a);
                            }, f.prototype.reflect = function() {
                                return this._then(l, l, void 0, this, void 0);
                            }, f.prototype.then = function(a, b) {
                                if (C.warnings() && arguments.length > 0 && "function" != typeof a && "function" != typeof b) {
                                    var c = ".then() only accepts functions but was passed: " + o.classString(a);
                                    arguments.length > 1 && (c += ", " + o.classString(b)), this._warn(c);
                                }
                                return this._then(a, b, void 0, void 0, void 0);
                            }, f.prototype.done = function(a, b) {
                                this._then(a, b, void 0, void 0, void 0)._setIsFinal();
                            }, f.prototype.spread = function(a) {
                                return "function" != typeof a ? m("expecting a function but got " + o.classString(a)) : this.all()._then(a, void 0, void 0, w, void 0);
                            }, f.prototype.toJSON = function() {
                                var a = {
                                    isFulfilled: !1,
                                    isRejected: !1,
                                    fulfillmentValue: void 0,
                                    rejectionReason: void 0
                                };
                                return this.isFulfilled() ? (a.fulfillmentValue = this.value(), a.isFulfilled = !0) : this.isRejected() && (a.rejectionReason = this.reason(), 
                                a.isRejected = !0), a;
                            }, f.prototype.all = function() {
                                return arguments.length > 0 && this._warn(".all() was passed arguments but it does not take any"), 
                                new z(this).promise();
                            }, f.prototype.error = function(a) {
                                return this.caught(o.originatesFromRejection, a);
                            }, f.getNewLibraryCopy = c.exports, f.is = function(a) {
                                return a instanceof f;
                            }, f.fromNode = f.fromCallback = function(a) {
                                var b = new f(v);
                                b._captureStackTrace();
                                var c = arguments.length > 1 && !!Object(arguments[1]).multiArgs, d = H(a)(F(b, c));
                                return d === G && b._rejectCallback(d.e, !0), b._isFateSealed() || b._setAsyncGuaranteed(), 
                                b;
                            }, f.all = function(a) {
                                return new z(a).promise();
                            }, f.cast = function(a) {
                                var b = y(a);
                                return b instanceof f || (b = new f(v), b._captureStackTrace(), b._setFulfilled(), 
                                b._rejectionHandler0 = a), b;
                            }, f.resolve = f.fulfilled = f.cast, f.reject = f.rejected = function(a) {
                                var b = new f(v);
                                return b._captureStackTrace(), b._rejectCallback(a, !0), b;
                            }, f.setScheduler = function(a) {
                                if ("function" != typeof a) throw new t("expecting a function but got " + o.classString(a));
                                return r.setScheduler(a);
                            }, f.prototype._then = function(a, b, c, d, e) {
                                var g = void 0 !== e, h = g ? e : new f(v), i = this._target(), k = i._bitField;
                                g || (h._propagateFrom(this, 3), h._captureStackTrace(), void 0 === d && 0 != (2097152 & this._bitField) && (d = 0 != (50397184 & k) ? this._boundValue() : i === this ? void 0 : this._boundTo), 
                                this._fireEvent("promiseChained", this, h));
                                var l = j();
                                if (0 != (50397184 & k)) {
                                    var m, n, p = i._settlePromiseCtx;
                                    0 != (33554432 & k) ? (n = i._rejectionHandler0, m = a) : 0 != (16777216 & k) ? (n = i._fulfillmentHandler0, 
                                    m = b, i._unsetRejectionIsUnhandled()) : (p = i._settlePromiseLateCancellationObserver, 
                                    n = new u("late cancellation observer"), i._attachExtraTrace(n), m = b), r.invoke(p, i, {
                                        handler: null === l ? m : "function" == typeof m && o.domainBind(l, m),
                                        promise: h,
                                        receiver: d,
                                        value: n
                                    });
                                } else i._addCallbacks(a, b, h, d, l);
                                return h;
                            }, f.prototype._length = function() {
                                return 65535 & this._bitField;
                            }, f.prototype._isFateSealed = function() {
                                return 0 != (117506048 & this._bitField);
                            }, f.prototype._isFollowing = function() {
                                return 67108864 == (67108864 & this._bitField);
                            }, f.prototype._setLength = function(a) {
                                this._bitField = -65536 & this._bitField | 65535 & a;
                            }, f.prototype._setFulfilled = function() {
                                this._bitField = 33554432 | this._bitField, this._fireEvent("promiseFulfilled", this);
                            }, f.prototype._setRejected = function() {
                                this._bitField = 16777216 | this._bitField, this._fireEvent("promiseRejected", this);
                            }, f.prototype._setFollowing = function() {
                                this._bitField = 67108864 | this._bitField, this._fireEvent("promiseResolved", this);
                            }, f.prototype._setIsFinal = function() {
                                this._bitField = 4194304 | this._bitField;
                            }, f.prototype._isFinal = function() {
                                return (4194304 & this._bitField) > 0;
                            }, f.prototype._unsetCancelled = function() {
                                this._bitField = -65537 & this._bitField;
                            }, f.prototype._setCancelled = function() {
                                this._bitField = 65536 | this._bitField, this._fireEvent("promiseCancelled", this);
                            }, f.prototype._setWillBeCancelled = function() {
                                this._bitField = 8388608 | this._bitField;
                            }, f.prototype._setAsyncGuaranteed = function() {
                                r.hasCustomScheduler() || (this._bitField = 134217728 | this._bitField);
                            }, f.prototype._receiverAt = function(a) {
                                var b = 0 === a ? this._receiver0 : this[4 * a - 4 + 3];
                                if (b !== n) return void 0 === b && this._isBound() ? this._boundValue() : b;
                            }, f.prototype._promiseAt = function(a) {
                                return this[4 * a - 4 + 2];
                            }, f.prototype._fulfillmentHandlerAt = function(a) {
                                return this[4 * a - 4 + 0];
                            }, f.prototype._rejectionHandlerAt = function(a) {
                                return this[4 * a - 4 + 1];
                            }, f.prototype._boundValue = function() {}, f.prototype._migrateCallback0 = function(a) {
                                var b = (a._bitField, a._fulfillmentHandler0), c = a._rejectionHandler0, d = a._promise0, e = a._receiverAt(0);
                                void 0 === e && (e = n), this._addCallbacks(b, c, d, e, null);
                            }, f.prototype._migrateCallbackAt = function(a, b) {
                                var c = a._fulfillmentHandlerAt(b), d = a._rejectionHandlerAt(b), e = a._promiseAt(b), f = a._receiverAt(b);
                                void 0 === f && (f = n), this._addCallbacks(c, d, e, f, null);
                            }, f.prototype._addCallbacks = function(a, b, c, d, e) {
                                var f = this._length();
                                if (f >= 65531 && (f = 0, this._setLength(0)), 0 === f) this._promise0 = c, this._receiver0 = d, 
                                "function" == typeof a && (this._fulfillmentHandler0 = null === e ? a : o.domainBind(e, a)), 
                                "function" == typeof b && (this._rejectionHandler0 = null === e ? b : o.domainBind(e, b)); else {
                                    var g = 4 * f - 4;
                                    this[g + 2] = c, this[g + 3] = d, "function" == typeof a && (this[g + 0] = null === e ? a : o.domainBind(e, a)), 
                                    "function" == typeof b && (this[g + 1] = null === e ? b : o.domainBind(e, b));
                                }
                                return this._setLength(f + 1), f;
                            }, f.prototype._proxy = function(a, b) {
                                this._addCallbacks(void 0, void 0, b, a, null);
                            }, f.prototype._resolveCallback = function(a, b) {
                                if (0 == (117506048 & this._bitField)) {
                                    if (a === this) return this._rejectCallback(k(), !1);
                                    var c = y(a, this);
                                    if (!(c instanceof f)) return this._fulfill(a);
                                    b && this._propagateFrom(c, 2);
                                    var d = c._target();
                                    if (d === this) return void this._reject(k());
                                    var e = d._bitField;
                                    if (0 == (50397184 & e)) {
                                        var g = this._length();
                                        g > 0 && d._migrateCallback0(this);
                                        for (var h = 1; h < g; ++h) d._migrateCallbackAt(this, h);
                                        this._setFollowing(), this._setLength(0), this._setFollowee(d);
                                    } else if (0 != (33554432 & e)) this._fulfill(d._value()); else if (0 != (16777216 & e)) this._reject(d._reason()); else {
                                        var i = new u("late cancellation observer");
                                        d._attachExtraTrace(i), this._reject(i);
                                    }
                                }
                            }, f.prototype._rejectCallback = function(a, b, c) {
                                var d = o.ensureErrorObject(a), e = d === a;
                                if (!e && !c && C.warnings()) {
                                    var f = "a promise was rejected with a non-error: " + o.classString(a);
                                    this._warn(f, !0);
                                }
                                this._attachExtraTrace(d, !!b && e), this._reject(a);
                            }, f.prototype._resolveFromExecutor = function(a) {
                                if (a !== v) {
                                    var b = this;
                                    this._captureStackTrace(), this._pushContext();
                                    var c = !0, d = this._execute(a, function(a) {
                                        b._resolveCallback(a);
                                    }, function(a) {
                                        b._rejectCallback(a, c);
                                    });
                                    c = !1, this._popContext(), void 0 !== d && b._rejectCallback(d, !0);
                                }
                            }, f.prototype._settlePromiseFromHandler = function(a, b, c, d) {
                                var e = d._bitField;
                                if (0 == (65536 & e)) {
                                    d._pushContext();
                                    var f;
                                    b === w ? c && "number" == typeof c.length ? f = H(a).apply(this._boundValue(), c) : (f = G, 
                                    f.e = new t("cannot .spread() a non-array: " + o.classString(c))) : f = H(a).call(b, c);
                                    var g = d._popContext();
                                    e = d._bitField, 0 == (65536 & e) && (f === x ? d._reject(c) : f === G ? d._rejectCallback(f.e, !1) : (C.checkForgottenReturns(f, g, "", d, this), 
                                    d._resolveCallback(f)));
                                }
                            }, f.prototype._target = function() {
                                for (var a = this; a._isFollowing(); ) a = a._followee();
                                return a;
                            }, f.prototype._followee = function() {
                                return this._rejectionHandler0;
                            }, f.prototype._setFollowee = function(a) {
                                this._rejectionHandler0 = a;
                            }, f.prototype._settlePromise = function(a, b, c, e) {
                                var g = a instanceof f, h = this._bitField, i = 0 != (134217728 & h);
                                0 != (65536 & h) ? (g && a._invokeInternalOnCancel(), c instanceof D && c.isFinallyHandler() ? (c.cancelPromise = a, 
                                H(b).call(c, e) === G && a._reject(G.e)) : b === l ? a._fulfill(l.call(c)) : c instanceof d ? c._promiseCancelled(a) : g || a instanceof z ? a._cancel() : c.cancel()) : "function" == typeof b ? g ? (i && a._setAsyncGuaranteed(), 
                                this._settlePromiseFromHandler(b, c, e, a)) : b.call(c, e, a) : c instanceof d ? c._isResolved() || (0 != (33554432 & h) ? c._promiseFulfilled(e, a) : c._promiseRejected(e, a)) : g && (i && a._setAsyncGuaranteed(), 
                                0 != (33554432 & h) ? a._fulfill(e) : a._reject(e));
                            }, f.prototype._settlePromiseLateCancellationObserver = function(a) {
                                var b = a.handler, c = a.promise, d = a.receiver, e = a.value;
                                "function" == typeof b ? c instanceof f ? this._settlePromiseFromHandler(b, d, e, c) : b.call(d, e, c) : c instanceof f && c._reject(e);
                            }, f.prototype._settlePromiseCtx = function(a) {
                                this._settlePromise(a.promise, a.handler, a.receiver, a.value);
                            }, f.prototype._settlePromise0 = function(a, b, c) {
                                var d = this._promise0, e = this._receiverAt(0);
                                this._promise0 = void 0, this._receiver0 = void 0, this._settlePromise(d, a, e, b);
                            }, f.prototype._clearCallbackDataAtIndex = function(a) {
                                var b = 4 * a - 4;
                                this[b + 2] = this[b + 3] = this[b + 0] = this[b + 1] = void 0;
                            }, f.prototype._fulfill = function(a) {
                                var b = this._bitField;
                                if (!((117506048 & b) >>> 16)) {
                                    if (a === this) {
                                        var c = k();
                                        return this._attachExtraTrace(c), this._reject(c);
                                    }
                                    this._setFulfilled(), this._rejectionHandler0 = a, (65535 & b) > 0 && (0 != (134217728 & b) ? this._settlePromises() : r.settlePromises(this));
                                }
                            }, f.prototype._reject = function(a) {
                                var b = this._bitField;
                                if (!((117506048 & b) >>> 16)) {
                                    if (this._setRejected(), this._fulfillmentHandler0 = a, this._isFinal()) return r.fatalError(a, o.isNode);
                                    (65535 & b) > 0 ? r.settlePromises(this) : this._ensurePossibleRejectionHandled();
                                }
                            }, f.prototype._fulfillPromises = function(a, b) {
                                for (var c = 1; c < a; c++) {
                                    var d = this._fulfillmentHandlerAt(c), e = this._promiseAt(c), f = this._receiverAt(c);
                                    this._clearCallbackDataAtIndex(c), this._settlePromise(e, d, f, b);
                                }
                            }, f.prototype._rejectPromises = function(a, b) {
                                for (var c = 1; c < a; c++) {
                                    var d = this._rejectionHandlerAt(c), e = this._promiseAt(c), f = this._receiverAt(c);
                                    this._clearCallbackDataAtIndex(c), this._settlePromise(e, d, f, b);
                                }
                            }, f.prototype._settlePromises = function() {
                                var a = this._bitField, b = 65535 & a;
                                if (b > 0) {
                                    if (0 != (16842752 & a)) {
                                        var c = this._fulfillmentHandler0;
                                        this._settlePromise0(this._rejectionHandler0, c, a), this._rejectPromises(b, c);
                                    } else {
                                        var d = this._rejectionHandler0;
                                        this._settlePromise0(this._fulfillmentHandler0, d, a), this._fulfillPromises(b, d);
                                    }
                                    this._setLength(0);
                                }
                                this._clearCancellationData();
                            }, f.prototype._settledValue = function() {
                                var a = this._bitField;
                                return 0 != (33554432 & a) ? this._rejectionHandler0 : 0 != (16777216 & a) ? this._fulfillmentHandler0 : void 0;
                            }, f.defer = f.pending = function() {
                                return C.deprecated("Promise.defer", "new Promise"), {
                                    promise: new f(v),
                                    resolve: g,
                                    reject: h
                                };
                            }, o.notEnumerableProp(f, "_makeSelfResolutionError", k), b("./method")(f, v, y, m, C), 
                            b("./bind")(f, v, y, C), b("./cancel")(f, z, m, C), b("./direct_resolve")(f), b("./synchronous_inspection")(f), 
                            b("./join")(f, z, y, v, r, j), f.Promise = f, f.version = "3.5.1", b("./map.js")(f, z, m, y, v, C), 
                            b("./call_get.js")(f), b("./using.js")(f, m, y, B, v, C), b("./timers.js")(f, v, C), 
                            b("./generators.js")(f, m, v, y, d, C), b("./nodeify.js")(f), b("./promisify.js")(f, v), 
                            b("./props.js")(f, z, y, m), b("./race.js")(f, v, y, m), b("./reduce.js")(f, z, m, y, v, C), 
                            b("./settle.js")(f, z, C), b("./some.js")(f, z, m), b("./filter.js")(f, v), b("./each.js")(f, v), 
                            b("./any.js")(f), o.toFastProperties(f), o.toFastProperties(f.prototype), i({
                                a: 1
                            }), i({
                                b: 2
                            }), i({
                                c: 3
                            }), i(1), i(function() {}), i(void 0), i(!1), i(new f(v)), C.setBounds(q.firstLineError, o.lastLineError), 
                            f;
                        };
                    }, {
                        "./any.js": 1,
                        "./async": 2,
                        "./bind": 3,
                        "./call_get.js": 5,
                        "./cancel": 6,
                        "./catch_filter": 7,
                        "./context": 8,
                        "./debuggability": 9,
                        "./direct_resolve": 10,
                        "./each.js": 11,
                        "./errors": 12,
                        "./es5": 13,
                        "./filter.js": 14,
                        "./finally": 15,
                        "./generators.js": 16,
                        "./join": 17,
                        "./map.js": 18,
                        "./method": 19,
                        "./nodeback": 20,
                        "./nodeify.js": 21,
                        "./promise_array": 23,
                        "./promisify.js": 24,
                        "./props.js": 25,
                        "./race.js": 27,
                        "./reduce.js": 28,
                        "./settle.js": 30,
                        "./some.js": 31,
                        "./synchronous_inspection": 32,
                        "./thenables": 33,
                        "./timers.js": 34,
                        "./using.js": 35,
                        "./util": 36
                    } ],
                    23: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e, f) {
                            function g(a) {
                                switch (a) {
                                  case -2:
                                    return [];

                                  case -3:
                                    return {};

                                  case -6:
                                    return new Map();
                                }
                            }
                            function h(a) {
                                var d = this._promise = new b(c);
                                a instanceof b && d._propagateFrom(a, 3), d._setOnCancel(this), this._values = a, 
                                this._length = 0, this._totalResolved = 0, this._init(void 0, -2);
                            }
                            var i = a("./util");
                            i.isArray;
                            return i.inherits(h, f), h.prototype.length = function() {
                                return this._length;
                            }, h.prototype.promise = function() {
                                return this._promise;
                            }, h.prototype._init = function a(c, f) {
                                var h = d(this._values, this._promise);
                                if (h instanceof b) {
                                    h = h._target();
                                    var j = h._bitField;
                                    if (this._values = h, 0 == (50397184 & j)) return this._promise._setAsyncGuaranteed(), 
                                    h._then(a, this._reject, void 0, this, f);
                                    if (0 == (33554432 & j)) return 0 != (16777216 & j) ? this._reject(h._reason()) : this._cancel();
                                    h = h._value();
                                }
                                if (null === (h = i.asArray(h))) {
                                    var k = e("expecting an array or an iterable object but got " + i.classString(h)).reason();
                                    return void this._promise._rejectCallback(k, !1);
                                }
                                if (0 === h.length) return void (-5 === f ? this._resolveEmptyArray() : this._resolve(g(f)));
                                this._iterate(h);
                            }, h.prototype._iterate = function(a) {
                                var c = this.getActualLength(a.length);
                                this._length = c, this._values = this.shouldCopyValues() ? new Array(c) : this._values;
                                for (var e = this._promise, f = !1, g = null, h = 0; h < c; ++h) {
                                    var i = d(a[h], e);
                                    i instanceof b ? (i = i._target(), g = i._bitField) : g = null, f ? null !== g && i.suppressUnhandledRejections() : null !== g ? 0 == (50397184 & g) ? (i._proxy(this, h), 
                                    this._values[h] = i) : f = 0 != (33554432 & g) ? this._promiseFulfilled(i._value(), h) : 0 != (16777216 & g) ? this._promiseRejected(i._reason(), h) : this._promiseCancelled(h) : f = this._promiseFulfilled(i, h);
                                }
                                f || e._setAsyncGuaranteed();
                            }, h.prototype._isResolved = function() {
                                return null === this._values;
                            }, h.prototype._resolve = function(a) {
                                this._values = null, this._promise._fulfill(a);
                            }, h.prototype._cancel = function() {
                                !this._isResolved() && this._promise._isCancellable() && (this._values = null, this._promise._cancel());
                            }, h.prototype._reject = function(a) {
                                this._values = null, this._promise._rejectCallback(a, !1);
                            }, h.prototype._promiseFulfilled = function(a, b) {
                                return this._values[b] = a, ++this._totalResolved >= this._length && (this._resolve(this._values), 
                                !0);
                            }, h.prototype._promiseCancelled = function() {
                                return this._cancel(), !0;
                            }, h.prototype._promiseRejected = function(a) {
                                return this._totalResolved++, this._reject(a), !0;
                            }, h.prototype._resultCancelled = function() {
                                if (!this._isResolved()) {
                                    var a = this._values;
                                    if (this._cancel(), a instanceof b) a.cancel(); else for (var c = 0; c < a.length; ++c) a[c] instanceof b && a[c].cancel();
                                }
                            }, h.prototype.shouldCopyValues = function() {
                                return !0;
                            }, h.prototype.getActualLength = function(a) {
                                return a;
                            }, h;
                        };
                    }, {
                        "./util": 36
                    } ],
                    24: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c) {
                            function d(a) {
                                return !v.test(a);
                            }
                            function e(a) {
                                try {
                                    return !0 === a.__isPromisified__;
                                } catch (a) {
                                    return !1;
                                }
                            }
                            function f(a, b, c) {
                                var d = n.getDataPropertyOrDefault(a, b + c, t);
                                return !!d && e(d);
                            }
                            function g(a, b, c) {
                                for (var d = 0; d < a.length; d += 2) {
                                    var e = a[d];
                                    if (c.test(e)) for (var f = e.replace(c, ""), g = 0; g < a.length; g += 2) if (a[g] === f) throw new s("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s", b));
                                }
                            }
                            function h(a, b, c, d) {
                                for (var h = n.inheritedDataKeys(a), i = [], j = 0; j < h.length; ++j) {
                                    var k = h[j], l = a[k], m = d === w || w(k, l, a);
                                    "function" != typeof l || e(l) || f(a, k, b) || !d(k, l, a, m) || i.push(k, l);
                                }
                                return g(i, b, c), i;
                            }
                            function i(a, d, e, f, g, h) {
                                function i() {
                                    var e = d;
                                    d === m && (e = this);
                                    var f = new b(c);
                                    f._captureStackTrace();
                                    var g = "string" == typeof k && this !== j ? this[k] : a, i = o(f, h);
                                    try {
                                        g.apply(e, p(arguments, i));
                                    } catch (a) {
                                        f._rejectCallback(q(a), !0, !0);
                                    }
                                    return f._isFateSealed() || f._setAsyncGuaranteed(), f;
                                }
                                var j = function() {
                                    return this;
                                }(), k = a;
                                return "string" == typeof k && (a = f), n.notEnumerableProp(i, "__isPromisified__", !0), 
                                i;
                            }
                            function j(a, b, c, d, e) {
                                for (var f = new RegExp(x(b) + "$"), g = h(a, b, f, c), i = 0, j = g.length; i < j; i += 2) {
                                    var k = g[i], l = g[i + 1], o = k + b;
                                    if (d === y) a[o] = y(k, m, k, l, b, e); else {
                                        var p = d(l, function() {
                                            return y(k, m, k, l, b, e);
                                        });
                                        n.notEnumerableProp(p, "__isPromisified__", !0), a[o] = p;
                                    }
                                }
                                return n.toFastProperties(a), a;
                            }
                            function k(a, b, c) {
                                return y(a, b, void 0, a, null, c);
                            }
                            var l, m = {}, n = a("./util"), o = a("./nodeback"), p = n.withAppended, q = n.maybeWrapAsError, r = n.canEvaluate, s = a("./errors").TypeError, t = {
                                __isPromisified__: !0
                            }, u = [ "arity", "length", "name", "arguments", "caller", "callee", "prototype", "__isPromisified__" ], v = new RegExp("^(?:" + u.join("|") + ")$"), w = function(a) {
                                return n.isIdentifier(a) && "_" !== a.charAt(0) && "constructor" !== a;
                            }, x = function(a) {
                                return a.replace(/([$])/, "\\$");
                            }, y = r ? l : i;
                            b.promisify = function(a, b) {
                                if ("function" != typeof a) throw new s("expecting a function but got " + n.classString(a));
                                if (e(a)) return a;
                                b = Object(b);
                                var c = void 0 === b.context ? m : b.context, f = !!b.multiArgs, g = k(a, c, f);
                                return n.copyDescriptors(a, g, d), g;
                            }, b.promisifyAll = function(a, b) {
                                if ("function" != typeof a && "object" != typeof a) throw new s("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");
                                b = Object(b);
                                var c = !!b.multiArgs, d = b.suffix;
                                "string" != typeof d && (d = "Async");
                                var e = b.filter;
                                "function" != typeof e && (e = w);
                                var f = b.promisifier;
                                if ("function" != typeof f && (f = y), !n.isIdentifier(d)) throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");
                                for (var g = n.inheritedDataKeys(a), h = 0; h < g.length; ++h) {
                                    var i = a[g[h]];
                                    "constructor" !== g[h] && n.isClass(i) && (j(i.prototype, d, e, f, c), j(i, d, e, f, c));
                                }
                                return j(a, d, e, f, c);
                            };
                        };
                    }, {
                        "./errors": 12,
                        "./nodeback": 20,
                        "./util": 36
                    } ],
                    25: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e) {
                            function f(a) {
                                var b, c = !1;
                                if (void 0 !== h && a instanceof h) b = l(a), c = !0; else {
                                    var d = k.keys(a), e = d.length;
                                    b = new Array(2 * e);
                                    for (var f = 0; f < e; ++f) {
                                        var g = d[f];
                                        b[f] = a[g], b[f + e] = g;
                                    }
                                }
                                this.constructor$(b), this._isMap = c, this._init$(void 0, c ? -6 : -3);
                            }
                            function g(a) {
                                var c, g = d(a);
                                return j(g) ? (c = g instanceof b ? g._then(b.props, void 0, void 0, void 0, void 0) : new f(g).promise(), 
                                g instanceof b && c._propagateFrom(g, 2), c) : e("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n");
                            }
                            var h, i = a("./util"), j = i.isObject, k = a("./es5");
                            "function" == typeof Map && (h = Map);
                            var l = function() {
                                function a(a, d) {
                                    this[b] = a, this[b + c] = d, b++;
                                }
                                var b = 0, c = 0;
                                return function(d) {
                                    c = d.size, b = 0;
                                    var e = new Array(2 * d.size);
                                    return d.forEach(a, e), e;
                                };
                            }(), m = function(a) {
                                for (var b = new h(), c = a.length / 2 | 0, d = 0; d < c; ++d) {
                                    var e = a[c + d], f = a[d];
                                    b.set(e, f);
                                }
                                return b;
                            };
                            i.inherits(f, c), f.prototype._init = function() {}, f.prototype._promiseFulfilled = function(a, b) {
                                if (this._values[b] = a, ++this._totalResolved >= this._length) {
                                    var c;
                                    if (this._isMap) c = m(this._values); else {
                                        c = {};
                                        for (var d = this.length(), e = 0, f = this.length(); e < f; ++e) c[this._values[e + d]] = this._values[e];
                                    }
                                    return this._resolve(c), !0;
                                }
                                return !1;
                            }, f.prototype.shouldCopyValues = function() {
                                return !1;
                            }, f.prototype.getActualLength = function(a) {
                                return a >> 1;
                            }, b.prototype.props = function() {
                                return g(this);
                            }, b.props = function(a) {
                                return g(a);
                            };
                        };
                    }, {
                        "./es5": 13,
                        "./util": 36
                    } ],
                    26: [ function(a, b, c) {
                        "use strict";
                        function d(a, b, c, d, e) {
                            for (var f = 0; f < e; ++f) c[f + d] = a[f + b], a[f + b] = void 0;
                        }
                        function e(a) {
                            this._capacity = a, this._length = 0, this._front = 0;
                        }
                        e.prototype._willBeOverCapacity = function(a) {
                            return this._capacity < a;
                        }, e.prototype._pushOne = function(a) {
                            var b = this.length();
                            this._checkCapacity(b + 1), this[this._front + b & this._capacity - 1] = a, this._length = b + 1;
                        }, e.prototype.push = function(a, b, c) {
                            var d = this.length() + 3;
                            if (this._willBeOverCapacity(d)) return this._pushOne(a), this._pushOne(b), void this._pushOne(c);
                            var e = this._front + d - 3;
                            this._checkCapacity(d);
                            var f = this._capacity - 1;
                            this[e + 0 & f] = a, this[e + 1 & f] = b, this[e + 2 & f] = c, this._length = d;
                        }, e.prototype.shift = function() {
                            var a = this._front, b = this[a];
                            return this[a] = void 0, this._front = a + 1 & this._capacity - 1, this._length--, 
                            b;
                        }, e.prototype.length = function() {
                            return this._length;
                        }, e.prototype._checkCapacity = function(a) {
                            this._capacity < a && this._resizeTo(this._capacity << 1);
                        }, e.prototype._resizeTo = function(a) {
                            var b = this._capacity;
                            this._capacity = a, d(this, 0, this, b, this._front + this._length & b - 1);
                        }, b.exports = e;
                    }, {} ],
                    27: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e) {
                            function f(a, f) {
                                var i = d(a);
                                if (i instanceof b) return h(i);
                                if (null === (a = g.asArray(a))) return e("expecting an array or an iterable object but got " + g.classString(a));
                                var j = new b(c);
                                void 0 !== f && j._propagateFrom(f, 3);
                                for (var k = j._fulfill, l = j._reject, m = 0, n = a.length; m < n; ++m) {
                                    var o = a[m];
                                    (void 0 !== o || m in a) && b.cast(o)._then(k, l, void 0, j, null);
                                }
                                return j;
                            }
                            var g = a("./util"), h = function(a) {
                                return a.then(function(b) {
                                    return f(b, a);
                                });
                            };
                            b.race = function(a) {
                                return f(a, void 0);
                            }, b.prototype.race = function() {
                                return f(this, void 0);
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    28: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e, f, g) {
                            function h(a, c, d, e) {
                                this.constructor$(a);
                                var g = m();
                                this._fn = null === g ? c : n.domainBind(g, c), void 0 !== d && (d = b.resolve(d), 
                                d._attachCancellationCallback(this)), this._initialValue = d, this._currentCancellable = null, 
                                this._eachValues = e === f ? Array(this._length) : 0 === e ? null : void 0, this._promise._captureStackTrace(), 
                                this._init$(void 0, -5);
                            }
                            function i(a, b) {
                                this.isFulfilled() ? b._resolve(a) : b._reject(a);
                            }
                            function j(a, b, c, e) {
                                return "function" != typeof b ? d("expecting a function but got " + n.classString(b)) : new h(a, b, c, e).promise();
                            }
                            function k(a) {
                                this.accum = a, this.array._gotAccum(a);
                                var c = e(this.value, this.array._promise);
                                return c instanceof b ? (this.array._currentCancellable = c, c._then(l, void 0, void 0, this, void 0)) : l.call(this, c);
                            }
                            function l(a) {
                                var c = this.array, d = c._promise, e = o(c._fn);
                                d._pushContext();
                                var f;
                                (f = void 0 !== c._eachValues ? e.call(d._boundValue(), a, this.index, this.length) : e.call(d._boundValue(), this.accum, a, this.index, this.length)) instanceof b && (c._currentCancellable = f);
                                var h = d._popContext();
                                return g.checkForgottenReturns(f, h, void 0 !== c._eachValues ? "Promise.each" : "Promise.reduce", d), 
                                f;
                            }
                            var m = b._getDomain, n = a("./util"), o = n.tryCatch;
                            n.inherits(h, c), h.prototype._gotAccum = function(a) {
                                void 0 !== this._eachValues && null !== this._eachValues && a !== f && this._eachValues.push(a);
                            }, h.prototype._eachComplete = function(a) {
                                return null !== this._eachValues && this._eachValues.push(a), this._eachValues;
                            }, h.prototype._init = function() {}, h.prototype._resolveEmptyArray = function() {
                                this._resolve(void 0 !== this._eachValues ? this._eachValues : this._initialValue);
                            }, h.prototype.shouldCopyValues = function() {
                                return !1;
                            }, h.prototype._resolve = function(a) {
                                this._promise._resolveCallback(a), this._values = null;
                            }, h.prototype._resultCancelled = function(a) {
                                if (a === this._initialValue) return this._cancel();
                                this._isResolved() || (this._resultCancelled$(), this._currentCancellable instanceof b && this._currentCancellable.cancel(), 
                                this._initialValue instanceof b && this._initialValue.cancel());
                            }, h.prototype._iterate = function(a) {
                                this._values = a;
                                var c, d, e = a.length;
                                if (void 0 !== this._initialValue ? (c = this._initialValue, d = 0) : (c = b.resolve(a[0]), 
                                d = 1), this._currentCancellable = c, !c.isRejected()) for (;d < e; ++d) {
                                    var f = {
                                        accum: null,
                                        value: a[d],
                                        index: d,
                                        length: e,
                                        array: this
                                    };
                                    c = c._then(k, void 0, void 0, f, void 0);
                                }
                                void 0 !== this._eachValues && (c = c._then(this._eachComplete, void 0, void 0, this, void 0)), 
                                c._then(i, i, void 0, c, this);
                            }, b.prototype.reduce = function(a, b) {
                                return j(this, a, b, null);
                            }, b.reduce = function(a, b, c, d) {
                                return j(a, b, c, d);
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    29: [ function(b, c, f) {
                        "use strict";
                        var g, h = b("./util"), i = function() {
                            throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n");
                        }, j = h.getNativePromise();
                        if (h.isNode && "undefined" == typeof MutationObserver) {
                            var k = d.setImmediate, l = a.nextTick;
                            g = h.isRecentNode ? function(a) {
                                k.call(d, a);
                            } : function(b) {
                                l.call(a, b);
                            };
                        } else if ("function" == typeof j && "function" == typeof j.resolve) {
                            var m = j.resolve();
                            g = function(a) {
                                m.then(a);
                            };
                        } else g = "undefined" == typeof MutationObserver || "undefined" != typeof window && window.navigator && (window.navigator.standalone || window.cordova) ? void 0 !== e ? function(a) {
                            e(a);
                        } : "undefined" != typeof setTimeout ? function(a) {
                            setTimeout(a, 0);
                        } : i : function() {
                            var a = document.createElement("div"), b = {
                                attributes: !0
                            }, c = !1, d = document.createElement("div");
                            new MutationObserver(function() {
                                a.classList.toggle("foo"), c = !1;
                            }).observe(d, b);
                            var e = function() {
                                c || (c = !0, d.classList.toggle("foo"));
                            };
                            return function(c) {
                                var d = new MutationObserver(function() {
                                    d.disconnect(), c();
                                });
                                d.observe(a, b), e();
                            };
                        }();
                        c.exports = g;
                    }, {
                        "./util": 36
                    } ],
                    30: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d) {
                            function e(a) {
                                this.constructor$(a);
                            }
                            var f = b.PromiseInspection;
                            a("./util").inherits(e, c), e.prototype._promiseResolved = function(a, b) {
                                return this._values[a] = b, ++this._totalResolved >= this._length && (this._resolve(this._values), 
                                !0);
                            }, e.prototype._promiseFulfilled = function(a, b) {
                                var c = new f();
                                return c._bitField = 33554432, c._settledValueField = a, this._promiseResolved(b, c);
                            }, e.prototype._promiseRejected = function(a, b) {
                                var c = new f();
                                return c._bitField = 16777216, c._settledValueField = a, this._promiseResolved(b, c);
                            }, b.settle = function(a) {
                                return d.deprecated(".settle()", ".reflect()"), new e(a).promise();
                            }, b.prototype.settle = function() {
                                return b.settle(this);
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    31: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d) {
                            function e(a) {
                                this.constructor$(a), this._howMany = 0, this._unwrap = !1, this._initialized = !1;
                            }
                            function f(a, b) {
                                if ((0 | b) !== b || b < 0) return d("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");
                                var c = new e(a), f = c.promise();
                                return c.setHowMany(b), c.init(), f;
                            }
                            var g = a("./util"), h = a("./errors").RangeError, i = a("./errors").AggregateError, j = g.isArray, k = {};
                            g.inherits(e, c), e.prototype._init = function() {
                                if (this._initialized) {
                                    if (0 === this._howMany) return void this._resolve([]);
                                    this._init$(void 0, -5);
                                    var a = j(this._values);
                                    !this._isResolved() && a && this._howMany > this._canPossiblyFulfill() && this._reject(this._getRangeError(this.length()));
                                }
                            }, e.prototype.init = function() {
                                this._initialized = !0, this._init();
                            }, e.prototype.setUnwrap = function() {
                                this._unwrap = !0;
                            }, e.prototype.howMany = function() {
                                return this._howMany;
                            }, e.prototype.setHowMany = function(a) {
                                this._howMany = a;
                            }, e.prototype._promiseFulfilled = function(a) {
                                return this._addFulfilled(a), this._fulfilled() === this.howMany() && (this._values.length = this.howMany(), 
                                1 === this.howMany() && this._unwrap ? this._resolve(this._values[0]) : this._resolve(this._values), 
                                !0);
                            }, e.prototype._promiseRejected = function(a) {
                                return this._addRejected(a), this._checkOutcome();
                            }, e.prototype._promiseCancelled = function() {
                                return this._values instanceof b || null == this._values ? this._cancel() : (this._addRejected(k), 
                                this._checkOutcome());
                            }, e.prototype._checkOutcome = function() {
                                if (this.howMany() > this._canPossiblyFulfill()) {
                                    for (var a = new i(), b = this.length(); b < this._values.length; ++b) this._values[b] !== k && a.push(this._values[b]);
                                    return a.length > 0 ? this._reject(a) : this._cancel(), !0;
                                }
                                return !1;
                            }, e.prototype._fulfilled = function() {
                                return this._totalResolved;
                            }, e.prototype._rejected = function() {
                                return this._values.length - this.length();
                            }, e.prototype._addRejected = function(a) {
                                this._values.push(a);
                            }, e.prototype._addFulfilled = function(a) {
                                this._values[this._totalResolved++] = a;
                            }, e.prototype._canPossiblyFulfill = function() {
                                return this.length() - this._rejected();
                            }, e.prototype._getRangeError = function(a) {
                                var b = "Input array must contain at least " + this._howMany + " items but contains only " + a + " items";
                                return new h(b);
                            }, e.prototype._resolveEmptyArray = function() {
                                this._reject(this._getRangeError(0));
                            }, b.some = function(a, b) {
                                return f(a, b);
                            }, b.prototype.some = function(a) {
                                return f(this, a);
                            }, b._SomePromiseArray = e;
                        };
                    }, {
                        "./errors": 12,
                        "./util": 36
                    } ],
                    32: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(a) {
                            function b(a) {
                                void 0 !== a ? (a = a._target(), this._bitField = a._bitField, this._settledValueField = a._isFateSealed() ? a._settledValue() : void 0) : (this._bitField = 0, 
                                this._settledValueField = void 0);
                            }
                            b.prototype._settledValue = function() {
                                return this._settledValueField;
                            };
                            var c = b.prototype.value = function() {
                                if (!this.isFulfilled()) throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");
                                return this._settledValue();
                            }, d = b.prototype.error = b.prototype.reason = function() {
                                if (!this.isRejected()) throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");
                                return this._settledValue();
                            }, e = b.prototype.isFulfilled = function() {
                                return 0 != (33554432 & this._bitField);
                            }, f = b.prototype.isRejected = function() {
                                return 0 != (16777216 & this._bitField);
                            }, g = b.prototype.isPending = function() {
                                return 0 == (50397184 & this._bitField);
                            }, h = b.prototype.isResolved = function() {
                                return 0 != (50331648 & this._bitField);
                            };
                            b.prototype.isCancelled = function() {
                                return 0 != (8454144 & this._bitField);
                            }, a.prototype.__isCancelled = function() {
                                return 65536 == (65536 & this._bitField);
                            }, a.prototype._isCancelled = function() {
                                return this._target().__isCancelled();
                            }, a.prototype.isCancelled = function() {
                                return 0 != (8454144 & this._target()._bitField);
                            }, a.prototype.isPending = function() {
                                return g.call(this._target());
                            }, a.prototype.isRejected = function() {
                                return f.call(this._target());
                            }, a.prototype.isFulfilled = function() {
                                return e.call(this._target());
                            }, a.prototype.isResolved = function() {
                                return h.call(this._target());
                            }, a.prototype.value = function() {
                                return c.call(this._target());
                            }, a.prototype.reason = function() {
                                var a = this._target();
                                return a._unsetRejectionIsUnhandled(), d.call(a);
                            }, a.prototype._value = function() {
                                return this._settledValue();
                            }, a.prototype._reason = function() {
                                return this._unsetRejectionIsUnhandled(), this._settledValue();
                            }, a.PromiseInspection = b;
                        };
                    }, {} ],
                    33: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c) {
                            function d(a, d) {
                                if (k(a)) {
                                    if (a instanceof b) return a;
                                    var e = f(a);
                                    if (e === j) {
                                        d && d._pushContext();
                                        var i = b.reject(e.e);
                                        return d && d._popContext(), i;
                                    }
                                    if ("function" == typeof e) {
                                        if (g(a)) {
                                            var i = new b(c);
                                            return a._then(i._fulfill, i._reject, void 0, i, null), i;
                                        }
                                        return h(a, e, d);
                                    }
                                }
                                return a;
                            }
                            function e(a) {
                                return a.then;
                            }
                            function f(a) {
                                try {
                                    return e(a);
                                } catch (a) {
                                    return j.e = a, j;
                                }
                            }
                            function g(a) {
                                try {
                                    return l.call(a, "_promise0");
                                } catch (a) {
                                    return !1;
                                }
                            }
                            function h(a, d, e) {
                                function f(a) {
                                    h && (h._resolveCallback(a), h = null);
                                }
                                function g(a) {
                                    h && (h._rejectCallback(a, l, !0), h = null);
                                }
                                var h = new b(c), k = h;
                                e && e._pushContext(), h._captureStackTrace(), e && e._popContext();
                                var l = !0, m = i.tryCatch(d).call(a, f, g);
                                return l = !1, h && m === j && (h._rejectCallback(m.e, !0, !0), h = null), k;
                            }
                            var i = a("./util"), j = i.errorObj, k = i.isObject, l = {}.hasOwnProperty;
                            return d;
                        };
                    }, {
                        "./util": 36
                    } ],
                    34: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d) {
                            function e(a) {
                                this.handle = a;
                            }
                            function f(a) {
                                return clearTimeout(this.handle), a;
                            }
                            function g(a) {
                                throw clearTimeout(this.handle), a;
                            }
                            var h = a("./util"), i = b.TimeoutError;
                            e.prototype._resultCancelled = function() {
                                clearTimeout(this.handle);
                            };
                            var j = function(a) {
                                return k(+this).thenReturn(a);
                            }, k = b.delay = function(a, f) {
                                var g, h;
                                return void 0 !== f ? (g = b.resolve(f)._then(j, null, null, a, void 0), d.cancellation() && f instanceof b && g._setOnCancel(f)) : (g = new b(c), 
                                h = setTimeout(function() {
                                    g._fulfill();
                                }, +a), d.cancellation() && g._setOnCancel(new e(h)), g._captureStackTrace()), g._setAsyncGuaranteed(), 
                                g;
                            };
                            b.prototype.delay = function(a) {
                                return k(a, this);
                            };
                            var l = function(a, b, c) {
                                var d;
                                d = "string" != typeof b ? b instanceof Error ? b : new i("operation timed out") : new i(b), 
                                h.markAsOriginatingFromRejection(d), a._attachExtraTrace(d), a._reject(d), null != c && c.cancel();
                            };
                            b.prototype.timeout = function(a, b) {
                                a = +a;
                                var c, h, i = new e(setTimeout(function() {
                                    c.isPending() && l(c, b, h);
                                }, a));
                                return d.cancellation() ? (h = this.then(), c = h._then(f, g, void 0, i, void 0), 
                                c._setOnCancel(i)) : c = this._then(f, g, void 0, i, void 0), c;
                            };
                        };
                    }, {
                        "./util": 36
                    } ],
                    35: [ function(a, b, c) {
                        "use strict";
                        b.exports = function(b, c, d, e, f, g) {
                            function h(a) {
                                setTimeout(function() {
                                    throw a;
                                }, 0);
                            }
                            function i(a) {
                                var b = d(a);
                                return b !== a && "function" == typeof a._isDisposable && "function" == typeof a._getDisposer && a._isDisposable() && b._setDisposable(a._getDisposer()), 
                                b;
                            }
                            function j(a, c) {
                                function e() {
                                    if (g >= j) return k._fulfill();
                                    var f = i(a[g++]);
                                    if (f instanceof b && f._isDisposable()) {
                                        try {
                                            f = d(f._getDisposer().tryDispose(c), a.promise);
                                        } catch (a) {
                                            return h(a);
                                        }
                                        if (f instanceof b) return f._then(e, h, null, null, null);
                                    }
                                    e();
                                }
                                var g = 0, j = a.length, k = new b(f);
                                return e(), k;
                            }
                            function k(a, b, c) {
                                this._data = a, this._promise = b, this._context = c;
                            }
                            function l(a, b, c) {
                                this.constructor$(a, b, c);
                            }
                            function m(a) {
                                return k.isDisposer(a) ? (this.resources[this.index]._setDisposable(a), a.promise()) : a;
                            }
                            function n(a) {
                                this.length = a, this.promise = null, this[a - 1] = null;
                            }
                            var o = a("./util"), p = a("./errors").TypeError, q = a("./util").inherits, r = o.errorObj, s = o.tryCatch, t = {};
                            k.prototype.data = function() {
                                return this._data;
                            }, k.prototype.promise = function() {
                                return this._promise;
                            }, k.prototype.resource = function() {
                                return this.promise().isFulfilled() ? this.promise().value() : t;
                            }, k.prototype.tryDispose = function(a) {
                                var b = this.resource(), c = this._context;
                                void 0 !== c && c._pushContext();
                                var d = b !== t ? this.doDispose(b, a) : null;
                                return void 0 !== c && c._popContext(), this._promise._unsetDisposable(), this._data = null, 
                                d;
                            }, k.isDisposer = function(a) {
                                return null != a && "function" == typeof a.resource && "function" == typeof a.tryDispose;
                            }, q(l, k), l.prototype.doDispose = function(a, b) {
                                return this.data().call(a, a, b);
                            }, n.prototype._resultCancelled = function() {
                                for (var a = this.length, c = 0; c < a; ++c) {
                                    var d = this[c];
                                    d instanceof b && d.cancel();
                                }
                            }, b.using = function() {
                                var a = arguments.length;
                                if (a < 2) return c("you must pass at least 2 arguments to Promise.using");
                                var e = arguments[a - 1];
                                if ("function" != typeof e) return c("expecting a function but got " + o.classString(e));
                                var f, h = !0;
                                2 === a && Array.isArray(arguments[0]) ? (f = arguments[0], a = f.length, h = !1) : (f = arguments, 
                                a--);
                                for (var i = new n(a), l = 0; l < a; ++l) {
                                    var p = f[l];
                                    if (k.isDisposer(p)) {
                                        var q = p;
                                        p = p.promise(), p._setDisposable(q);
                                    } else {
                                        var t = d(p);
                                        t instanceof b && (p = t._then(m, null, null, {
                                            resources: i,
                                            index: l
                                        }, void 0));
                                    }
                                    i[l] = p;
                                }
                                for (var u = new Array(i.length), l = 0; l < u.length; ++l) u[l] = b.resolve(i[l]).reflect();
                                var v = b.all(u).then(function(a) {
                                    for (var b = 0; b < a.length; ++b) {
                                        var c = a[b];
                                        if (c.isRejected()) return r.e = c.error(), r;
                                        if (!c.isFulfilled()) return void v.cancel();
                                        a[b] = c.value();
                                    }
                                    w._pushContext(), e = s(e);
                                    var d = h ? e.apply(void 0, a) : e(a), f = w._popContext();
                                    return g.checkForgottenReturns(d, f, "Promise.using", w), d;
                                }), w = v.lastly(function() {
                                    var a = new b.PromiseInspection(v);
                                    return j(i, a);
                                });
                                return i.promise = w, w._setOnCancel(i), w;
                            }, b.prototype._setDisposable = function(a) {
                                this._bitField = 131072 | this._bitField, this._disposer = a;
                            }, b.prototype._isDisposable = function() {
                                return (131072 & this._bitField) > 0;
                            }, b.prototype._getDisposer = function() {
                                return this._disposer;
                            }, b.prototype._unsetDisposable = function() {
                                this._bitField = -131073 & this._bitField, this._disposer = void 0;
                            }, b.prototype.disposer = function(a) {
                                if ("function" == typeof a) return new l(a, this, e());
                                throw new p();
                            };
                        };
                    }, {
                        "./errors": 12,
                        "./util": 36
                    } ],
                    36: [ function(b, c, e) {
                        "use strict";
                        function f() {
                            try {
                                var a = F;
                                return F = null, a.apply(this, arguments);
                            } catch (a) {
                                return E.e = a, E;
                            }
                        }
                        function g(a) {
                            return F = a, f;
                        }
                        function h(a) {
                            return null == a || !0 === a || !1 === a || "string" == typeof a || "number" == typeof a;
                        }
                        function i(a) {
                            return "function" == typeof a || "object" == typeof a && null !== a;
                        }
                        function j(a) {
                            return h(a) ? new Error(s(a)) : a;
                        }
                        function k(a, b) {
                            var c, d = a.length, e = new Array(d + 1);
                            for (c = 0; c < d; ++c) e[c] = a[c];
                            return e[c] = b, e;
                        }
                        function l(a, b, c) {
                            if (!C.isES5) return {}.hasOwnProperty.call(a, b) ? a[b] : void 0;
                            var d = Object.getOwnPropertyDescriptor(a, b);
                            return null != d ? null == d.get && null == d.set ? d.value : c : void 0;
                        }
                        function m(a, b, c) {
                            if (h(a)) return a;
                            var d = {
                                value: c,
                                configurable: !0,
                                enumerable: !1,
                                writable: !0
                            };
                            return C.defineProperty(a, b, d), a;
                        }
                        function n(a) {
                            throw a;
                        }
                        function o(a) {
                            try {
                                if ("function" == typeof a) {
                                    var b = C.names(a.prototype), c = C.isES5 && b.length > 1, d = b.length > 0 && !(1 === b.length && "constructor" === b[0]), e = J.test(a + "") && C.names(a).length > 0;
                                    if (c || d || e) return !0;
                                }
                                return !1;
                            } catch (a) {
                                return !1;
                            }
                        }
                        function p(a) {
                            function b() {}
                            b.prototype = a;
                            for (var c = 8; c--; ) new b();
                            return a;
                        }
                        function q(a) {
                            return K.test(a);
                        }
                        function r(a, b, c) {
                            for (var d = new Array(a), e = 0; e < a; ++e) d[e] = b + e + c;
                            return d;
                        }
                        function s(a) {
                            try {
                                return a + "";
                            } catch (a) {
                                return "[no string representation]";
                            }
                        }
                        function t(a) {
                            return a instanceof Error || null !== a && "object" == typeof a && "string" == typeof a.message && "string" == typeof a.name;
                        }
                        function u(a) {
                            try {
                                m(a, "isOperational", !0);
                            } catch (a) {}
                        }
                        function v(a) {
                            return null != a && (a instanceof Error.__BluebirdErrorTypes__.OperationalError || !0 === a.isOperational);
                        }
                        function w(a) {
                            return t(a) && C.propertyIsWritable(a, "stack");
                        }
                        function x(a) {
                            return {}.toString.call(a);
                        }
                        function y(a, b, c) {
                            for (var d = C.names(a), e = 0; e < d.length; ++e) {
                                var f = d[e];
                                if (c(f)) try {
                                    C.defineProperty(b, f, C.getDescriptor(a, f));
                                } catch (a) {}
                            }
                        }
                        function z(b) {
                            return P ? a.env[b] : void 0;
                        }
                        function A() {
                            if ("function" == typeof Promise) try {
                                var a = new Promise(function() {});
                                if ("[object Promise]" === {}.toString.call(a)) return Promise;
                            } catch (a) {}
                        }
                        function B(a, b) {
                            return a.bind(b);
                        }
                        var C = b("./es5"), D = "undefined" == typeof navigator, E = {
                            e: {}
                        }, F, G = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== d ? d : void 0 !== this ? this : null, H = function(a, b) {
                            function c() {
                                this.constructor = a, this.constructor$ = b;
                                for (var c in b.prototype) d.call(b.prototype, c) && "$" !== c.charAt(c.length - 1) && (this[c + "$"] = b.prototype[c]);
                            }
                            var d = {}.hasOwnProperty;
                            return c.prototype = b.prototype, a.prototype = new c(), a.prototype;
                        }, I = function() {
                            var a = [ Array.prototype, Object.prototype, Function.prototype ], b = function(b) {
                                for (var c = 0; c < a.length; ++c) if (a[c] === b) return !0;
                                return !1;
                            };
                            if (C.isES5) {
                                var c = Object.getOwnPropertyNames;
                                return function(a) {
                                    for (var d = [], e = Object.create(null); null != a && !b(a); ) {
                                        var f;
                                        try {
                                            f = c(a);
                                        } catch (a) {
                                            return d;
                                        }
                                        for (var g = 0; g < f.length; ++g) {
                                            var h = f[g];
                                            if (!e[h]) {
                                                e[h] = !0;
                                                var i = Object.getOwnPropertyDescriptor(a, h);
                                                null != i && null == i.get && null == i.set && d.push(h);
                                            }
                                        }
                                        a = C.getPrototypeOf(a);
                                    }
                                    return d;
                                };
                            }
                            var d = {}.hasOwnProperty;
                            return function(c) {
                                if (b(c)) return [];
                                var e = [];
                                a: for (var f in c) if (d.call(c, f)) e.push(f); else {
                                    for (var g = 0; g < a.length; ++g) if (d.call(a[g], f)) continue a;
                                    e.push(f);
                                }
                                return e;
                            };
                        }(), J = /this\s*\.\s*\S+\s*=/, K = /^[a-z$_][a-z$_0-9]*$/i, L = function() {
                            return "stack" in new Error() ? function(a) {
                                return w(a) ? a : new Error(s(a));
                            } : function(a) {
                                if (w(a)) return a;
                                try {
                                    throw new Error(s(a));
                                } catch (a) {
                                    return a;
                                }
                            };
                        }(), M = function(a) {
                            return C.isArray(a) ? a : null;
                        };
                        if ("undefined" != typeof Symbol && Symbol.iterator) {
                            var N = "function" == typeof Array.from ? function(a) {
                                return Array.from(a);
                            } : function(a) {
                                for (var b, c = [], d = a[Symbol.iterator](); !(b = d.next()).done; ) c.push(b.value);
                                return c;
                            };
                            M = function(a) {
                                return C.isArray(a) ? a : null != a && "function" == typeof a[Symbol.iterator] ? N(a) : null;
                            };
                        }
                        var O = void 0 !== a && "[object process]" === x(a).toLowerCase(), P = void 0 !== a && void 0 !== a.env, Q = {
                            isClass: o,
                            isIdentifier: q,
                            inheritedDataKeys: I,
                            getDataPropertyOrDefault: l,
                            thrower: n,
                            isArray: C.isArray,
                            asArray: M,
                            notEnumerableProp: m,
                            isPrimitive: h,
                            isObject: i,
                            isError: t,
                            canEvaluate: D,
                            errorObj: E,
                            tryCatch: g,
                            inherits: H,
                            withAppended: k,
                            maybeWrapAsError: j,
                            toFastProperties: p,
                            filledRange: r,
                            toString: s,
                            canAttachTrace: w,
                            ensureErrorObject: L,
                            originatesFromRejection: v,
                            markAsOriginatingFromRejection: u,
                            classString: x,
                            copyDescriptors: y,
                            hasDevTools: "undefined" != typeof chrome && chrome && "function" == typeof chrome.loadTimes,
                            isNode: O,
                            hasEnvVariables: P,
                            env: z,
                            global: G,
                            getNativePromise: A,
                            domainBind: B
                        };
                        Q.isRecentNode = Q.isNode && function() {
                            var b = a.versions.node.split(".").map(Number);
                            return 0 === b[0] && b[1] > 10 || b[0] > 0;
                        }(), Q.isNode && Q.toFastProperties(a);
                        try {
                            throw new Error();
                        } catch (a) {
                            Q.lastLineError = a;
                        }
                        c.exports = Q;
                    }, {
                        "./es5": 13
                    } ]
                }, {}, [ 4 ])(4);
            }), "undefined" != typeof window && null !== window ? window.P = window.Promise : "undefined" != typeof self && null !== self && (self.P = self.Promise);
        }).call(this, a("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("timers").setImmediate);
    }, {
        _process: 15,
        timers: 16
    } ],
    2: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.PreCallTest = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./turnConnection"), g = a("./tests/rttTest"), h = a("./tests/throughputTest"), i = a("./utility/resultsHandler"), j = a("./utility/onlineCheck"), k = a("./utility/stats/detectbrowser"), l = a("bluebird"), m = {
            RTT: "rtt",
            THROUGHPUT: "throughput"
        }, n = function() {
            function a() {
                d(this, a), this.browserInfo = (0, k.detect)(), this.onlineCheck = new j.OnlineCheck(), 
                this.callsInProgress = 0, this.turnTests = [ m.RTT, m.THROUGHPUT ], this.active = !1, 
                this.rtt = null, this.resultsHandler = null;
            }
            return e(a, [ {
                key: "start",
                value: function(a, b, c) {
                    if (this.browserInfo.browserName !== k.Constants.browserName.msie) if (this.iceServers = a, 
                    this.callback = c, this.active) this.callback && this.callback(null, "Not started: already in progress"); else if (0 < this.callsInProgress) this.callback && this.callback(null, "Not started: call in progress"); else if (a) {
                        this.turnTestCounter = 0, this.resultsHandler = new i.ResultsHandler(), this.resultsHandler.setProvider(b);
                        var d = {
                            type: "browser",
                            os: this.browserInfo.os,
                            osVersion: this.browserInfo.osVersion,
                            buildName: this.browserInfo.browserName,
                            buildVersion: this.browserInfo.browserVersion
                        };
                        this.resultsHandler.add("endpointInfo", d), this.onlineCheck.start(), this.active = !0, 
                        this._start();
                    } else this.callback && this.callback(null, "Not started: no ICE servers given"); else this.callback && this.callback(null, "Not started: disabled for IE");
                }
            }, {
                key: "_start",
                value: function() {
                    var a = this;
                    this.active && (this.turnConnection = new f.TurnConnection(this.browserInfo), this.turnConnection.connect(this.iceServers).then(function() {
                        a.active ? a.startTurnTests().then(function() {
                            a.stop();
                        }, function(b) {
                            a.stop();
                        }) : a.stop();
                    }, function(b) {
                        var c = b.continueFlag;
                        if (a.resultsHandler.failure(b), !c) {
                            a.turnConnection.disconnect(), a.active = !1;
                            var d = "";
                            try {
                                d = b.stack;
                            } catch (c) {
                                d = b.toString();
                            }
                            return d && "" !== d || (d = b.toString()), void a.callback(null, d);
                        }
                        a.resultsHandler.getFailureNumber() >= 10 ? a.stop() : (a.turnConnection.disconnect(), 
                        setTimeout(function() {
                            a._start();
                        }, 0));
                    }));
                }
            }, {
                key: "stop",
                value: function() {
                    var a = this;
                    if (this.browserInfo.browserName !== k.Constants.browserName.msie && this.active) {
                        this.active = !1, this.activeTurnTest && this.activeTurnTest.forceStop();
                        var b = this.onlineCheck.stop();
                        this.resultsHandler && this.resultsHandler.add("onlineStatus", b), this.turnConnection.getIceResults().then(function(b) {
                            a.resultsHandler && a.resultsHandler.add("ice", b), a.turnConnection.disconnect(), 
                            a.sendResults();
                        }, function(b) {
                            a.resultsHandler && a.resultsHandler.failure(b), a.turnConnection.disconnect(), 
                            a.sendResults();
                        });
                    }
                }
            }, {
                key: "sendResults",
                value: function() {
                    if (this.resultsHandler) {
                        var a = this.resultsHandler.getResults();
                        this.resultsHandler = null, this.callback && this.callback(a, null);
                    } else this.callback && this.callback(null, "No results present");
                }
            }, {
                key: "callStarts",
                value: function() {
                    this.callsInProgress += 1, this.stop();
                }
            }, {
                key: "callFinished",
                value: function() {
                    this.callsInProgress -= 1;
                }
            }, {
                key: "getId",
                value: function() {
                    return this.resultsHandler ? this.resultsHandler.getId() : null;
                }
            }, {
                key: "crashDisconnect",
                value: function() {
                    try {
                        this.turnConnection.disconnect();
                    } catch (a) {}
                }
            }, {
                key: "startTurnTests",
                value: function() {
                    var a = this;
                    if (this.turnTestCounter >= this.turnTests.length) return new l(function(a, b) {
                        a();
                    });
                    var b = this.turnTests[this.turnTestCounter], c = null;
                    switch (b) {
                      case m.RTT:
                        c = new g.RttTest(this.turnConnection);
                        break;

                      case m.THROUGHPUT:
                        c = new h.ThroughputTest(this.turnConnection, this.rtt);
                        break;

                      default:
                        return new l(function(a, c) {
                            c(new Error("Unknown test: " + b));
                        });
                    }
                    return this.activeTurnTest = c, this.active ? c.start().then(function() {
                        return a.handleTestResults(b, c.getResults()), a.turnTestCounter += 1, a.activeTurnTest = null, 
                        a.startTurnTests();
                    }, function(d) {
                        return a.handleTestResults(b, c.getResults(), d), a.turnTestCounter += 1, a.activeTurnTest = null, 
                        a.startTurnTests();
                    }) : new l(function(a, b) {
                        b(new Error("Test trying to start while testing is not active"));
                    });
                }
            }, {
                key: "handleTestResults",
                value: function(a, b) {
                    null == (2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null) && a == m.RTT && (this.rtt = b.median), 
                    this.resultsHandler && this.resultsHandler.add(a, b);
                }
            } ]), a;
        }();
        c.PreCallTest = n;
    }, {
        "./tests/rttTest": 3,
        "./tests/throughputTest": 4,
        "./turnConnection": 6,
        "./utility/onlineCheck": 8,
        "./utility/resultsHandler": 10,
        "./utility/stats/detectbrowser": 11,
        bluebird: 1
    } ],
    3: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.RttTest = void 0;
        var g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = function a(b, c, d) {
            null === b && (b = Function.prototype);
            var e = Object.getOwnPropertyDescriptor(b, c);
            if (void 0 === e) {
                var f = Object.getPrototypeOf(b);
                return null === f ? void 0 : a(f, c, d);
            }
            if ("value" in e) return e.value;
            var g = e.get;
            return void 0 !== g ? g.call(d) : void 0;
        }, i = a("../utility/timestamps"), j = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(i), k = a("./turnTest"), l = function(a) {
            function b(a) {
                d(this, b);
                var c = e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, a));
                return c.sendTimer = null, c.countSent = 0, c.rtts = [], c;
            }
            return f(b, k.TurnTest), g(b, [ {
                key: "initiate",
                value: function() {
                    this.results.startTimestamp = j.getCurrent(), this.sendPing();
                }
            }, {
                key: "handleMessage",
                value: function(a) {
                    if (this.isActive()) {
                        var b = parseInt(a, 10), c = this.calculateRtt(b);
                        this.rtts.push(c), this.countSent < 10 ? this.sendPing() : this.calculateMetrics();
                    }
                }
            }, {
                key: "handleError",
                value: function(a) {
                    this.fillResults(), this.failed(a);
                }
            }, {
                key: "sendPing",
                value: function() {
                    if (this.isActive()) {
                        var a = j.getCurrent();
                        this.send(a.toString()), this.countSent += 1, this.sendTimer && (clearTimeout(this.sendTimer), 
                        this.sendTimer = null), this.countSent < 10 ? this.sendTimer = setTimeout(this.sendPing.bind(this), 100) : this.sendTimer = setTimeout(this.calculateMetrics.bind(this), 500);
                    }
                }
            }, {
                key: "calculateRtt",
                value: function(a) {
                    return j.getCurrent() - a;
                }
            }, {
                key: "calculateMetrics",
                value: function() {
                    this.sendTimer && (clearTimeout(this.sendTimer), this.sendTimer = null), this.fillResults(), 
                    this.finished();
                }
            }, {
                key: "fillResults",
                value: function() {
                    this.results.sentMessages = this.countSent, this.results.unAckedMessages = this.countSent - this.rtts.length, 
                    this.results.maxMessages = 10, this.results.forceStopped = this.forceStopped, this.results.median = this.median(), 
                    this.results.average = this.average(), this.results.variance = this.variance(), 
                    this.results.endTimestamp = j.getCurrent();
                }
            }, {
                key: "median",
                value: function() {
                    if (0 == this.rtts.length) return null;
                    this.rtts.sort();
                    var a = Math.floor(this.rtts.length / 2);
                    return this.rtts[a];
                }
            }, {
                key: "average",
                value: function() {
                    if (0 == this.rtts.length) return null;
                    for (var a = 0, b = 0; b < this.rtts.length; b++) a += this.rtts[b];
                    return a / this.rtts.length;
                }
            }, {
                key: "variance",
                value: function() {
                    if (0 == this.rtts.length) return null;
                    for (var a = 0, b = this.average(), c = 0; c < this.rtts.length; c++) {
                        var d = this.rtts[c];
                        a += Math.pow(d - b, 2);
                    }
                    return a /= this.rtts.length;
                }
            }, {
                key: "stop",
                value: function() {
                    this.isActive() && (h(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "stop", this).call(this), 
                    this.fillResults());
                }
            } ]), b;
        }();
        c.RttTest = l;
    }, {
        "../utility/timestamps": 14,
        "./turnTest": 5
    } ],
    4: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ThroughputTest = void 0;
        var g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = function a(b, c, d) {
            null === b && (b = Function.prototype);
            var e = Object.getOwnPropertyDescriptor(b, c);
            if (void 0 === e) {
                var f = Object.getPrototypeOf(b);
                return null === f ? void 0 : a(f, c, d);
            }
            if ("value" in e) return e.value;
            var g = e.get;
            return void 0 !== g ? g.call(d) : void 0;
        }, i = a("../utility/timestamps"), j = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(i), k = a("../utility/messageMaker"), l = a("./turnTest"), m = function(a) {
            function b(a, c) {
                d(this, b);
                var f = e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, a));
                if (f.sentBytes = 0, f.receivedBytes = 0, f.secondHalfBytes = 0, f.secondHalfStart = null, 
                f.bufferEmpty = 0, f.chunkSize = 1200, f.messageMaker = new k.MessageMaker(f.chunkSize), 
                f.duration = 5e3, null != c) {
                    var g = 50 * c;
                    f.duration = Math.max(Math.min(g, 1e4), 1e3);
                }
                return f.sendTimer = null, f.lastMessage = null, f.intervals = [], f.intervalStart = 0, 
                f.intervalLength = 100, f.intervalBytes = 0, f;
            }
            return f(b, l.TurnTest), g(b, [ {
                key: "initiate",
                value: function() {
                    if (window && window.csioReactNative) {
                        this.handleError(new Error("Not running throughput test for react-native"));
                    } else this.startSend();
                }
            }, {
                key: "handleMessage",
                value: function(a) {
                    var b = this;
                    if (this.isActive()) {
                        this.lastMessage = a, this.receivedBytes += a.length;
                        var c = j.getCurrent();
                        if (this.sendTimer || (this.results.startTimestamp = c, this.sendTimer = setTimeout(function() {
                            b.stop(), b.finished();
                        }, this.duration)), 0 == this.intervalStart && (this.intervalStart = c), this.intervalBytes += a.length, 
                        c - this.intervalStart >= this.intervalLength) {
                            var d = c - this.intervalStart, e = this.averageThroughput(this.intervalBytes, d), f = null;
                            try {
                                f = c - JSON.parse(this.lastMessage).timestamp;
                            } catch (a) {}
                            this.intervals.push({
                                startTimestamp: this.intervalStart,
                                endTimestamp: c,
                                bytesReceived: this.intervalBytes,
                                average: e,
                                rtt: f
                            }), this.intervalStart = c, this.intervalBytes = 0;
                        }
                        this.results.startTimestamp && c - this.results.startTimestamp > this.duration / 2 && (this.secondHalfStart || (this.secondHalfStart = c), 
                        this.secondHalfBytes += a.length);
                    }
                }
            }, {
                key: "handleError",
                value: function(a) {
                    this.stop(), this.failed(a);
                }
            }, {
                key: "averageThroughput",
                value: function(a, b) {
                    return a / (b / 1e3) * 8 / 1024;
                }
            }, {
                key: "bufferListener",
                value: function() {
                    this.sendChannel.removeEventListener("bufferedamountlow", this.bufferListener.bind(this)), 
                    this.fillBuffer();
                }
            }, {
                key: "fillBuffer",
                value: function() {
                    for (0 == this.sendChannel.bufferedAmount && (this.bufferEmpty += 1); this.isActive(); ) {
                        if (this.sendChannel.bufferedAmount > this.bufferFullThreshold) return void (this.usePolling ? setTimeout(this.fillBuffer.bind(this), 250) : this.sendChannel.addEventListener("bufferedamountlow", this.bufferListener.bind(this)));
                        var a = this.messageMaker.make(this.sentBytes);
                        this.sentBytes += a.length, this.send(a);
                    }
                    this.sendChannel.removeEventListener("bufferedamountlow", this.bufferListener.bind(this));
                }
            }, {
                key: "startSend",
                value: function() {
                    this.isActive() && (this.bufferFullThreshold = 1e3 * this.chunkSize, this.sendChannel = this.connection.sendChannel, 
                    this.usePolling = !0, "number" == typeof this.sendChannel.bufferedAmountLowThreshold && (this.usePolling = !1, 
                    this.sendChannel.bufferedAmountLowThreshold = this.bufferFullThreshold / 10), setTimeout(this.fillBuffer.bind(this), 0));
                }
            }, {
                key: "fillResults",
                value: function() {
                    this.results.endTimestamp = j.getCurrent(), this.results.maxDuration = this.duration, 
                    this.results.forceStopped = this.forceStopped, this.results.bufferEmpty = this.bufferEmpty, 
                    this.results.intervals = this.intervals, this.results.bytesPrepared = this.sentBytes, 
                    this.results.bytesReceived = this.receivedBytes;
                    var a = 0, b = 0;
                    this.secondHalfStart && (a = this.results.endTimestamp - this.secondHalfStart, b = this.averageThroughput(this.secondHalfBytes, a));
                    var c = this.results.endTimestamp - this.results.startTimestamp, d = this.averageThroughput(this.receivedBytes, c);
                    b < d && (b = d), this.results.average = b;
                    var e = null;
                    try {
                        e = JSON.parse(this.lastMessage);
                    } catch (a) {
                        return;
                    }
                    if (e) {
                        var f = e.sentBytes + this.lastMessage.length;
                        this.results.bytesSent = f, this.results.fractionLostBytes = 1 - this.receivedBytes / f;
                    } else this.results.bytesSent = -1, this.results.fractionLostBytes = -1;
                }
            }, {
                key: "stop",
                value: function() {
                    this.isActive() && (clearTimeout(this.sendTimer), this.sendTimer = null, h(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "stop", this).call(this), 
                    this.fillResults());
                }
            } ]), b;
        }();
        c.ThroughputTest = m;
    }, {
        "../utility/messageMaker": 7,
        "../utility/timestamps": 14,
        "./turnTest": 5
    } ],
    5: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("bluebird"), g = function() {
            function a(b) {
                d(this, a), this.connection = b, this.active = !1, this.results = {};
            }
            return e(a, [ {
                key: "getResults",
                value: function() {
                    return this.results;
                }
            }, {
                key: "start",
                value: function() {
                    var a = this, b = new f(function(b, c) {
                        a.resolveCb = b, a.rejectCb = c;
                    });
                    return this.connection.setMessageCallback(this.handleMessage.bind(this)), this.connection.setErrorCallback(this.handleError.bind(this)), 
                    this.active = !0, this.forceStopped = !1, this.initiate(), b;
                }
            }, {
                key: "stop",
                value: function() {
                    this.active = !1;
                }
            }, {
                key: "forceStop",
                value: function() {
                    this.forceStopped = !0, this.stop(), this.finished();
                }
            }, {
                key: "isActive",
                value: function() {
                    return this.active;
                }
            }, {
                key: "initiate",
                value: function() {}
            }, {
                key: "handleMessage",
                value: function(a) {}
            }, {
                key: "handleError",
                value: function(a) {}
            }, {
                key: "send",
                value: function(a) {
                    this.connection.send(a);
                }
            }, {
                key: "finished",
                value: function() {
                    this.active = !1, this.resolveCb && (this.resolveCb(), this.resolveCb = null);
                }
            }, {
                key: "failed",
                value: function(a) {
                    this.active = !1, this.rejectCb && (this.rejectCb(a), this.rejectCb = null);
                }
            } ]), a;
        }();
        c.TurnTest = g;
    }, {
        bluebird: 1
    } ],
    6: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.TurnConnection = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./utility/parsedIceCandidate"), g = a("./utility/stats/getstatshandler"), h = a("./utility/stats/detectbrowser"), i = a("bluebird"), j = function() {
            function a(b) {
                d(this, a), this.reset(), this.statshandler = new g.GetStatsHandler(b);
            }
            return e(a, [ {
                key: "reset",
                value: function() {
                    this.disconnect(), this.iceServers = null, this.pctpc1 = null, this.pctpc2 = null, 
                    this.sendChannel = null, this.messageCallback = null, this.errorCallback = null, 
                    this.parsedIceResults = {}, this.resolveCb = null, this.rejectCb = null;
                }
            }, {
                key: "setMessageCallback",
                value: function(a) {
                    this.messageCallback = a;
                }
            }, {
                key: "setErrorCallback",
                value: function(a) {
                    this.errorCallback = a;
                }
            }, {
                key: "send",
                value: function(a) {
                    if (this.sendChannel) try {
                        this.sendChannel.send(a);
                    } catch (a) {
                        this.raiseSendError(a);
                    } else this.raiseSendError(new Error("No send channel"));
                }
            }, {
                key: "raiseSendError",
                value: function(a) {
                    this.errorCallback && this.errorCallback(a);
                }
            }, {
                key: "assignEvent",
                value: function(a, b, c) {
                    a.addEventListener ? a.addEventListener(b, c.bind(this), !1) : a.attachEvent && (b = "on" + b, 
                    a.attachEvent(b, c.bind(this)));
                }
            }, {
                key: "connect",
                value: function(a) {
                    var b = this;
                    this.reset();
                    var c = new i(function(a, c) {
                        b.resolveCb = a, b.rejectCb = c;
                    });
                    this.iceServers = a;
                    var d = null;
                    try {
                        if (RTCPeerConnection ? d = RTCPeerConnection : webkitRTCPeerConnection ? d = webkitRTCPeerConnection : mozRTCPeerConnection ? d = mozRTCPeerConnection : window && window.RTCPeerConnection && (d = window.RTCPeerConnection), 
                        !d) {
                            var e = new Error("RTCPeerConnection not found");
                            return e.continueFlag = !1, this.rejectCb(e), c;
                        }
                    } catch (e) {
                        return e.continueFlag = !1, this.rejectCb(e), c;
                    }
                    var f = {
                        iceTransportPolicy: "all",
                        iceServers: this.iceServers
                    };
                    try {
                        this.pctpc1 = new d(f), this.pctpc2 = new d(f);
                    } catch (e) {
                        return this.rejectDisconnect(!1, e), c;
                    }
                    this.connectionTimer = setTimeout(function() {
                        delete b.connectionTimer, b.rejectDisconnect(!1, new Error("Connection timeout"));
                    }, 3e4);
                    try {
                        this.sendChannel = this.pctpc1.createDataChannel("precalltest", {
                            ordered: !1,
                            maxRetransmits: 0
                        }), this.sendChannel.binaryType = "arraybuffer", this.assignEvent(this.sendChannel, "error", function(a) {
                            b.raiseSendError(a), b.rejectDisconnect(!0, a);
                        }), this.assignEvent(this.pctpc2, "datachannel", function(a) {
                            var c = a.channel;
                            b.assignEvent(c, "open", function(a) {
                                b.resolveCb && (b.resolveCb(), b.resolveCb = null);
                            }), b.assignEvent(c, "close", function(a) {
                                b && b.disconnect && b.disconnect();
                            }), b.assignEvent(c, "message", function(a) {
                                b.messageCallback && b.messageCallback(a.data);
                            }), b.assignEvent(c, "error", function(a) {
                                b.errorCallback && b.errorCallback(a), b.rejectDisconnect(!0, a);
                            });
                        });
                    } catch (e) {
                        return this.rejectDisconnect(!1, e), c;
                    }
                    try {
                        this.assignEvent(this.pctpc1, "icecandidate", function(a) {
                            b.onIceCandidate(b.pctpc1, a);
                        }), this.assignEvent(this.pctpc1, "iceconnectionstatechange", function(a) {
                            b.onIceStateChange(b.pctpc1, a);
                        }), this.assignEvent(this.pctpc2, "icecandidate", function(a) {
                            b.onIceCandidate(b.pctpc2, a);
                        }), this.assignEvent(this.pctpc2, "iceconnectionstatechange", function(a) {
                            b.onIceStateChange(b.pctpc2, a);
                        }), this.pctpc1.createOffer().then(function(a, c) {
                            b.onCreateOfferSuccess(a);
                        }, function(a) {
                            b.onCreateOfferError(b.pctpc1, a);
                        });
                    } catch (e) {
                        return this.rejectDisconnect(!1, e), c;
                    }
                    return c;
                }
            }, {
                key: "rejectDisconnect",
                value: function(a, b) {
                    this.disconnect(), this.rejectCb && (b.continueFlag = a, this.rejectCb(b)), this.resolveCb = null, 
                    this.rejectCb = null;
                }
            }, {
                key: "disconnect",
                value: function() {
                    if (clearTimeout(this.connectionTimer), clearTimeout(this.iceTimer), this.pctpc1) try {
                        this.pctpc1.close();
                    } catch (a) {}
                    if (this.pctpc1 = null, this.pctpc2) try {
                        this.pctpc2.close();
                    } catch (a) {}
                    this.pctpc2 = null;
                }
            }, {
                key: "getName",
                value: function(a) {
                    return a === this.pctpc1 ? "pctpc1" : "pctpc2";
                }
            }, {
                key: "getOtherPc",
                value: function(a) {
                    return a === this.pctpc1 ? this.pctpc2 : this.pctpc1;
                }
            }, {
                key: "onCreateOfferError",
                value: function(a, b) {
                    this.rejectDisconnect(!1, b);
                }
            }, {
                key: "onCreateAnswerError",
                value: function(a, b) {
                    this.rejectDisconnect(!1, b);
                }
            }, {
                key: "onCreateOfferSuccess",
                value: function(a) {
                    var b = this;
                    try {
                        this.pctpc1.setLocalDescription(a).then(function() {
                            b.onSetLocalSuccess(b.pctpc1);
                        }, function(a) {
                            b.onSetSessionDescriptionError(b.pctpc1, a);
                        }), this.pctpc2.setRemoteDescription(a).then(function() {
                            b.onSetRemoteSuccess(b.pctpc2);
                        }, function(a) {
                            b.onSetRemoteSessionDescriptionError(b.pctpc2, a);
                        }), this.pctpc2.createAnswer().then(function(a) {
                            b.onCreateAnswerSuccess(a);
                        }, function(a) {
                            b.onCreateAnswerError(b.pctpc2, a);
                        });
                    } catch (a) {
                        this.rejectDisconnect(!1, a);
                    }
                }
            }, {
                key: "onSetLocalSuccess",
                value: function(a) {}
            }, {
                key: "onSetRemoteSuccess",
                value: function(a) {}
            }, {
                key: "onSetSessionDescriptionError",
                value: function(a, b) {
                    this.rejectDisconnect(!1, b);
                }
            }, {
                key: "onSetRemoteSessionDescriptionError",
                value: function(a, b) {
                    this.rejectDisconnect(!1, b);
                }
            }, {
                key: "onCreateAnswerSuccess",
                value: function(a) {
                    var b = this;
                    try {
                        this.pctpc2.setLocalDescription(a).then(function() {
                            b.onSetLocalSuccess(b.pctpc2);
                        }, function(a) {
                            b.onSetSessionDescriptionError(b.pctpc2, a);
                        }), this.pctpc1.setRemoteDescription(a).then(function() {
                            b.onSetRemoteSuccess(b.pctpc1);
                        }, function(a) {
                            b.onSetRemoteSessionDescriptionError(b.pctpc1, a);
                        });
                    } catch (a) {
                        this.rejectDisconnect(!1, a);
                    }
                }
            }, {
                key: "onIceCandidate",
                value: function(a, b) {
                    var c = this;
                    try {
                        if (!b.candidate) return;
                        var d = new f.ParsedIceCandidate(b.candidate);
                        if (a == this.pctpc1 && this.statshandler.codeBase == h.Constants.codeBaseType.chrome && (d.isRelay() && (d.isTypeTransportUdp() && (this.parsedIceResults.relayUdpGathered = !0), 
                        d.isTypeTransportTcp() && (this.parsedIceResults.relayTcpGathered = !0), d.isTypeTransportTls() && (this.parsedIceResults.relayTlsGathered = !0)), 
                        d.isServerReflexive() && (this.parsedIceResults.srflxGathered = !0)), !d.isRelay()) return;
                        this.getOtherPc(a).addIceCandidate(b.candidate).then(function() {
                            c.onAddIceCandidateSuccess(a);
                        }, function(b) {
                            c.onAddIceCandidateError(a, b, d.isRelay());
                        });
                    } catch (b) {
                        this.rejectDisconnect(!1, b);
                    }
                }
            }, {
                key: "onAddIceCandidateSuccess",
                value: function(a) {}
            }, {
                key: "onAddIceCandidateError",
                value: function(a, b, c) {
                    c && this.rejectDisconnect(!1, b);
                }
            }, {
                key: "onIceStateChange",
                value: function(a, b) {
                    var c = this;
                    try {
                        var d = "(?)";
                        a && (d = a.iceConnectionState), "failed" === d && this.rejectDisconnect(!0, new Error("ICE failure")), 
                        "checking" !== d || this.iceTimer || (this.iceTimer = setTimeout(function() {
                            delete c.iceTimer, c.rejectDisconnect(!0, new Error("ICE timeout"));
                        }, 1e4)), "completed" !== d && "connected" !== d || (clearTimeout(this.iceTimer), 
                        delete this.iceTimer);
                    } catch (a) {
                        this.rejectDisconnect(!1, a);
                    }
                }
            }, {
                key: "getIceResults",
                value: function() {
                    var a = this;
                    return new i(function(b, c) {
                        for (var d = JSON.parse(JSON.stringify(a.iceServers)), e = 0; e < d.length; e++) {
                            var f = d[e];
                            d.hasOwnProperty(f) || delete f.credential;
                        }
                        var g = {
                            turnIpAddress: "",
                            turnIpVersion: "",
                            turnTransport: "",
                            iceServers: d,
                            ipv6Supported: !1,
                            ipv4Supported: !1,
                            relayTlsGathered: !1,
                            relayTcpGathered: !1,
                            relayUdpGathered: !1,
                            srflxGathered: !1,
                            relayTlsSuccess: !1,
                            relayTcpSuccess: !1,
                            relayUdpSuccess: !1,
                            srflxSuccess: !1
                        };
                        for (var h in a.parsedIceResults) a.parsedIceResults.hasOwnProperty(h) && (g[h] = a.parsedIceResults[h]);
                        a.pctpc1 ? a.statshandler.getIceCandidates(a.pctpc1).then(function(a) {
                            for (var c = 0; c < a.iceCandidatePairs.length; c++) {
                                var d = a.iceCandidatePairs[c];
                                if (d.googActiveConnection || d.selected) for (var e = 0; e < a.localCandidates.length; e++) {
                                    var f = a.localCandidates[e], h = null;
                                    if (h = f.ip ? f.ip : f.ipAddress, f.id == d.localCandidateId) {
                                        var i = -1 !== (g.turnIpAddress = h).indexOf(":");
                                        g.turnIpVersion = i ? "ipv6" : "ipv4", g.turnTransport = f.mozLocalTransport;
                                    }
                                    "relay" !== f.candidateType && "relayed" !== f.candidateType || ("udp" === f.mozLocalTransport && (g.relayUdpSuccess = !0), 
                                    "tcp" === f.mozLocalTransport && (g.relayTcpSuccess = !0), "tls" === f.mozLocalTransport && (g.relayTlsSuccess = !0)), 
                                    -1 !== h.indexOf(":") ? g.ipv6Supported = !0 : g.ipv4Supported = !0;
                                }
                            }
                            for (var j = 0; j < a.localCandidates.length; j++) {
                                var k = a.localCandidates[j];
                                "relay" !== k.candidateType && "relayed" !== k.candidateType || ("udp" === k.mozLocalTransport && (g.relayUdpGathered = !0), 
                                "tcp" === k.mozLocalTransport && (g.relayTcpGathered = !0), "tls" === k.mozLocalTransport && (g.relayTlsGathered = !0)), 
                                "srflx" !== k.candidateType && "serverreflexive" !== k.candidateType || (g.srflxGathered = !0);
                            }
                            for (var l = 0; l < a.iceCandidatePairs.length; l++) {
                                var m = a.iceCandidatePairs[l];
                                if ("succeeded" === m.state) for (var n = 0; n < a.localCandidates.length; n++) {
                                    var o = a.localCandidates[n];
                                    o.id == m.localCandidateId && ("relay" !== o.candidateType && "relayed" !== o.candidateType || ("udp" === o.mozLocalTransport && (g.relayUdpSuccess = !0), 
                                    "tcp" === o.mozLocalTransport && (g.relayTcpSuccess = !0), "tls" === o.mozLocalTransport && (g.relayTlsSuccess = !0)), 
                                    "srflx" !== o.candidateType && "serverreflexive" !== o.candidateType || (g.srflxSuccess = !0));
                                }
                            }
                            b(g);
                        }, function(a) {
                            c(a);
                        }) : c(new Error("PC not available for stats"));
                    }, function(a) {
                        reject(a);
                    });
                }
            } ]), a;
        }();
        c.TurnConnection = j;
    }, {
        "./utility/parsedIceCandidate": 9,
        "./utility/stats/detectbrowser": 11,
        "./utility/stats/getstatshandler": 12,
        bluebird: 1
    } ],
    7: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a) {
            for (var b = "", c = 0; c < a; c++) b += String.fromCharCode(35 + 58 * Math.random());
            return b;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.randomAsciiString = c.MessageMaker = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../utility/timestamps"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = function() {
            function a() {
                var b = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 1200;
                d(this, a), this.message = {
                    timestamp: "",
                    sentBytes: 1e4,
                    padding: ""
                };
                var c = e(b - h.getCurrent().toString().length - JSON.stringify(this.message).length);
                this.message.padding = c;
            }
            return f(a, [ {
                key: "make",
                value: function(a) {
                    return this.message.timestamp = h.getCurrent(), this.message.sentBytes = a, JSON.stringify(this.message);
                }
            } ]), a;
        }();
        c.MessageMaker = i, c.randomAsciiString = e;
    }, {
        "../utility/timestamps": 14
    } ],
    8: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.OnlineCheck = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./timestamps"), g = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(f), h = function() {
            function a() {
                d(this, a), this.active = !1;
            }
            return e(a, [ {
                key: "start",
                value: function() {
                    var a = this;
                    this.active = !0, this.onlineCheck = [], window && window.addEventListener && "function" == typeof window.addEventListener && (window.addEventListener("offline", function() {
                        a.addEntry();
                    }), window.addEventListener("online", function() {
                        a.addEntry();
                    }), this.addEntry());
                }
            }, {
                key: "addEntry",
                value: function() {
                    if (this.active) {
                        var a = g.getCurrent();
                        if (navigator && navigator.onLine) {
                            var b = navigator.onLine;
                            this.onlineCheck.push({
                                timestamp: a,
                                online: b
                            });
                        }
                    }
                }
            }, {
                key: "stop",
                value: function() {
                    var a = this;
                    return this.active = !1, window && window.removeEventListener && "function" == typeof window.removeEventListener && (window.removeEventListener("offline", function() {
                        a.addEntry();
                    }), window.removeEventListener("online", function() {
                        a.addEntry();
                    })), this.onlineCheck;
                }
            } ]), a;
        }();
        c.OnlineCheck = h;
    }, {
        "./timestamps": 14
    } ],
    9: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a(b) {
                d(this, a), this.iceCandidateStr = b.candidate, this.parse();
            }
            return e(a, [ {
                key: "parse",
                value: function() {
                    var a = this.iceCandidateStr.split(" ");
                    a.length < 8 || (this.protocol = "1" === a[1] ? "rtp" : "rtcp", this.transport = a[2], 
                    this.typeTransport = this.extractTypeTransport(a[3]), this.ipv6 = -1 !== a[4].indexOf(":"), 
                    this.ipAddress = a[4], this.port = a[5], this.type = a[7]);
                }
            }, {
                key: "extractTypeTransport",
                value: function(a) {
                    var b = "None", c = a >> 24;
                    if ("rtp" === this.protocol && 0 <= c && c <= 2) switch (c) {
                      case 0:
                        b = "TLS";
                        break;

                      case 1:
                        b = "TCP";
                        break;

                      case 2:
                        b = "UDP";
                    }
                    return b;
                }
            }, {
                key: "getString",
                value: function() {
                    return this.iceCandidateStr;
                }
            }, {
                key: "getType",
                value: function() {
                    return this.type;
                }
            }, {
                key: "isHost",
                value: function() {
                    return "host" === this.type.toLowerCase();
                }
            }, {
                key: "isServerReflexive",
                value: function() {
                    return "srflx" === this.type.toLowerCase();
                }
            }, {
                key: "isPeerReflexive",
                value: function() {
                    return "prflx" === this.type.toLowerCase();
                }
            }, {
                key: "isRelay",
                value: function() {
                    return "relay" === this.type.toLowerCase() || "relayed" === this.type.toLowerCase();
                }
            }, {
                key: "getTypeTransport",
                value: function() {
                    return this.typeTransport;
                }
            }, {
                key: "isTypeTransportUdp",
                value: function() {
                    return "UDP" === this.typeTransport;
                }
            }, {
                key: "isTypeTransportTcp",
                value: function() {
                    return "TCP" === this.typeTransport;
                }
            }, {
                key: "isTypeTransportTls",
                value: function() {
                    return "TLS" === this.typeTransport;
                }
            }, {
                key: "getTransport",
                value: function() {
                    return this.transport;
                }
            }, {
                key: "isUdp",
                value: function() {
                    return "udp" === this.transport.toLowerCase();
                }
            }, {
                key: "isTcp",
                value: function() {
                    return "tcp" === this.transport.toLowerCase();
                }
            }, {
                key: "getProtocol",
                value: function() {
                    return this.protocol;
                }
            }, {
                key: "isRtp",
                value: function() {
                    return "rtp" === this.protocol;
                }
            }, {
                key: "isRtcp",
                value: function() {
                    return "rtcp" === this.protocol;
                }
            }, {
                key: "isIpv6",
                value: function() {
                    return this.ipv6;
                }
            }, {
                key: "getIpAddress",
                value: function() {
                    return this.ipAddress;
                }
            }, {
                key: "getPort",
                value: function() {
                    return this.port;
                }
            } ]), a;
        }();
        c.ParsedIceCandidate = f;
    }, {} ],
    10: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ResultsHandler = void 0;
        var e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
            return typeof a;
        } : function(a) {
            return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
        }, f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("./timestamps"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = a("./messageMaker"), j = function() {
            function a() {
                d(this, a), this.start = h.getCurrent(), this.id = Math.trunc(this.start) + "-" + (0, 
                i.randomAsciiString)(20), this.version = "1.3.1", this.failures = [], this.results = {}, 
                this.forceStopped = !0, this.provider = "callstats";
            }
            return f(a, [ {
                key: "setProvider",
                value: function(a) {
                    a && (this.provider = a);
                }
            }, {
                key: "getResults",
                value: function() {
                    return {
                        id: this.id,
                        version: this.version,
                        forceStopped: this.forceStopped,
                        startTimestamp: this.start,
                        endTimestamp: h.getCurrent(),
                        failures: this.failures,
                        tests: this.results,
                        provider: this.provider
                    };
                }
            }, {
                key: "getFailureNumber",
                value: function() {
                    return this.failures.length;
                }
            }, {
                key: "getId",
                value: function() {
                    return this.id;
                }
            }, {
                key: "add",
                value: function(a, b) {
                    (this.results[a] = b).hasOwnProperty("forceStopped") && (this.forceStopped = b.forceStopped);
                }
            }, {
                key: "failure",
                value: function(a) {
                    "object" === (void 0 === a ? "undefined" : e(a)) && (a = a.toString());
                    var b = {
                        timestamp: h.getCurrent(),
                        reason: a
                    };
                    this.failures.push(b);
                }
            } ]), a;
        }();
        c.ResultsHandler = j;
    }, {
        "./messageMaker": 7,
        "./timestamps": 14
    } ],
    11: [ function(a, b, c) {
        "use strict";
        function d() {
            var a = e.browserName.chrome, b = null, c = null, d = null, f = null, g = e.codeBaseType.chrome;
            if (window && (!window.navigator || !window.navigator.userAgent || window.csioReactNative)) return window && window.csioGetOsName && (b = window.csioGetOsName()), 
            window && window.csioGetOsVer && (c = window.csioGetOsVer()), window && window.csioReactNative && (d = "react-native"), 
            {
                browserName: a,
                codeBase: g,
                os: b,
                osVersion: c,
                userAgent: d
            };
            var h = (d = navigator.userAgent).toLowerCase(), i = void 0, j = void 0;
            (f = navigator.appVersion) && (i = f.toLowerCase(), j = "" + parseFloat(i));
            var k = void 0, l = "Version";
            -1 !== (k = h.indexOf("opera")) ? (a = e.browserName.opera, j = h.substring(k + 6), 
            -1 !== (k = h.indexOf(l)) && (j = h.substring(k + 8)), g = e.codeBaseType.chrome) : -1 !== (k = h.indexOf("opr")) ? (a = e.browserName.opera, 
            j = h.substring(k + 4), -1 !== (k = h.indexOf(l)) && (j = h.substring(k + 8)), g = e.codeBaseType.chrome) : -1 !== (k = h.indexOf("msie")) ? (a = e.browserName.msie, 
            j = h.substring(k + 5), g = e.codeBaseType.chrome) : -1 !== (k = h.indexOf("edge")) ? (a = e.browserName.edge, 
            j = h.substring(k + 5), g = e.codeBaseType.edge) : -1 !== (k = h.indexOf("chrome")) ? (a = e.browserName.chrome, 
            j = h.substring(k + 7), g = e.codeBaseType.chrome) : -1 !== (k = h.indexOf("safari")) ? (a = e.browserName.safari, 
            j = h.substring(k + 7), -1 !== (k = h.indexOf(l)) && (j = h.substring(k + 8)), g = e.codeBaseType.chrome) : -1 !== (k = h.indexOf("firefox")) ? (a = e.browserName.firefox, 
            j = h.substring(k + 8), g = e.codeBaseType.firefox) : -1 !== (k = h.indexOf("trident")) && (a = e.browserName.msie, 
            k = h.indexOf("rv"), j = h.substring(k + 3, k + 7), g = e.codeBaseType.chrome);
            var m = [ {
                s: "Windows 3.11",
                r: /win16/
            }, {
                s: "Windows 95",
                r: /(windows 95|win95|windows_95)/
            }, {
                s: "Windows ME",
                r: /(win 9x 4.90|windows me)/
            }, {
                s: "Windows 98",
                r: /(windows 98|win98)/
            }, {
                s: "Windows CE",
                r: /windows ce/
            }, {
                s: "Windows 2000",
                r: /(windows nt 5.0|windows 2000)/
            }, {
                s: "Windows XP",
                r: /(windows nt 5.1|windows xp)/
            }, {
                s: "Windows Server 2003",
                r: /windows nt 5.2/
            }, {
                s: "Windows Vista",
                r: /windows nt 6.0/
            }, {
                s: "Windows 7",
                r: /(windows 7|windows nt 6.1)/
            }, {
                s: "Windows 8.1",
                r: /(windows 8.1|windows nt 6.3)/
            }, {
                s: "Windows 8",
                r: /(windows 8|windows nt 6.2)/
            }, {
                s: "Windows 10",
                r: /(windows 10|windows nt 10.0)/
            }, {
                s: "Windows NT 4.0",
                r: /(windows nt 4.0|winnt4.0|winnt|windows nt)/
            }, {
                s: "Windows ME",
                r: /windows me/
            }, {
                s: "Android",
                r: /android/
            }, {
                s: "Open BSD",
                r: /openbsd/
            }, {
                s: "Sun OS",
                r: /sunos/
            }, {
                s: "Linux",
                r: /(linux|x11)/
            }, {
                s: "iOS",
                r: /(iphone|ipad|ipod)/
            }, {
                s: "Mac OS X",
                r: /mac os x/
            }, {
                s: "Mac OS",
                r: /(macppc|macintel|mac_powerpc|macintosh)/
            }, {
                s: "QNX",
                r: /qnx/
            }, {
                s: "UNIX",
                r: /unix/
            }, {
                s: "BeOS",
                r: /beos/
            }, {
                s: "OS/2",
                r: /os\/2/
            }, {
                s: "Search Bot",
                r: /(nuhk|googlebot|yammybot|openbot|slurp|msnbot|ask jeeves\/teoma|ia_archiver)/
            } ], n = void 0, o = void 0;
            for (n in m) if (m.hasOwnProperty(n) && (o = m[n]).r.test(h)) {
                b = o.s;
                break;
            }
            switch (b && /Windows/.test(b) && (c = /Windows (.*)/.exec(b)[1], b = e.osName.windows), 
            b) {
              case e.osName.mac:
                c = /mac os x (10[\.\_\d]+)/.exec(h)[1];
                break;

              case e.osName.android:
                c = /android ([\.\_\d]+)/.exec(h)[1];
                break;

              case e.osName.ios:
                if (!i) break;
                if (!(c = /os (\d+)_(\d+)_?(\d+)?/.exec(i))) break;
                c = c[1] + "." + c[2] + "." + (0 | c[3]);
            }
            return {
                browserName: a,
                browserVersion: j.toString(),
                os: b,
                osVersion: c,
                codeBase: g,
                userAgent: d
            };
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.detect = d;
        var e = c.Constants = {
            codeBaseType: {
                chrome: "Chrome",
                firefox: "Firefox",
                edge: "Edge",
                plugin: "Plugin"
            },
            browserName: {
                chrome: "Chrome",
                firefox: "Firefox",
                edge: "Edge",
                msie: "Microsoft Internet Explorer",
                safari: "Safari"
            },
            osName: {
                windows: "Windows",
                mac: "Mac OS X",
                android: "Android",
                ios: "iOS"
            }
        };
    }, {} ],
    12: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.GetStatsHandler = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./detectbrowser"), g = a("./statsadapter"), h = a("bluebird"), i = function() {
            function a(b) {
                d(this, a), this.codeBase = b.codeBase, this.browserName = b.browserName, this.adapter = new g.StatsAdapter(this.codeBase, this.browserName), 
                this.isPromiseBased = !0;
            }
            return e(a, [ {
                key: "getIceCandidates",
                value: function(a) {
                    var b = this;
                    return new h(function(c, d) {
                        b.csioGetStats(b.iceCandidatesHandler.bind(b), a, function(a) {
                            c(a);
                        });
                    });
                }
            }, {
                key: "iceCandidatesHandler",
                value: function(a, b) {
                    b(this.adapter.getIceCandidates(a));
                }
            }, {
                key: "csioGetStats",
                value: function(a, b, c) {
                    var d = f.Constants.codeBaseType.firefox, e = f.Constants.codeBaseType.chrome, g = f.Constants.codeBaseType.edge, h = f.Constants.browserName.safari;
                    b && (this.codeBase === d ? this.getStatsFirefox(a, b, c) : this.browserName === h ? this.getStatsSafari(a, b, c) : this.codeBase === e ? this.getStatsChrome(a, b, c) : this.codeBase === g && this.getStatsEdge(a, b, c));
                }
            }, {
                key: "getStatsFirefox",
                value: function(a, b, c) {
                    var d = this;
                    if (d.isPromiseBased) try {
                        b.getStats().then(function(b) {
                            a(b, c);
                        }).catch(function(e) {
                            d.isPromiseBased = !1, b.getStats(null, function(b) {
                                a(b, c);
                            }, function() {});
                        });
                    } catch (e) {
                        d.isPromiseBased = !1, b.getStats(null, function(b) {
                            a(b, c);
                        }, function() {});
                    } else b.getStats(null, function(b) {
                        a(b, c);
                    }, function() {});
                }
            }, {
                key: "getStatsChrome",
                value: function(a, b, c) {
                    var d = this;
                    if (window && window.csioReactNative) b.getStats(null, function(b) {
                        a(b, c);
                    }, function(a) {}); else if (d.isPromiseBased) try {
                        b.getStats().then(function(b) {
                            a(b, c);
                        }).catch(function(e) {
                            d.isPromiseBased = !1, b.getStats(function(b) {
                                a(b, c);
                            });
                        });
                    } catch (d) {
                        isPromiseBased = !1, b.getStats(function(b) {
                            a(b, c);
                        });
                    } else b.getStats(function(b) {
                        a(b, c);
                    });
                }
            }, {
                key: "getStatsEdge",
                value: function(a, b, c) {
                    b.getStats().then(function(b) {
                        a(b, c);
                    }).catch(function(a) {});
                }
            }, {
                key: "getStatsSafari",
                value: function(a, b, c) {
                    b.getStats().then(function(b) {
                        a(b, c);
                    }).catch(function(a) {});
                }
            } ]), a;
        }();
        c.GetStatsHandler = i;
    }, {
        "./detectbrowser": 11,
        "./statsadapter": 13,
        bluebird: 1
    } ],
    13: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.StatsAdapter = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./detectbrowser"), g = function() {
            function a(b, c) {
                d(this, a), this.codeBase = b, this.browser = c;
            }
            return e(a, [ {
                key: "getIceCandidates",
                value: function(a) {
                    if (!a) return {
                        localCandidates: [],
                        remoteCandidates: [],
                        iceCandidatePairs: []
                    };
                    var b = this.extractRawStats(a);
                    return this.processRawStatsForIceInfo(b);
                }
            }, {
                key: "extractRawStats",
                value: function(a) {
                    var b = [], c = void 0, d = f.Constants.codeBaseType.firefox, e = f.Constants.codeBaseType.chrome, g = f.Constants.browserName.safari;
                    if (this.codeBase === d && this.browser !== g) a.forEach(function(a) {
                        b.push(a);
                    }); else if (this.codeBase === e && this.browser !== g) a && a.result ? b = a.result() : a && a.forEach && (b = [], 
                    a.forEach(function(a) {
                        b.push(a);
                    })); else for (c in a) a.hasOwnProperty(c) && b.push(a[c]);
                    return b;
                }
            }, {
                key: "processRawStatsForIceInfo",
                value: function(a) {
                    var b = [], c = [], d = [], e = void 0;
                    if (!a) return {
                        localCandidates: b,
                        remoteCandidates: c,
                        iceCandidatePairs: d
                    };
                    for (var f = 0; f < a.length; ++f) {
                        var g = this.getParsedStats(a[f]), h = this.statsClassifier(g);
                        if (h.candidatePair) d.push(h.candidatePair); else if (h.transportStats) {
                            if ("transport" === h.transportStats.type) {
                                e = h.transportStats.selectedCandidatePairId;
                                continue;
                            }
                            d.push(h.transportStats);
                        } else if (h.localCandidate) {
                            var i = h.localCandidate;
                            if ("relay" == i.candidateType || "relayed" == i.candidateType) {
                                if (!i.mozLocalTransport) {
                                    var j = i.priority >> 24;
                                    i.mozLocalTransport = this.formatRelayType(j);
                                }
                                i.mozLocalTransport = i.mozLocalTransport.toLowerCase();
                            }
                            b.push(i);
                        } else h.remoteCandidate && c.push(h.remoteCandidate);
                    }
                    if (e) for (var k = 0; k < d.length; ++k) d[k].id === e && (d[k].googActiveConnection = "true");
                    return {
                        localCandidates: b,
                        remoteCandidates: c,
                        iceCandidatePairs: d
                    };
                }
            }, {
                key: "getParsedStats",
                value: function(a) {
                    var b = {};
                    if (a.timestamp instanceof Date && (b.timestamp = a.timestamp.getTime().toString()), 
                    a.type && (b.type = a.type), a.names) for (var c = a.names(), d = 0; d < c.length; ++d) b[c[d]] = a.stat(c[d]); else Object.assign(b, a);
                    if (b.values) {
                        for (var e = 0; e < b.values.length; e++) {
                            var f = b.values[e];
                            Object.assign(b, f);
                        }
                        delete b.values;
                    }
                    return b;
                }
            }, {
                key: "statsClassifier",
                value: function(a) {
                    var b = {}, c = function() {
                        for (var b = arguments.length, c = Array(b), d = 0; d < b; d++) c[d] = arguments[d];
                        for (var e = 0; e < c.length; e++) {
                            var f = c[e];
                            if (a.type === f) return !0;
                        }
                        return !1;
                    }, d = c("inbound-rtp", "inboundrtp"), e = "true" === a.isRemote || !0 === a.isRemote;
                    return d || c("outbound-rtp", "outboundrtp") ? (b.tracks = {}, b.tracks.data = a, 
                    b.tracks.ssrc = a.ssrc, b.tracks.streamType = d ? "inbound" : "outbound", b.tracks.reportType = "local", 
                    void 0 !== a.isRemote && (b.tracks.reportType = e ? "remote" : "local")) : c("candidatepair") && a.selected ? b.transportStats = a : c("localcandidate", "local-candidate") ? b.localCandidate = a : c("remotecandidate", "remote-candidate") ? b.remoteCandidate = a : c("transport", "googCandidatePair") ? b.transportStats = a : c("VideoBwe") ? b.bwe = a : c("track") ? b.trackStats = a : c("candidate-pair") ? b.candidatePair = a : c("codec") ? b.codec = a : c("ssrc") && (b.tracks = {}, 
                    b.tracks.data = a, b.tracks.ssrc = a.ssrc, b.tracks.reportType = "local", b.tracks.streamType = a.bytesSent ? "outbound" : "inbound"), 
                    b;
                }
            }, {
                key: "formatRelayType",
                value: function(a) {
                    var b = "none";
                    switch (a) {
                      case 0:
                        b = "tls";
                        break;

                      case 1:
                        b = "tcp";
                        break;

                      case 2:
                        b = "udp";
                    }
                    return b;
                }
            } ]), a;
        }();
        c.StatsAdapter = g;
    }, {
        "./detectbrowser": 11
    } ],
    14: [ function(a, b, c) {
        "use strict";
        function d() {
            return window && window.performance && window.performance.now && window.performance.timing && window.performance.timing.navigationStart ? window.performance.now() + window.performance.timing.navigationStart : Date.now();
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.getCurrent = d;
    }, {} ],
    15: [ function(a, b, c) {
        function d() {
            throw new Error("setTimeout has not been defined");
        }
        function e() {
            throw new Error("clearTimeout has not been defined");
        }
        function f(a) {
            if (l === setTimeout) return setTimeout(a, 0);
            if ((l === d || !l) && setTimeout) return l = setTimeout, setTimeout(a, 0);
            try {
                return l(a, 0);
            } catch (b) {
                try {
                    return l.call(null, a, 0);
                } catch (b) {
                    return l.call(this, a, 0);
                }
            }
        }
        function g(a) {
            if (m === clearTimeout) return clearTimeout(a);
            if ((m === e || !m) && clearTimeout) return m = clearTimeout, clearTimeout(a);
            try {
                return m(a);
            } catch (b) {
                try {
                    return m.call(null, a);
                } catch (b) {
                    return m.call(this, a);
                }
            }
        }
        function h() {
            q && o && (q = !1, o.length ? p = o.concat(p) : r = -1, p.length && i());
        }
        function i() {
            if (!q) {
                var a = f(h);
                q = !0;
                for (var b = p.length; b; ) {
                    for (o = p, p = []; ++r < b; ) o && o[r].run();
                    r = -1, b = p.length;
                }
                o = null, q = !1, g(a);
            }
        }
        function j(a, b) {
            this.fun = a, this.array = b;
        }
        function k() {}
        var l, m, n = b.exports = {};
        !function() {
            try {
                l = "function" == typeof setTimeout ? setTimeout : d;
            } catch (a) {
                l = d;
            }
            try {
                m = "function" == typeof clearTimeout ? clearTimeout : e;
            } catch (a) {
                m = e;
            }
        }();
        var o, p = [], q = !1, r = -1;
        n.nextTick = function(a) {
            var b = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var c = 1; c < arguments.length; c++) b[c - 1] = arguments[c];
            p.push(new j(a, b)), 1 !== p.length || q || f(i);
        }, j.prototype.run = function() {
            this.fun.apply(null, this.array);
        }, n.title = "browser", n.browser = !0, n.env = {}, n.argv = [], n.version = "", 
        n.versions = {}, n.on = k, n.addListener = k, n.once = k, n.off = k, n.removeListener = k, 
        n.removeAllListeners = k, n.emit = k, n.prependListener = k, n.prependOnceListener = k, 
        n.listeners = function(a) {
            return [];
        }, n.binding = function(a) {
            throw new Error("process.binding is not supported");
        }, n.cwd = function() {
            return "/";
        }, n.chdir = function(a) {
            throw new Error("process.chdir is not supported");
        }, n.umask = function() {
            return 0;
        };
    }, {} ],
    16: [ function(a, b, c) {
        (function(b, d) {
            function e(a, b) {
                this._id = a, this._clearFn = b;
            }
            var f = a("process/browser.js").nextTick, g = Function.prototype.apply, h = Array.prototype.slice, i = {}, j = 0;
            c.setTimeout = function() {
                return new e(g.call(setTimeout, window, arguments), clearTimeout);
            }, c.setInterval = function() {
                return new e(g.call(setInterval, window, arguments), clearInterval);
            }, c.clearTimeout = c.clearInterval = function(a) {
                a.close();
            }, e.prototype.unref = e.prototype.ref = function() {}, e.prototype.close = function() {
                this._clearFn.call(window, this._id);
            }, c.enroll = function(a, b) {
                clearTimeout(a._idleTimeoutId), a._idleTimeout = b;
            }, c.unenroll = function(a) {
                clearTimeout(a._idleTimeoutId), a._idleTimeout = -1;
            }, c._unrefActive = c.active = function(a) {
                clearTimeout(a._idleTimeoutId);
                var b = a._idleTimeout;
                b >= 0 && (a._idleTimeoutId = setTimeout(function() {
                    a._onTimeout && a._onTimeout();
                }, b));
            }, c.setImmediate = "function" == typeof b ? b : function(a) {
                var b = j++, d = !(arguments.length < 2) && h.call(arguments, 1);
                return i[b] = !0, f(function() {
                    i[b] && (d ? a.apply(null, d) : a.call(null), c.clearImmediate(b));
                }), b;
            }, c.clearImmediate = "function" == typeof d ? d : function(a) {
                delete i[a];
            };
        }).call(this, a("timers").setImmediate, a("timers").clearImmediate);
    }, {
        "process/browser.js": 15,
        timers: 16
    } ],
    17: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a() {
                var b = this;
                d(this, a), this.batteryManager = null, "function" == typeof navigator.getBattery && navigator.getBattery().then(function(a) {
                    b.batteryManager = a;
                });
            }
            return e(a, [ {
                key: "getLevel",
                value: function() {
                    return this.batteryManager ? this.batteryManager.level : -1;
                }
            }, {
                key: "getCharging",
                value: function() {
                    return this.batteryManager ? this.batteryManager.charging : null;
                }
            } ]), a;
        }();
        c.Battery = f;
    }, {} ],
    18: [ function(a, b, c) {
        "use strict";
        function d() {
            var a = f.browserName.chrome, b = null, c = null, d = null, e = null, g = f.codeBaseType.chrome;
            if (!window.navigator.userAgent || window.csioReactNative) return window && window.csioGetOsName && (b = window.csioGetOsName()), 
            window && window.csioGetOsVer && (c = window.csioGetOsVer()), window && window.csioReactNative && (d = "react-native"), 
            {
                browserName: a,
                codeBase: g,
                os: b,
                osVersion: c,
                userAgent: d,
                browserVersion: null
            };
            d = navigator.userAgent;
            var h = d.toLowerCase();
            e = navigator.appVersion;
            var i = void 0, j = void 0;
            e && (i = e.toLowerCase(), j = "" + parseFloat(i));
            var k = void 0;
            -1 !== (k = h.indexOf("opera")) ? (a = f.browserName.opera, j = h.substring(k + 6), 
            -1 !== (k = h.indexOf("Version")) && (j = h.substring(k + 8)), g = f.codeBaseType.chrome) : -1 !== (k = h.indexOf("opr")) ? (a = f.browserName.opera, 
            j = h.substring(k + 4), -1 !== (k = h.indexOf("Version")) && (j = h.substring(k + 8)), 
            g = f.codeBaseType.chrome) : -1 !== (k = h.indexOf("msie")) ? (a = f.browserName.msie, 
            j = h.substring(k + 5), g = f.codeBaseType.chrome) : -1 !== (k = h.indexOf("edge")) ? (a = f.browserName.edge, 
            j = h.substring(k + 5), g = f.codeBaseType.edge) : -1 !== (k = h.indexOf("chrome")) ? (a = f.browserName.chrome, 
            j = h.substring(k + 7), g = f.codeBaseType.chrome) : -1 !== (k = h.indexOf("safari")) ? (a = f.browserName.safari, 
            j = h.substring(k + 7), -1 !== (k = h.indexOf("Version")) && (j = h.substring(k + 8)), 
            g = f.codeBaseType.chrome) : -1 !== (k = h.indexOf("firefox")) ? (a = f.browserName.firefox, 
            j = h.substring(k + 8), g = f.codeBaseType.firefox) : -1 !== (k = h.indexOf("trident")) && (a = f.browserName.msie, 
            k = h.indexOf("rv"), j = h.substring(k + 3, k + 7), g = f.codeBaseType.chrome);
            var l = [ {
                s: "Windows 3.11",
                r: /win16/
            }, {
                s: "Windows 95",
                r: /(windows 95|win95|windows_95)/
            }, {
                s: "Windows ME",
                r: /(win 9x 4.90|windows me)/
            }, {
                s: "Windows 98",
                r: /(windows 98|win98)/
            }, {
                s: "Windows CE",
                r: /windows ce/
            }, {
                s: "Windows 2000",
                r: /(windows nt 5.0|windows 2000)/
            }, {
                s: "Windows XP",
                r: /(windows nt 5.1|windows xp)/
            }, {
                s: "Windows Server 2003",
                r: /windows nt 5.2/
            }, {
                s: "Windows Vista",
                r: /windows nt 6.0/
            }, {
                s: "Windows 7",
                r: /(windows 7|windows nt 6.1)/
            }, {
                s: "Windows 8.1",
                r: /(windows 8.1|windows nt 6.3)/
            }, {
                s: "Windows 8",
                r: /(windows 8|windows nt 6.2)/
            }, {
                s: "Windows 10",
                r: /(windows 10|windows nt 10.0)/
            }, {
                s: "Windows NT 4.0",
                r: /(windows nt 4.0|winnt4.0|winnt|windows nt)/
            }, {
                s: "Windows ME",
                r: /windows me/
            }, {
                s: "Android",
                r: /android/
            }, {
                s: "Open BSD",
                r: /openbsd/
            }, {
                s: "Sun OS",
                r: /sunos/
            }, {
                s: "Linux",
                r: /(linux|x11)/
            }, {
                s: "iOS",
                r: /(iphone|ipad|ipod)/
            }, {
                s: "Mac OS X",
                r: /mac os x/
            }, {
                s: "Mac OS",
                r: /(macppc|macintel|mac_powerpc|macintosh)/
            }, {
                s: "QNX",
                r: /qnx/
            }, {
                s: "UNIX",
                r: /unix/
            }, {
                s: "BeOS",
                r: /beos/
            }, {
                s: "OS/2",
                r: /os\/2/
            }, {
                s: "Search Bot",
                r: /(nuhk|googlebot|yammybot|openbot|slurp|msnbot|ask jeeves\/teoma|ia_archiver)/
            } ], m = void 0, n = void 0;
            for (m in l) if (l.hasOwnProperty(m) && (n = l[m], n.r.test(h))) {
                b = n.s;
                break;
            }
            switch (b && /Windows/.test(b) && (c = /Windows (.*)/.exec(b)[1], b = f.osName.windows), 
            b) {
              case f.osName.mac:
                c = /mac os x (10[\.\_\d]+)/.exec(h)[1];
                break;

              case f.osName.android:
                c = /android ([\.\_\d]+)/.exec(h)[1];
                break;

              case f.osName.ios:
                if (!i) break;
                if (!(c = /os (\d+)_(\d+)_?(\d+)?/.exec(i))) break;
                c = c[1] + "." + c[2] + "." + (0 | c[3]);
            }
            return {
                browserName: a,
                browserVersion: j.toString(),
                os: b,
                osVersion: c,
                codeBase: g,
                userAgent: d
            };
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.detect = d;
        var e = a("../config/constants"), f = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(e);
    }, {
        "../config/constants": 33
    } ],
    19: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Devices = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../config/constants"), h = d(g), i = a("../utility/registry"), j = a("../utility/csiologger"), k = d(j), l = a("../utility/utils"), m = d(l), n = function() {
            function a(b, c) {
                e(this, a), this.conferenceId = b, this.pc = c, this.devices = null, this.emb = i.Registry.getEventMessageBuilder();
            }
            return f(a, [ {
                key: "collectConnected",
                value: function() {
                    var a = this;
                    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {
                        var b = this;
                        navigator.mediaDevices.enumerateDevices().then(function(c) {
                            var d = m.normalizeMediaDeviceList(c);
                            b.sendConnected(d), setTimeout(a.collectConnected.bind(b), 1e4);
                        }).catch(function(c) {
                            setTimeout(a.collectConnected.bind(b), 1e4);
                        });
                    }
                }
            }, {
                key: "sendConnected",
                value: function(a) {
                    this.devices ? this.compare(a) || (this.devices = a, this.send()) : (this.devices = a, 
                    this.send());
                }
            }, {
                key: "compare",
                value: function(a) {
                    return self.devices.sort().toString() === a.sort().toString();
                }
            }, {
                key: "send",
                value: function() {
                    var a = {
                        mediaDeviceList: this.devices
                    };
                    k.log("sending connectedDevice", h.internalFabricEvent.connectedDeviceList, a), 
                    this.emb.make(h.internalFabricEvent.connectedDeviceList, this.conferenceId, this.pc, a);
                }
            } ]), a;
        }();
        c.Devices = n;
    }, {
        "../config/constants": 33,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "../utility/utils": 101
    } ],
    20: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (b) try {
                window && window.localStorage && window.localStorage.setItem(a, b);
            } catch (a) {
                return;
            }
        }
        function e(a) {
            try {
                if (window && window.localStorage) return window.localStorage.getItem(a);
            } catch (a) {
                return null;
            }
            return null;
        }
        function f(a) {
            try {
                window && window.localStorage && window.localStorage.removeItem(a);
            } catch (a) {
                return;
            }
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.store = d, c.get = e, c.remove = f;
    }, {} ],
    21: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (b) try {
                window && window.sessionStorage && window.sessionStorage.setItem(a, b);
            } catch (a) {
                return;
            }
        }
        function e(a) {
            try {
                if (window && window.sessionStorage) return window.sessionStorage.getItem(a);
            } catch (a) {
                return null;
            }
            return null;
        }
        function f(a) {
            try {
                window && window.sessionStorage && window.sessionStorage.removeItem(a);
            } catch (a) {
                return;
            }
        }
        function g(a, b) {
            if (a) {
                var c = JSON.parse(e("csio_ucid_data"));
                c || (c = {}), c[a] || (c[a] = {}), c[a].ucID = b, d("csio_ucid_data", JSON.stringify(c));
            }
        }
        function h(a) {
            if (!a) return null;
            var b = JSON.parse(e("csio_ucid_data"));
            return b && b[a] ? b[a].ucID : null;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.store = d, c.get = e, c.remove = f, c.storeUcId = g, c.getUcId = h;
    }, {} ],
    22: [ function(a, b, c) {
        (function(c) {
            "use strict";
            function d(a) {
                if (a && a.__esModule) return a;
                var b = {};
                if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
                return b.default = a, b;
            }
            function e(a, b) {
                if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
            }
            function f(a, b) {
                var c = {};
                return c.status = a, b && (c.message = b), c;
            }
            function g(a, b) {
                return a + ": " + b + " " + (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "");
            }
            function h() {
                var a = null, b = r.Registry.getEndpoint().getBrowserName();
                return "Firefox" === b ? a = mozRTCPeerConnection : "Chrome" === b || "Opera" === b ? a = webkitRTCPeerConnection : "Safari" === b ? t.log("Browser type Safari") : "Edge" === b && (a = window.RTCPeerConnection), 
                a;
            }
            function i(a) {
                if (null === a) return !1;
                var b = r.Registry.getEndpoint().getCodeBase();
                if (b === m.codeBaseType.firefox) return "undefined" != typeof mozRTCPeerConnection && a instanceof mozRTCPeerConnection || "undefined" != typeof RTCPeerConnection && a instanceof RTCPeerConnection;
                if (b === m.codeBaseType.edge || "function" == typeof a) return !0;
                var c = h();
                return null !== c && a instanceof c || void 0 !== a.createOffer;
            }
            var j = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
                return typeof a;
            } : function(a) {
                return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
            }, k = function() {
                function a(a, b) {
                    for (var c = 0; c < b.length; c++) {
                        var d = b[c];
                        d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                        Object.defineProperty(a, d.key, d);
                    }
                }
                return function(b, c, d) {
                    return c && a(b.prototype, c), d && a(b, d), b;
                };
            }(), l = a("./config/constants"), m = d(l), n = a("./config/settings"), o = d(n), p = a("./config/callstatserrors"), q = a("./fsm/mainfsm"), r = a("./utility/registry"), s = a("./utility/csiologger"), t = d(s), u = a("./utility/onerroreventlistner"), v = d(u), w = a("./utility/utils"), x = d(w);
            v.setErrorEventListener(), x.assignPollyfill(), x.isIntegerPollyfill();
            var y = null, z = function() {
                function a() {
                    e(this, a), y = new q.MainFSM();
                }
                return k(a, [ {
                    key: "initialize",
                    value: function(a, b, c, d, e, h) {
                        if (!a || !c || !b) {
                            var i = g("initialize", p.csErrorStrings.argumentError);
                            return t.error(i), f(m.callstatsAPIReturnStatus.failure, i);
                        }
                        if (d && "function" != typeof d) {
                            var j = g("initialize", p.csErrorStrings.argumentError);
                            t.warn(j), d = null;
                        }
                        if (e && "function" != typeof e) {
                            var k = g("initialize", p.csErrorStrings.argumentError);
                            t.warn(k), e = null;
                        }
                        if ("function" != typeof b && !(window.crypto && (window.crypto.subtle || window.crypto.webkitSubtle) || window.msCrypto && window.msCrypto.subtle || window.csioReactNative)) {
                            var l = g("initialize", p.csErrorStrings.cryptoError);
                            return t.error(l), d && d(p.csError.tokenGenerationError, p.csErrorStrings.cryptoError), 
                            f(m.callstatsAPIReturnStatus.failure, l);
                        }
                        try {
                            y.fire(q.MainEvents.onInitialize, a, c, b, d, e, h), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "initialize: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("initialize: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "addNewFabric",
                    value: function(a, b, c, d, e, h) {
                        var j = null, k = m.endpointType.peer, l = m.transmissionDirection.sendrecv;
                        if (void 0 === b) {
                            var n = g("addNewFabric", p.csErrorStrings.argumentError);
                            return t.error(n), f(m.callstatsAPIReturnStatus.failure, n);
                        }
                        if (void 0 === d) {
                            var o = g("addNewFabric", p.csErrorStrings.argumentError);
                            return t.error(o), f(m.callstatsAPIReturnStatus.failure, o);
                        }
                        if (d || (d = m.tmpConferenceId), !a || !c) {
                            var s = g("addNewFabric", p.csErrorStrings.argumentError);
                            return t.error(s), f(m.callstatsAPIReturnStatus.failure, s);
                        }
                        if (h && "function" == typeof h && (j = h), e && "function" == typeof e && (j = e), 
                        e && "function" != typeof e) {
                            if (e.remoteEndpointType) {
                                if (!m.endpointType.hasOwnProperty(e.remoteEndpointType)) {
                                    var u = g("addNewFabric", p.csErrorStrings.invalidEndPointType, e.remoteEndpointType);
                                    return t.error(u), f(m.callstatsAPIReturnStatus.failure, u);
                                }
                                k = e.remoteEndpointType;
                            }
                            if (e.fabricTransmissionDirection) {
                                if (!m.transmissionDirection.hasOwnProperty(e.fabricTransmissionDirection)) {
                                    var v = g("addNewFabric", p.csErrorStrings.invalidTransmissionDirection, e.fabricTransmissionDirection);
                                    return t.error(v), f(m.callstatsAPIReturnStatus.failure, v);
                                }
                                l = e.fabricTransmissionDirection;
                            }
                        }
                        if (!m.fabricUsage.hasOwnProperty(c) || c instanceof Function) {
                            var w = g("addNewFabric", p.csErrorStrings.fabricUsageInvalid, c);
                            return t.error(w), f(m.callstatsAPIReturnStatus.failure, w);
                        }
                        if (!i(a)) {
                            var x = g("addNewFabric", p.csErrorStrings.pcInvalid);
                            return t.error(x), f(m.callstatsAPIReturnStatus.failure, x);
                        }
                        var z = r.Registry.getConferenceManager().get(d);
                        if (z) {
                            if (z.getPeerConnectionManager().getPcHandler(a)) return f(m.callstatsAPIReturnStatus.success);
                        }
                        if (!r.Registry.getCredentials().getAppId() || !r.Registry.getCredentials().getUserId()) {
                            var A = g("addNewFabric", p.csErrorStrings.notInitialized);
                            return t.error(A), f(m.callstatsAPIReturnStatus.failure, A);
                        }
                        try {
                            y.fire(q.MainEvents.onAddNewFabric, a, b, c, d, k, l, j), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "addNewFabric: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("addNewFabric: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "sendFabricEvent",
                    value: function(a, b, c, d) {
                        if (t.log("sendFabricEvent ", b), c || (c = m.tmpConferenceId), !a || !b) {
                            var e = g("sendFabricEvent", p.csErrorStrings.argumentError);
                            return t.error(e), f(m.callstatsAPIReturnStatus.failure, e);
                        }
                        if (b === m.fabricEvent.fabricSetupFailed) {
                            var h = g("sendFabricEvent", p.csErrorStrings.fabricEventUnsupported, b);
                            return t.error(h), f(m.callstatsAPIReturnStatus.failure, h);
                        }
                        if (!m.fabricEvent.hasOwnProperty(b) && !m.internalFabricEvent.hasOwnProperty(b)) {
                            var i = g("sendFabricEvent", p.csErrorStrings.fabricEventInvalid, b);
                            return t.error(i), f(m.callstatsAPIReturnStatus.failure, i);
                        }
                        if (!(b !== m.fabricEvent.activeDeviceList || d && d.deviceList)) {
                            var j = g("sendFabricEvent ", p.csErrorStrings.argumentError);
                            return t.error(j), f(m.callstatsAPIReturnStatus.failure, j);
                        }
                        var k = r.Registry.getConferenceManager().get(c);
                        if (!r.Registry.getCredentials().getAppId() || !r.Registry.getCredentials().getUserId() || !k) {
                            var l = g("sendFabricEvent ", p.csErrorStrings.notInitialized);
                            return t.error(l), f(m.callstatsAPIReturnStatus.failure, l);
                        }
                        if (!k.getPeerConnectionManager().getPcHandler(a)) {
                            var n = g("sendFabricEvent ", p.csErrorStrings.pcInvalid);
                            return t.error(n), f(m.callstatsAPIReturnStatus.failure, n);
                        }
                        try {
                            y.fire(q.MainEvents.onSendFabricEvent, a, b, c, d), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "sendFabricEvent: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("sendFabricEvent: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "sendUserFeedback",
                    value: function(a, b, c) {
                        if (!b || !a) {
                            var d = g("sendUserFeedback", p.csErrorStrings.argumentError);
                            return t.error(d), f(m.callstatsAPIReturnStatus.failure, d);
                        }
                        if ("object" !== (void 0 === b ? "undefined" : j(b))) {
                            var e = g("sendUserFeedback", p.csErrorStrings.argumentError);
                            return t.error(e), f(m.callstatsAPIReturnStatus.failure, e);
                        }
                        if (0 === Object.keys(b).length) {
                            var h = g("sendUserFeedback", p.csErrorStrings.argumentError);
                            return t.error(h), f(m.callstatsAPIReturnStatus.failure, h);
                        }
                        try {
                            y.fire(q.MainEvents.onSendUserFeedback, a, b, c), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "sendUserFeedback: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("sendUserFeedback: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "associateMstWithUserID",
                    value: function(a, b, c, d, e, h) {
                        if (c || (c = m.tmpConferenceId), !a || !d || !e) {
                            var j = g("associateMstWithUserID", p.csErrorStrings.argumentError);
                            return t.error(j), f(m.callstatsAPIReturnStatus.failure, j);
                        }
                        if (!i(a)) {
                            var k = g("associateMstWithUserID", p.csErrorStrings.pcInvalid);
                            return t.error(k), f(m.callstatsAPIReturnStatus.failure, k);
                        }
                        var l = r.Registry.getConferenceManager().get(c);
                        if (!l) {
                            var n = g("associateMstWithUserID", p.csErrorStrings.confereneDoesNotExist);
                            return t.error(n), f(m.callstatsAPIReturnStatus.failure, n);
                        }
                        if (!l.getPeerConnectionManager().getPcHandler(a)) {
                            var o = g("associateMstWithUserID", p.csErrorStrings.pcInvalid);
                            return t.error(o), f(m.callstatsAPIReturnStatus.failure, o);
                        }
                        h && "string" != typeof h && (t.error("associateMstWithUserID: Invalid videoTag"), 
                        h = null);
                        try {
                            y.fire(q.MainEvents.onAssociateMstWithUserID, a, b, c, d, e, h), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "associateMstWithUserID: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("associateMstWithUserID: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "reportError",
                    value: function(a, b, c, d, e, h) {
                        if (b || (b = m.tmpConferenceId), void 0 === a || !c) {
                            var i = g("reportError", p.csErrorStrings.argumentError);
                            return t.error(i), f(m.callstatsAPIReturnStatus.failure, i);
                        }
                        if (!m.webRTCFunctions.hasOwnProperty(c)) {
                            var j = g("reportError", p.csErrorStrings.webRTCFunctionsInvalid, c);
                            return t.error(j), f(m.callstatsAPIReturnStatus.failure, j);
                        }
                        if (void 0 === d && t.warn("reportError: Missing DOM error parameter"), !r.Registry.getCredentials().getAppId() || !r.Registry.getCredentials().getUserId()) {
                            var k = g("reportError", p.csErrorStrings.notInitialized);
                            return t.error(k), f(m.callstatsAPIReturnStatus.failure, k);
                        }
                        try {
                            y.fire(q.MainEvents.onReportError, a, b, c, d, e, h), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "reportError: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("reportError: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "setProxyConfig",
                    value: function(a) {
                        if (window && !window.csioproxy) {
                            var b = g("setProxyConfig", p.csErrorStrings.setProxyConfigInvokeError);
                            return t.error(b), f(m.callstatsAPIReturnStatus.failure, b);
                        }
                        if (!a) {
                            var c = g("setProxyConfig", p.csErrorStrings.argumentError);
                            return t.error(c), f(m.callstatsAPIReturnStatus.failure, c);
                        }
                        try {
                            y.fire(q.MainEvents.onSetProxyConfig, a), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "setProxyConfig: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("setProxyConfig: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "attachWifiStatsHandler",
                    value: function(a) {
                        if (!a) {
                            var b = g("attachWifiStatsHandler", p.csErrorStrings.argumentError);
                            return t.error(b), f(m.callstatsAPIReturnStatus.failure, b);
                        }
                        if ("function" != typeof a) {
                            var c = g("attachWifiStatsHandler", p.csErrorStrings.argumentError);
                            return t.error(c), f(m.callstatsAPIReturnStatus.failure, c);
                        }
                        try {
                            y.fire(q.MainEvents.onAttachWifiStatsHandler, a), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "attachWifiStatsHandler: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("attachWifiStatsHandler: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "setIdentifiers",
                    value: function(a, b) {
                        if (!a) {
                            var c = g("setIdentifiers", p.csErrorStrings.argumentError);
                            return t.error(c), f(m.callstatsAPIReturnStatus.failure, c);
                        }
                        try {
                            y.fire(q.MainEvents.onSetIdentifiers, a, b), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "setIdentifiers: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("setIdentifiers: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "makePrecallTest",
                    value: function(a, b) {
                        if (!r.Registry.getAuthenticator().getToken() || !r.Registry.getCredentials().getAppId()) {
                            var c = g("makePrecallTest", p.csErrorStrings.notInitialized);
                            return t.error(c), f(m.callstatsAPIReturnStatus.failure, c);
                        }
                        if (!r.Registry.getAuthenticator().getIceServers()) {
                            var d = g("makePrecallTest", p.csErrorStrings.notInitialized);
                            return t.error(d), f(m.callstatsAPIReturnStatus.failure, d);
                        }
                        if (!r.Registry.getCredentials().getCollectSDP()) {
                            var e = g("makePrecallTest", p.csErrorStrings.apiaccesserror);
                            return t.error(e), f(m.callstatsAPIReturnStatus.failure, e);
                        }
                        try {
                            y.fire(q.MainEvents.onMakePrecallTest, a, b), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "on: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("makePrecallTest: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "on",
                    value: function(a, b) {
                        if (!b || "function" != typeof b) {
                            var c = g("on", p.csErrorStrings.argumentError);
                            return t.error(c), f(m.callstatsAPIReturnStatus.failure, c);
                        }
                        if (!a || !m.callbackFunctions.hasOwnProperty(a)) {
                            var d = g("on", p.csErrorStrings.argumentError);
                            return t.error(d), f(m.callstatsAPIReturnStatus.failure, d);
                        }
                        try {
                            y.fire(q.MainEvents.onOn, a, b), y.run();
                        } catch (a) {
                            r.Registry.getGenericEventHandler().sendEvent(m.logEvents.error, {
                                msg: "on: Error",
                                error: a.message + ":" + a.stack
                            }), t.error("on: Error", a);
                        }
                        return f(m.callstatsAPIReturnStatus.success);
                    }
                }, {
                    key: "fabricUsage",
                    get: function() {
                        return this.constructor.fabricUsage;
                    }
                }, {
                    key: "fabricEvent",
                    get: function() {
                        return this.constructor.fabricEvent;
                    }
                }, {
                    key: "webRTCFunctions",
                    get: function() {
                        return this.constructor.webRTCFunctions;
                    }
                }, {
                    key: "csError",
                    get: function() {
                        return this.constructor.csError;
                    }
                }, {
                    key: "qualityRating",
                    get: function() {
                        return this.constructor.qualityRating;
                    }
                }, {
                    key: "callStatsAPIReturnStatus",
                    get: function() {
                        return this.constructor.callStatsAPIReturnStatus;
                    }
                }, {
                    key: "version",
                    get: function() {
                        return this.constructor.version;
                    }
                }, {
                    key: "userIDType",
                    get: function() {
                        return this.constructor.userIDType;
                    }
                }, {
                    key: "transmissionDirection",
                    get: function() {
                        return this.constructor.transmissionDirection;
                    }
                }, {
                    key: "endpointType",
                    get: function() {
                        return this.constructor.endpointType;
                    }
                } ]), a;
            }();
            z.fabricUsage = m.fabricUsage, z.fabricEvent = m.fabricEvent, z.webRTCFunctions = m.webRTCFunctions, 
            z.csError = p.csError, z.qualityRating = m.qualityRating, z.callStatsAPIReturnStatus = m.callstatsAPIReturnStatus, 
            z.version = o.version, z.userIDType = m.userIdType, z.endpointType = m.endpointType, 
            z.transmissionDirection = m.transmissionDirection, function() {
                function a() {
                    return new z();
                }
                 true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined, 
                b.exports = a;
            }("undefined" != typeof window && window);
        }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
        "./config/callstatserrors": 32,
        "./config/constants": 33,
        "./config/settings": 34,
        "./fsm/mainfsm": 35,
        "./utility/csiologger": 88,
        "./utility/onerroreventlistner": 94,
        "./utility/registry": 95,
        "./utility/utils": 101
    } ],
    23: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (Array.isArray(a)) {
                for (var b = 0, c = Array(a.length); b < a.length; b++) c[b] = a[b];
                return c;
            }
            return Array.from(a);
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.BinaryTree = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("./binarytreenode.js"), h = a("../utility/csiologger"), i = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(h), j = function() {
            function a(b) {
                e(this, a), this.root = null, this.top = null, this.bottom = null, this.comparator = b, 
                this.node_counter = 0, this.duplicate_counter = 0;
            }
            return f(a, [ {
                key: "getTopNode",
                value: function() {
                    return this.top;
                }
            }, {
                key: "getTopValue",
                value: function() {
                    return null === this.top ? null : this.top.peek();
                }
            }, {
                key: "getBottomValue",
                value: function() {
                    return null === this.bottom ? null : this.bottom.peek();
                }
            }, {
                key: "getBottomNode",
                value: function() {
                    return this.bottom;
                }
            }, {
                key: "getDuplicatedCounter",
                value: function() {
                    return this.duplicate_counter;
                }
            }, {
                key: "getNodeCounter",
                value: function() {
                    return this.node_counter;
                }
            }, {
                key: "getSize",
                value: function() {
                    return this.duplicate_counter + this.node_counter;
                }
            }, {
                key: "insertNodeAtTop",
                value: function(a) {
                    a && this.inserting(a.getValues(), this.top);
                }
            }, {
                key: "insertNodeAtBottom",
                value: function(a) {
                    a && this.inserting(a.getValues(), this.bottom);
                }
            }, {
                key: "insert",
                value: function(a) {
                    this.inserting([ a ], this.root);
                }
            }, {
                key: "createNode",
                value: function(a) {
                    var b = new (Function.prototype.bind.apply(g.BinaryTreeNode, [ null ].concat(d(a))))();
                    return null === this.top ? this.top = b : this.comparator(this.top.peek(), b.peek()) < 0 && (this.top = b), 
                    null === this.bottom ? this.bottom = b : this.comparator(b.peek(), this.bottom.peek()) < 0 && (this.bottom = b), 
                    b;
                }
            }, {
                key: "inserting",
                value: function(a, b) {
                    if (null === this.root) return this.root = this.createNode(a), this.node_counter = 1, 
                    void (this.duplicate_counter += a.length - 1);
                    for (var c = null, d = b, e = 0; null !== d; ) {
                        if (0 === (e = this.comparator(a[0], d.peek()))) return d.concat(a), this.duplicate_counter += a.length, 
                        void d.find(a[0]);
                        c = d, d = e < 0 ? d.getLeft() : d.getRight();
                    }
                    ++this.node_counter, this.duplicate_counter += a.length - 1, d = this.createNode(a), 
                    e < 0 ? c.setLeft(d) : c.setRight(d);
                }
            }, {
                key: "getRightist",
                value: function(a) {
                    for (var b = null; null !== a.right; ) b = a, a = a.right;
                    return [ a, b ];
                }
            }, {
                key: "getLeftist",
                value: function(a) {
                    for (var b = null; null !== a.getLeft(); ) b = a, a = a.getLeft();
                    return [ a, b ];
                }
            }, {
                key: "popBottomNode",
                value: function() {
                    if (null === this.bottom) return null;
                    var a = this.search(this.bottom.peek()), b = a[0], c = a[1];
                    return null === b ? null : (this.replaceNode(b, c, b.getRight()), this.disposeNode(b), 
                    --this.node_counter, this.duplicate_counter -= b.getLength() - 1, b.setRight(null), 
                    b);
                }
            }, {
                key: "popTopNode",
                value: function() {
                    if (null === this.top) return null;
                    var a = this.search(this.top.peek()), b = a[0], c = a[1];
                    return null === b ? null : (this.replaceNode(b, c, b.getLeft()), this.disposeNode(b), 
                    --this.node_counter, this.duplicate_counter -= b.getLength() - 1, b.setLeft(null), 
                    b);
                }
            }, {
                key: "search",
                value: function(a) {
                    for (var b = this.root, c = null, d = void 0; null !== b; ) {
                        if (0 === (d = this.comparator(a, b.peek()))) return b.find(a) ? [ b, c ] : [ null, null ];
                        c = b, b = d < 0 ? b.getLeft() : b.getRight();
                    }
                    return [ null, null ];
                }
            }, {
                key: "replaceNode",
                value: function(a, b, c) {
                    null !== b ? b.left === a ? b.left = c : b.right = c : this.root = c;
                }
            }, {
                key: "disposeNode",
                value: function(a) {
                    if (null !== a) {
                        if (null === this.root) return void (this.bottom = this.top = null);
                        if (0 === this.comparator(this.top.peek(), a.peek())) {
                            var b = this.getRightist(this.root);
                            this.top = b[0];
                        }
                        if (0 === this.comparator(this.bottom.peek(), a.peek())) {
                            var c = this.getLeftist(this.root);
                            this.bottom = c[0];
                        }
                    }
                }
            }, {
                key: "delete",
                value: function(a) {
                    var b = this.search(a), c = b[0], d = b[1];
                    if (null === c) return !1;
                    if (1 < c.getLength()) return c.remove(a), --this.duplicate_counter, !0;
                    if (--this.node_counter, null === c.getLeft() && null === c.getRight()) this.replaceNode(c, d, null); else if (null === c.getLeft()) this.replaceNode(c, d, c.getRight()); else if (null === c.getRight()) this.replaceNode(c, d, c.getLeft()); else {
                        for (var e = c.getLeft(), f = c; null !== e.getRight(); f = e, e = e.getRight()) ;
                        var g = e.getLeft();
                        f === c ? f.setLeft(g) : f.setRight(g), c.setValues(e.getValues());
                    }
                    return this.disposeNode(c), !0;
                }
            }, {
                key: "logging",
                value: function() {
                    if (null === this.root) return void i.log("This tree is empty Duplicate Counter: " + this.duplicate_counter);
                    i.log("Size of the tree: " + this.getSize() + " Node: " + this.getNodeCounter() + " Duplicates: " + this.getDuplicatedCounter() + " Top: " + this.getTopNode().toString() + " Bottom: " + this.getBottomNode().toString()), 
                    function a(b, c, d) {
                        if (null !== b) {
                            for (var e = "-", f = 0; f < c; ++f) e += "--";
                            i.log(e + "> (" + d + ") [" + b.toString() + "]"), null !== b.getLeft() && a(b.getLeft(), c + 1, "Left"), 
                            null !== b.getRight() && a(b.getRight(), c + 1, "Right");
                        }
                    }(this.root, 0, "Root");
                }
            } ]), a;
        }();
        c.BinaryTree = j;
    }, {
        "../utility/csiologger": 88,
        "./binarytreenode.js": 24
    } ],
    24: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a() {
                d(this, a);
                for (var b = arguments.length, c = Array(b), e = 0; e < b; e++) c[e] = arguments[e];
                this.values = c, this.left = null, this.right = null;
            }
            return e(a, [ {
                key: "getRight",
                value: function() {
                    return this.right;
                }
            }, {
                key: "setRight",
                value: function(a) {
                    this.right = a;
                }
            }, {
                key: "getLeft",
                value: function() {
                    return this.left;
                }
            }, {
                key: "setLeft",
                value: function(a) {
                    this.left = a;
                }
            }, {
                key: "push",
                value: function(a) {
                    this.values.push(a);
                }
            }, {
                key: "concat",
                value: function(a) {
                    this.values = this.values.concat(a);
                }
            }, {
                key: "pop",
                value: function() {
                    return this.values.length < 1 ? null : this.values.shift();
                }
            }, {
                key: "remove",
                value: function(a) {
                    this.values.splice(this.values.indexOf(a), 1);
                }
            }, {
                key: "setValues",
                value: function(a) {
                    this.values = a;
                }
            }, {
                key: "getValues",
                value: function() {
                    return this.values;
                }
            }, {
                key: "hasValue",
                value: function() {
                    return 0 < this.values.length;
                }
            }, {
                key: "getLength",
                value: function() {
                    return this.values.length;
                }
            }, {
                key: "peek",
                value: function() {
                    return this.values.length < 1 ? null : this.values[0];
                }
            }, {
                key: "find",
                value: function(a) {
                    return this.values.find(function(b) {
                        return b === a;
                    });
                }
            }, {
                key: "toString",
                value: function() {
                    return this.values.toString();
                }
            } ]), a;
        }();
        c.BinaryTreeNode = f;
    }, {} ],
    25: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Cache = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("../utility/csiologger"), g = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(f), h = function() {
            function a() {
                d(this, a), this.queue = [], this.priority = [];
            }
            return e(a, [ {
                key: "add",
                value: function(a) {
                    var b = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    if (this.length() > 1e6) return void g.error("Maximum cached items reached, dropping.");
                    b ? this.priority.push(a) : this.queue.push(a);
                }
            }, {
                key: "pop",
                value: function() {
                    return this.priority.length > 0 ? this.priority.shift() : this.queue.shift();
                }
            }, {
                key: "peak",
                value: function() {
                    return this.priority.length > 0 ? this.priority[0] : this.queue.length > 0 ? this.queue[0] : null;
                }
            }, {
                key: "length",
                value: function() {
                    return this.queue.length + this.priority.length;
                }
            }, {
                key: "updateConferenceId",
                value: function(a) {
                    for (var b = 0; b < this.queue.length; ++b) {
                        this.queue[b].updateConferenceId(a);
                    }
                    for (var c = 0; c < this.priority.length; ++c) {
                        this.priority[c].updateConferenceId(a);
                    }
                }
            } ]), a;
        }();
        c.Cache = h;
    }, {
        "../utility/csiologger": 88
    } ],
    26: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Component = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./port"), g = a("../utility/csiologger"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = function() {
            function a() {
                var b = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "Unknown";
                d(this, a), this.name = b, this.ports = new Map();
            }
            return e(a, [ {
                key: "bindPort",
                value: function(a, b) {
                    var c = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this;
                    if (this.ports.has(a)) return void h.warn("Port (" + a + ") for " + this.name + " already exists.");
                    this.ports.set(a, new f.Port(b, c));
                }
            }, {
                key: "declarePort",
                value: function(a) {
                    if (this.ports.has(a)) return void h.warn("Port (" + a + ") for " + this.name + " already exists.");
                    this.ports.set(a, null);
                }
            }, {
                key: "getPort",
                value: function(a) {
                    return this.ports.get(a);
                }
            }, {
                key: "isConnected",
                value: function(a) {
                    return !!this.ports.has(a) && null !== this.ports.get(a);
                }
            }, {
                key: "connect",
                value: function(a, b) {
                    if (!this.ports.has(a)) return void h.warn("Port (" + a + ") for " + this.name + " does not exists.");
                    this.ports.set(a, b);
                }
            }, {
                key: "transmit",
                value: function(a) {
                    var b = this.ports.get(a);
                    if (void 0 === b) return void h.warn("Port (" + a + ") for " + this.name + " does not exists.");
                    if (null === b) return void h.warn("Port (" + a + ") for " + this.name + " is not connected.");
                    for (var c = arguments.length, d = Array(c > 1 ? c - 1 : 0), e = 1; e < c; e++) d[e - 1] = arguments[e];
                    b.transmit(d);
                }
            }, {
                key: "request",
                value: function(a) {
                    var b = this.ports.get(a);
                    if (void 0 === b) return h.warn("Port (" + a + ") for " + this.name + " does not exists."), 
                    null;
                    if (null === b) return h.warn("Port (" + a + ") for " + this.name + " is not connected."), 
                    null;
                    for (var c = arguments.length, d = Array(c > 1 ? c - 1 : 0), e = 1; e < c; e++) d[e - 1] = arguments[e];
                    return b.request(d);
                }
            } ]), a;
        }();
        c.Component = i;
    }, {
        "../utility/csiologger": 88,
        "./port": 27
    } ],
    27: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a(b) {
                var c = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                d(this, a), this.target = b, this.object = c;
            }
            return e(a, [ {
                key: "transmit",
                value: function(a) {
                    this.target.apply(this.object, a);
                }
            }, {
                key: "request",
                value: function(a) {
                    return this.target.apply(this.object, a);
                }
            } ]), a;
        }();
        c.Port = f;
    }, {} ],
    28: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.SlidingWindow = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./switem"), g = a("../utility/timestamps"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = function() {
            function a(b, c) {
                d(this, a), this.items = [], this.plugins = [], this.postProcesses = [], this.preProcesses = [], 
                this.timeoutInMs = c, this.maxItemsNum = b, this.minItemsNum = 0;
            }
            return e(a, [ {
                key: "setMaxItemsNum",
                value: function(a) {
                    this.maxItemsNum = a;
                }
            }, {
                key: "setTimeoutInMs",
                value: function(a) {
                    this.timeoutInMs = a;
                }
            }, {
                key: "setMinItemsNum",
                value: function(a) {
                    this.minItemsNum = a;
                }
            }, {
                key: "refresh",
                value: function() {
                    var a = h.getCurrent();
                    if (!(this.items.length <= this.minItemsNum)) {
                        for (;0 < this.maxItemsNum && this.maxItemsNum <= this.items.length; ) this.remove();
                        this.timeoutInMs && this.timeoutInMs < a - this.items[0].getCreated() && (this.remove(), 
                        this.refresh());
                    }
                }
            }, {
                key: "getLength",
                value: function() {
                    return this.items.length;
                }
            }, {
                key: "add",
                value: function(a) {
                    this.refresh(), this.items.push(new f.SWItem(a));
                    for (var b = 0; b < this.preProcesses.length; b++) {
                        (0, this.preProcesses[b])(a);
                    }
                    for (var c = 0; c < this.plugins.length; c++) {
                        this.plugins[c].add(a);
                    }
                    for (var d = 0; d < this.postProcesses.length; d++) {
                        (0, this.postProcesses[d])(a);
                    }
                }
            }, {
                key: "remove",
                value: function() {
                    for (var a = this.items.shift(), b = 0; b < this.plugins.length; b++) {
                        this.plugins[b].remove(a.value);
                    }
                }
            }, {
                key: "peek",
                value: function() {
                    var a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                    return this.items.length <= a ? null : this.items[this.items.length - a - 1].getValue();
                }
            }, {
                key: "attach",
                value: function(a) {
                    this.plugins.push(a);
                }
            }, {
                key: "addPreProcess",
                value: function(a) {
                    this.preProcesses.push(a);
                }
            }, {
                key: "addPostProcess",
                value: function(a) {
                    this.postProcesses.push(a);
                }
            }, {
                key: "detach",
                value: function(a) {
                    this.plugins = this.plugins.filter(function(b) {
                        return b !== a;
                    });
                }
            } ]), a;
        }();
        c.SlidingWindow = i;
    }, {
        "../utility/timestamps": 99,
        "./switem": 29
    } ],
    29: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.SWItem = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("../utility/timestamps"), g = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(f), h = function() {
            function a(b) {
                d(this, a), this.value = b, this.created = g.getCurrent();
            }
            return e(a, [ {
                key: "getValue",
                value: function() {
                    return this.value;
                }
            }, {
                key: "getCreated",
                value: function() {
                    return this.created;
                }
            }, {
                key: "toString",
                value: function() {
                    return "";
                }
            } ]), a;
        }();
        c.SWItem = h;
    }, {
        "../utility/timestamps": 99
    } ],
    30: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Conference = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../peerconnection/peerconnectionmanager"), h = a("../config/settings"), i = d(h), j = a("../utility/registry"), k = a("../browserapi/sessionstorage"), l = d(k), m = function() {
            function a(b, c) {
                e(this, a), this.conferenceId = b, this.startTime, this.peerConnectionManager = new g.PeerConnectionManager(), 
                this.credentials = c, this.ucId = null, this.url = null, this.userJoinedSent = !1;
            }
            return f(a, [ {
                key: "getCredentials",
                value: function() {
                    return this.credentials;
                }
            }, {
                key: "getUcId",
                value: function() {
                    return this.ucId;
                }
            }, {
                key: "setUcId",
                value: function(a) {
                    this.ucId = a, this.url = i.conferenceBaseUrl + j.Registry.getCredentials().getAppId() + "/conferences/" + encodeURIComponent(this.conferenceId) + "/" + a + "/general", 
                    l.storeUcId(this.conferenceId, a);
                }
            }, {
                key: "getPeerConnectionManager",
                value: function() {
                    return this.peerConnectionManager;
                }
            }, {
                key: "getUrl",
                value: function() {
                    return this.url;
                }
            }, {
                key: "updateConferenceId",
                value: function(a) {
                    this.conferenceId = a, this.peerConnectionManager.updateConferenceId(a);
                }
            }, {
                key: "close",
                value: function(a) {}
            } ]), a;
        }();
        c.Conference = m;
    }, {
        "../browserapi/sessionstorage": 21,
        "../config/settings": 34,
        "../peerconnection/peerconnectionmanager": 42,
        "../utility/registry": 95
    } ],
    31: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ConferenceManager = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./conference"), g = a("../config/constants"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = function() {
            function a() {
                d(this, a), this.conferenceMap = new Map();
            }
            return e(a, [ {
                key: "add",
                value: function(a, b) {
                    if (!this.get(a)) {
                        var c = new f.Conference(a, b);
                        this.conferenceMap.set(a, c);
                    }
                }
            }, {
                key: "get",
                value: function(a) {
                    return this.conferenceMap.get(a);
                }
            }, {
                key: "getConferenceForPc",
                value: function(a) {
                    var b = null;
                    return a ? (this.conferenceMap.forEach(function(c, d) {
                        var e = c.getPeerConnectionManager().getPcHandler(a);
                        e && e.getConferenceId() === d && (b = c);
                    }), b) : b;
                }
            }, {
                key: "getConferenceForPcHash",
                value: function(a) {
                    var b = null;
                    return a ? (this.conferenceMap.forEach(function(c, d) {
                        var e = c.getPeerConnectionManager().getPcHandlerByHash(a);
                        e && e.getConferenceId() === d && (b = c);
                    }), b) : b;
                }
            }, {
                key: "updateConferenceId",
                value: function(a) {
                    var b = h.tmpConferenceId, c = this.get(b);
                    c && (c.updateConferenceId(a), this.conferenceMap.set(a, c), this.conferenceMap.delete(b));
                }
            }, {
                key: "getConferenceIds",
                value: function() {
                    var a = [];
                    return this.conferenceMap.forEach(function(b, c) {
                        a.push(c);
                    }), a;
                }
            } ]), a;
        }();
        c.ConferenceManager = i;
    }, {
        "../config/constants": 33,
        "./conference": 30
    } ],
    32: [ function(a, b, c) {
        "use strict";
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        c.csError = {
            httpError: "httpError",
            authError: "authError",
            wsChannelFailure: "wsChannelFailure",
            success: "success",
            csProtoError: "csProtoError",
            appConnectivityError: "appConnectivityError",
            tokenGenerationError: "tokenGenerationError",
            ok: "OK",
            authOngoing: "authOngoing",
            invalidWebRTCFunctionName: "Invalid WebRTC function name",
            invalidEndPointType: "Invalid EndPoint Type",
            invalidTransmissionDirection: "Invalid fabric transmission direction"
        }, c.csErrorStrings = {
            argumentError: "Argument missing/invalid",
            cryptoError: "Browser does not support Web Cryptography API. App secret based authentication requires Web Cryptography API",
            fabricEventUnsupported: "Unsupported fabricEvent",
            fabricEventInvalid: "Invalid fabricEvents value",
            fabricUsageInvalid: "Invalid fabricUsage value",
            notInitialized: "SDK is not initialized or no Fabrics added",
            pcInvalid: "Invalid PeerConnection object passed",
            confereneDoesNotExist: "conferenceId does not exist",
            webRTCFunctionsInvalid: "Invalid webRTC functionName value",
            setProxyConfigInvokeError: "cannot be called if window.csioproxy is false",
            invalidWebRTCFunctionName: "Invalid WebRTC function name",
            invalidEndPointType: "Invalid EndPoint Type",
            invalidTransmissionDirection: "Invalid fabric transmission direction",
            apiaccesserror: "API access Error"
        }, c.csErrorReason = {
            csProtoError: "Protocol fields cannot be empty.",
            csNoAuthState: "Authentication state unavailable in server."
        }, c.internalErrors = {
            authOngoing: "authOngoing"
        }, c.authErrorActions = {
            RETRY: 0,
            GET_NEW_TOKEN: 1,
            REPORT_ERROR: 2
        };
    }, {} ],
    33: [ function(a, b, c) {
        "use strict";
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        c.logEvents = {
            stateMachine: "stateMachine",
            log: "log",
            timing: "timing",
            error: "error",
            getStatsError: "getStatsError",
            restResponseError: "restResponseError"
        }, c.fabricEvent = {
            fabricSetupFailed: "fabricSetupFailed",
            fabricHold: "fabricHold",
            fabricResume: "fabricResume",
            audioMute: "audioMute",
            audioUnmute: "audioUnmute",
            videoPause: "videoPause",
            videoResume: "videoResume",
            fabricUsageEvent: "fabricUsageEvent",
            fabricTerminated: "fabricTerminated",
            screenShareStart: "screenShareStart",
            screenShareStop: "screenShareStop",
            dominantSpeaker: "dominantSpeaker",
            activeDeviceList: "activeDeviceList",
            applicationErrorLog: "applicationErrorLog"
        }, c.internalFabricEvent = {
            fabricSetup: "fabricSetup",
            fabricSetupFailed: "fabricSetupFailed",
            userJoined: "userJoined",
            userLeft: "userLeft",
            userAlive: "userAlive",
            ssrcMap: "ssrcMap",
            mediaPlaybackStart: "mediaPlaybackStart",
            mediaPlaybackSuspended: "mediaPlaybackSuspended",
            mediaPlaybackStalled: "mediaPlaybackStalled",
            oneWayMedia: "oneWayMedia",
            fabricStateChange: "fabricStateChange",
            iceDisruptionStart: "iceDisruptionStart",
            iceDisruptionEnd: "iceDisruptionEnd",
            fabricTransportSwitch: "fabricTransportSwitch",
            iceConnectionDisruptionStart: "iceConnectionDisruptionStart",
            iceConnectionDisruptionEnd: "iceConnectionDisruptionEnd",
            iceAborted: "iceAborted",
            iceTerminated: "iceTerminated",
            iceFailed: "iceFailed",
            iceRestarted: "iceRestarted",
            fabricDropped: "fabricDropped",
            connectedDeviceList: "connectedDeviceList",
            sdpSubmission: "sdpSubmissionEvent",
            sendingThroughputObservations: "sendingThroughputObservations",
            limitationObservations: "limitationObservations",
            userDetails: "userDetails"
        }, c.callstatsChannels = {
            sdpSubmission: "sdpSubmissionEvent",
            processedStats: "processedStats",
            callstatsEvent: "callStatsEvent",
            userFeedback: "userFeedbackEvent",
            preCallTest: "preCallTest",
            senderConfiguration: "senderConfiguration"
        }, c.precalltestEvents = {
            results: "preCallTestResults",
            associate: "preCallTestAssociate"
        }, c.callstatsAPIReturnStatus = {
            success: "success",
            failure: "failure"
        }, c.fabricUsage = {
            audio: "audio",
            video: "video",
            data: "data",
            screen: "screen",
            multiplex: "multiplex",
            unbundled: "unbundled"
        }, c.userIdType = {
            local: "local",
            remote: "remote"
        }, c.qualityRating = {
            excellent: 5,
            good: 4,
            fair: 3,
            poor: 2,
            bad: 1
        }, c.reportType = {
            local: "local",
            remote: "remote",
            inbound: "inbound",
            outbound: "outbound"
        }, c.avQualityRatings = {
            excellent: "excellent",
            fair: "fair",
            bad: "bad",
            unknown: "unknown"
        }, c.fabricState = {
            established: "established",
            initializing: "initializing",
            failed: "failed",
            disrupted: "disrupted",
            hold: "hold",
            checkingDisrupted: "checkingDisrupted",
            terminated: "terminated"
        }, c.webRTCFunctions = {
            createOffer: "createOffer",
            createAnswer: "createAnswer",
            setLocalDescription: "setLocalDescription",
            setRemoteDescription: "setRemoteDescription",
            addIceCandidate: "addIceCandidate",
            getUserMedia: "getUserMedia",
            iceConnectionFailure: "iceConnectionFailure",
            signalingError: "signalingError",
            applicationError: "applicationError",
            applicationLog: "applicationLog"
        }, c.callFailureReasons = {
            mediaConfigError: "MediaConfigError",
            negotiationFailure: "NegotiationFailure",
            sdpError: "SDPGenerationError",
            iceFailure: "IceConnectionFailure",
            transportFailure: "TransportFailure",
            signalingError: "SignalingError",
            applicationError: "ApplicationError",
            applicationLog: "ApplicationLog",
            invalidWebRTCFunctionName: "Invalid WebRTC function name"
        }, c.throughputThreshold = {
            video: {
                green: 1024,
                red: 256
            },
            audio: {
                green: 30,
                red: 8
            }
        }, c.currOverPrevFrameRateThreshold = {
            video: {
                green: .8,
                red: .3
            }
        }, c.rttThreshold = {
            video: {
                green: 400,
                red: 1e3
            }
        }, c.fractionalLossThreshold = {
            video: {
                green: .1,
                red: .5
            },
            audio: {
                green: .15,
                red: .3
            }
        }, c.eModelThreshold = {
            audio: {
                green: 240,
                red: 400
            }
        }, c.codeBaseType = {
            chrome: "Chrome",
            firefox: "Firefox",
            edge: "Edge",
            plugin: "Plugin"
        }, c.browserName = {
            chrome: "Chrome",
            firefox: "Firefox",
            edge: "Edge",
            msie: "Microsoft Internet Explorer",
            safari: "Safari",
            opera: "Opera"
        }, c.osName = {
            windows: "Windows",
            mac: "Mac OS X",
            android: "Android",
            ios: "iOS"
        }, c.mediaType = {
            audio: "audio",
            video: "video"
        }, c.streamType = {
            inbound: "inbound",
            outbound: "outbound"
        }, c.fabricStateChangeType = {
            signalingState: "signalingState",
            iceConnectionState: "iceConnectionState",
            iceGatheringState: "iceGatheringState"
        }, c.transportType = {
            rest: "rest",
            ws: "ws"
        }, c.wsConnectionState = {
            initiated: "initiated",
            connected: "connected",
            closed: "closed"
        }, c.csCallBackMessages = {
            authSuccessful: "SDK authentication successful.",
            authFailed: "SDK authentication failed.",
            authProtocolInvalid: "Fatal authentication error. Invalid auth protocol message.",
            authOngoing: "Authentication on going.",
            wsConnected: "WebSocket establishment successful.",
            wsClosed: "WebSocket server closed.",
            wsFailed: "WebSocket establishment failed."
        }, c.oneWayMediaTypes = {
            audio: "audio",
            video: "video",
            screen: "screen"
        }, c.limitationType = {
            cpu: "cpu",
            network: "network"
        }, c.qualityDisruptionTypes = {
            qpchange: "qpchange"
        }, c.callbackFunctions = {
            stats: "stats",
            defaultConfig: "defaultConfig",
            recommendedConfig: "recommendedConfig",
            preCallTestResults: "preCallTestResults",
            preCallTest: "preCallTest"
        }, c.endpointType = {
            peer: "peer",
            server: "server"
        }, c.transmissionDirection = {
            sendonly: "sendonly",
            receiveonly: "receiveonly",
            sendrecv: "sendrecv",
            inactive: "inactive"
        }, c.tmpConferenceId = "csio-conf-id-tmp";
    }, {} ],
    34: [ function(a, b, c) {
        "use strict";
        function d(a) {
            c.configServiceUrl = m = a;
        }
        function e(a) {
            c.authServiceUrl = n = a;
        }
        function f(a) {
            c.conferenceBaseUrl = o = a;
        }
        function g(a) {
            c.wsUrl = p = a;
        }
        function h(a) {
            c.restEventUrl = q = a;
        }
        function i(a) {
            c.restStatsUrl = r = a;
        }
        function j(a) {
            c.baseUrl = s = a;
        }
        function k(a) {
            c.qmodelThresholdsAPIUrl = t = a;
        }
        function l(a) {
            c.transportType = u = a;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.setConfigServiceUrl = d, c.setAuthServiceUrl = e, c.setConferenceBaseUrl = f, 
        c.setWsUrl = g, c.setRestEventUrl = h, c.setRestStatsUrl = i, c.setBaseUrl = j, 
        c.setQmodelThresholdsAPIUrl = k, c.setTransportType = l;
        var m = (c.version = "3.53.1", c.configServiceUrl = "https://appsettings.callstats.io/v1/apps/"), n = c.authServiceUrl = "https://auth.callstats.io/", o = (c.authRetryTimeout = 5e3, 
        c.conferenceBaseUrl = "https://dashboard.callstats.io/apps/"), p = c.wsUrl = "wss://collector.callstats.io:443/csiows/collectCallStats", q = c.restEventUrl = "https://events.callstats.io/v1/apps/", r = c.restStatsUrl = "https://stats.callstats.io/v1/apps/", s = c.baseUrl = "https://collector.callstats.io:443/", t = c.qmodelThresholdsAPIUrl = "https://dashboard.callstats.io/api-internal/v1/qmodelthresholds", u = (c.csioDebug = "false", 
        c.transportType = "@@transportType");
    }, {} ],
    35: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a) {
            if (Array.isArray(a)) {
                for (var b = 0, c = Array(a.length); b < a.length; b++) c[b] = a[b];
                return c;
            }
            return Array.from(a);
        }
        function f(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function g(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function h(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        function i() {
            Array.prototype.find || Object.defineProperty(Array.prototype, "find", {
                value: function(a) {
                    if (null === this) throw new TypeError("Array.prototype.find called on null or undefined");
                    if ("function" != typeof a) throw new TypeError("predicate must be a function");
                    for (var b = Object(this), c = b.length >>> 0, d = arguments[1], e = void 0, f = 0; f < c; f++) if (e = b[f], 
                    a.call(d, e, f, b)) return e;
                }
            });
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.MainFSM = c.MainEvents = void 0;
        var j = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
            return typeof a;
        } : function(a) {
            return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
        }, k = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), l = a("./statemachine"), m = a("../utility/registry"), n = a("../utility/csiologger"), o = d(n), p = a("../utility/utils"), q = d(p), r = a("../utility/timestamps"), s = d(r), t = a("../config/constants"), u = d(t), v = a("../config/settings"), w = d(v), x = a("./utility"), y = d(x), z = a("../statspipeline/statsadapter"), A = a("../statspipeline/statsparser"), B = a("../statspipeline/statsmonitor"), C = a("../statspipeline/statstransmitter"), D = a("../statspipeline/statsassembler"), E = {
            Created: "Created",
            Initializing: "Initializing",
            Idle: "Idle",
            Run: "Run"
        }, F = c.MainEvents = {
            onStart: "onStart",
            onInitialize: "onInitialize",
            onAddNewFabric: "onAddNewFabric",
            onSendFabricEvent: "onSendFabricEvent",
            onReportError: "onReportError",
            onAssociateMstWithUserID: "onAssociateMstWithUserID",
            onSetProxyConfig: "onSetProxyConfig",
            onAttachWifiStatsHandler: "onAttachWifiStatsHandler",
            onSendUserFeedback: "onSendUserFeedback",
            onOn: "onOn",
            onSetIdentifiers: "onSetIdentifiers",
            onMakePrecallTest: "onMakePrecallTest"
        }, G = {
            onServicesFinished: "onServicesFinished"
        }, H = function(a) {
            function b() {
                f(this, b);
                var a = g(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, E.Created));
                return o.log("FSM:", a.getState()), a.fire(F.onStart), a.run(), i(), a;
            }
            return h(b, a), k(b, [ {
                key: "proceed",
                value: function(a, b) {
                    switch (this.getState()) {
                      case E.Created:
                        switch (a) {
                          case F.onStart:
                            this.onStart.apply(this, e(b));
                            break;

                          case F.onInitialize:
                            this.setState(E.Initializing), o.log("FSM:", this.getState()), this.onInitialize.apply(this, e(b));
                            break;

                          case F.onOn:
                            this.onOn.apply(this, e(b));
                            break;

                          case F.onSetProxyConfig:
                            this.onSetProxyConfig.apply(this, e(b));
                        }
                        break;

                      case E.Initializing:
                        switch (a) {
                          case G.onServicesFinished:
                            this.onServicesFinished() && (this.setState(E.Idle), o.log("FSM:", this.getState()));
                            break;

                          case F.onAddNewFabric:
                            this.onAddNewFabric.apply(this, e(b));
                            break;

                          case F.onSendFabricEvent:
                            this.onSendFabricEvent.apply(this, e(b));
                            break;

                          case F.onReportError:
                            this.onReportError.apply(this, e(b));
                            break;

                          case F.onAssociateMstWithUserID:
                            this.onAssociateMstWithUserID.apply(this, e(b));
                            break;

                          case F.onSendUserFeedback:
                            this.onSendUserFeedback.apply(this, e(b));
                            break;

                          case F.onAttachWifiStatsHandler:
                            this.onAttachWifiStatsHandler.apply(this, e(b));
                            break;

                          case F.onOn:
                            this.onOn.apply(this, e(b));
                            break;

                          case F.onMakePrecallTest:
                            this.onMakePrecallTest.apply(this, e(b));
                            break;

                          case F.onSetIdentifiers:
                            this.onSetIdentifiers.apply(this, e(b));
                            break;

                          case F.onSetProxyConfig:
                            this.onSetProxyConfig.apply(this, e(b));
                        }
                        break;

                      case E.Idle:
                      case E.Run:
                        switch (a) {
                          case F.onAddNewFabric:
                            this.onAddNewFabric.apply(this, e(b));
                            break;

                          case F.onSendFabricEvent:
                            this.onSendFabricEvent.apply(this, e(b));
                            break;

                          case F.onReportError:
                            this.onReportError.apply(this, e(b));
                            break;

                          case F.onAssociateMstWithUserID:
                            this.onAssociateMstWithUserID.apply(this, e(b));
                            break;

                          case F.onSendUserFeedback:
                            this.onSendUserFeedback.apply(this, e(b));
                            break;

                          case F.onAttachWifiStatsHandler:
                            this.onAttachWifiStatsHandler.apply(this, e(b));
                            break;

                          case F.onOn:
                            this.onOn.apply(this, e(b));
                            break;

                          case F.onSetProxyConfig:
                            this.onSetProxyConfig.apply(this, e(b));
                            break;

                          case F.onMakePrecallTest:
                            this.onMakePrecallTest.apply(this, e(b));
                            break;

                          case F.onSetIdentifiers:
                            this.onSetIdentifiers.apply(this, e(b));
                        }
                    }
                }
            }, {
                key: "onStart",
                value: function() {
                    m.Registry.getEndpoint().setup(), this.authenticator = m.Registry.getAuthenticator(), 
                    this.configservicewrapper = m.Registry.getConfigServiceWrapper(), this.precalltest = m.Registry.getPreCallTest(), 
                    this.precalltestIds = [];
                    var a = m.Registry.getStatsAdapter(), b = m.Registry.getStatsParser(), c = m.Registry.getStatsMonitor(), d = m.Registry.getStatsTransmitter(), e = m.Registry.getStatsAssembler();
                    a.connect(z.StatsAdapterIO.RawStatsOut, b.getPort(A.StatsParserIO.RawStatsIn)), 
                    b.connect(A.StatsParserIO.PcStatsTupleOut, c.getPort(B.StatsMonitorIO.PcStatsTupleIn)), 
                    c.connect(B.StatsMonitorIO.StatsTupleOut, e.getPort(D.StatsAssemblerIO.StatsTupleIn)), 
                    e.connect(D.StatsAssemblerIO.CallstatsOut, d.getPort(C.StatsTransmitterIO.CallstatsIn)), 
                    a.connect(z.StatsAdapterIO.UnprocessedOut, d.getPort(C.StatsTransmitterIO.UnprocessedIn));
                }
            }, {
                key: "setupConnection",
                value: function() {
                    var a = this;
                    this.connectionManager = m.Registry.getConnectionManager(), this.connectionManager.setupCollectorConnection(m.Registry.getCredentials().getTransportType()), 
                    this.connectionManager.setup().then(function() {
                        o.log("Connected to connectionManager"), a.fire(G.onServicesFinished), a.run();
                    }).catch(function(a) {
                        return o.log("Could not connect to connectionManager", a);
                    });
                }
            }, {
                key: "setup",
                value: function() {
                    var a = this;
                    this.clocksync = m.Registry.getClockSync(), this.clocksync.initiate().then(function() {
                        o.log("Clocksync completed"), a.fire(G.onServicesFinished), a.run();
                    }).catch(function(a) {
                        return o.log("Could not finish ClockSync", a);
                    });
                }
            }, {
                key: "onInitialize",
                value: function(a, b, c, d, e, f) {
                    var g = this, h = m.Registry.getCredentials();
                    if (h.setAppId(a), h.setUserId(b), m.Registry.getCallbacks().set(u.callbackFunctions.stats, e), 
                    this.doPrecalltest = !0, f) {
                        if (!0 === f.disableBeforeUnloadHandler && this.setBeforeUnloadHandler(), f.applicationVersion) {
                            m.Registry.getEndpoint().setAppVersion(f.applicationVersion);
                        }
                        f.transportType && w.setTransportType(f.transportType), f.disablePrecalltest && (this.doPrecalltest = !1);
                    }
                    this.setup(), this.authenticator.initiate(c, d).then(function(a) {
                        o.log("Authentication complete"), g.setupConnection();
                        var b = m.Registry.getCredentials().getStatsSubmissionInterval();
                        m.Registry.getStatsMonitor().setIntervals(b, b), g.fire(G.onServicesFinished), g.run();
                        var c = g.authenticator.getIceServers();
                        c && g.doPrecalltest && g.precalltest.start(c, "callstats", g.precalltestCallback.bind(g)), 
                        g.configservicewrapper.initiateInternalConfig().then(function() {
                            o.log("ConfigService internal config:", g.configservicewrapper.getInternalConfig()), 
                            g.fire(G.onServicesFinished), g.run();
                        }, function(a) {
                            return o.log(a);
                        }), g.configservicewrapper.initiateAppConfig().then(function() {
                            var a = m.Registry.getCallbacks().get(u.callbackFunctions.defaultConfig), b = g.configservicewrapper.getAppDefaultConfig();
                            a && b && a(b);
                            var c = m.Registry.getCallbacks().get(u.callbackFunctions.recommendedConfig), d = g.configservicewrapper.getAppRecommendedConfig();
                            c && d && c(d), g.fire(G.onServicesFinished), g.run();
                        }, function(a) {
                            return o.log(a);
                        });
                    }, function(a) {
                        o.log(a);
                    });
                }
            }, {
                key: "precalltestCallback",
                value: function(a, b) {
                    var c = m.Registry.getCallbacks().get(u.callbackFunctions.preCallTestResults), d = m.Registry.getCallbacks().get(u.callbackFunctions.preCallTest);
                    if (d && d(a), c) {
                        if (b) {
                            var e = {
                                msg: "precalltest error: " + b
                            };
                            return o.warn("backendlog", e), m.Registry.getGenericEventHandler().sendEvent(u.logEvents.log, e), 
                            void c(u.callstatsAPIReturnStatus.failure, null);
                        }
                        var f = y.getPublicPrecalltestResults(a);
                        c(u.callstatsAPIReturnStatus.success, f);
                    }
                    a && (this.precalltestIds.push(a.id), a.tests && a.tests.ice && ("" === a.tests.ice.turnIpAddress && delete a.tests.ice.turnIpAddress, 
                    "" === a.tests.ice.turnIpVersion && delete a.tests.ice.turnIpVersion, "" === a.tests.ice.turnTransport && delete a.tests.ice.turnTransport), 
                    o.log("sending preCallTest results", a), m.Registry.getEventMessageBuilder().make(u.precalltestEvents.results, null, null, {
                        results: a
                    }));
                }
            }, {
                key: "setBeforeUnloadHandler",
                value: function() {
                    window && window.addEventListener && (o.log("setBeforeUnloadHandler"), window.addEventListener("beforeunload", function(a) {
                        return m.Registry.getConferenceManager().conferenceMap.forEach(function(a, b) {
                            a && a.getPeerConnectionManager().pcHandlers.forEach(function(a, b) {
                                m.Registry.getEventMessageBuilder().make(u.internalFabricEvent.userLeft, a.getConferenceId(), a.getPeerConnection());
                            });
                        }), "Are you sure you want to close the call?";
                    }));
                }
            }, {
                key: "onServicesFinished",
                value: function() {
                    return !!(this.connectionManager && this.connectionManager.isReady() && this.clocksync.isCompleted() && this.authenticator.isCompleted()) && (m.Registry.getTransmissionManager().trySend(), 
                    !0);
                }
            }, {
                key: "onAddNewFabric",
                value: function(a, b, c, d, e, f, g) {
                    o.warn("FSM onAddNewFabric"), m.Registry.getConferenceManager().add(d, m.Registry.getCredentials());
                    var h = m.Registry.getConferenceManager().get(d);
                    h.getPeerConnectionManager().addPcHandler(a, b, c, d, e, f, g);
                    var i = {
                        endpointInfo: m.Registry.getEndpoint().serialize()
                    };
                    m.Registry.getCredentials().getUserIdObject() && (i.localUserIDObject = m.Registry.getCredentials().getUserIdObject()), 
                    h.userJoinedSent || (m.Registry.getEventMessageBuilder().make(u.internalFabricEvent.userJoined, d, a, i), 
                    h.userJoinedSent = !0, m.Registry.getCredentials().getTransportType() === u.transportType.rest && i.localUserIDObject && i.localUserIDObject.userName && m.Registry.getEventMessageBuilder().make(u.internalFabricEvent.userDetails, d, a, {
                        userName: String(i.localUserIDObject.userName)
                    }));
                    var j = this.precalltestIds;
                    this.precalltestIds = [];
                    var k = this.precalltest.getId();
                    k && j.push(k), j.length > 0 && m.Registry.getEventMessageBuilder().make(u.precalltestEvents.associate, d, a, {
                        ids: j
                    });
                }
            }, {
                key: "onSendFabricEvent",
                value: function(a, b, c, d) {
                    o.warn("FSM onSendFabricEvent");
                    var e = {};
                    if (d && (e = d, e.ssrc && (e.ssrc = String(e.ssrc))), b === u.fabricEvent.activeDeviceList) {
                        e = {
                            mediaDeviceList: q.normalizeMediaDeviceList(d.deviceList)
                        };
                    }
                    m.Registry.getEventMessageBuilder().make(b, c, a, e);
                    var f = m.Registry.getConferenceManager().get(c);
                    if (f) {
                        var g = f.getPeerConnectionManager().getPcHandler(a);
                        b !== u.fabricEvent.fabricTerminated && b !== u.internalFabricEvent.fabricSetupFailed || (g.stopUserAliveHandler(), 
                        g.setPcState(u.fabricState.terminated), g.stopStatsPolling(), f.getPeerConnectionManager().removePcHandler(a)), 
                        b === u.fabricEvent.fabricHold && (g.setPcState(u.fabricState.hold), g.stopStatsPolling()), 
                        b === u.fabricEvent.fabricResume && (g.setPcState(u.fabricState.established), g.startStatsPolling());
                    }
                }
            }, {
                key: "onReportError",
                value: function(a, b, c, d, e, f) {
                    o.warn("FSM onReportError");
                    var g = {
                        failureDelay: 0,
                        reason: this.callFailureClassifier(c),
                        function: c,
                        magicKey: m.Registry.getEndpoint().getMagicKey(),
                        endpoint: m.Registry.getEndpoint().serialize(),
                        level: "debug"
                    };
                    if (d) {
                        var h = this.formatDomError(d);
                        g.message = h.message, g.messageType = h.messageType, g.name = d.name, g.stack = d.stack;
                    }
                    if (a) {
                        var i = m.Registry.getConferenceManager().get(b), j = void 0;
                        if (i && (j = i.getPeerConnectionManager().getPcHandler(a)), !j) return void o.error("onReportError: No handler found for given PeerConnection!");
                        if (g.failureDelay = s.getCurrent() - j.getStartTime(), g.fabricState = j.getPcState(), 
                        g.iceConnectionState = j.getIceConnectionState(), (e || f || a && "closed" !== a.signalingState) && m.Registry.getCredentials().getCollectSDP() && c === u.fabricEvent.fabricSetupFailed) {
                            var k = {};
                            k.localSDP = this.pickSDP(a, e, "localDescription"), k.remoteSDP = this.pickSDP(a, f, "remoteDescription"), 
                            m.Registry.getEventMessageBuilder().make(u.callstatsChannels.sdpSubmission, b, a, k);
                        }
                    }
                    c === u.webRTCFunctions.applicationLog || c === u.webRTCFunctions.applicationError ? m.Registry.getEventMessageBuilder().make(u.fabricEvent.applicationErrorLog, b, a, g) : (m.Registry.getEventMessageBuilder().make(u.fabricEvent.fabricSetupFailed, b, a, g), 
                    c === u.webRTCFunctions.getUserMedia && this.handleGUMErrors(b));
                }
            }, {
                key: "onAssociateMstWithUserID",
                value: function(a, b, c, d, e, f) {
                    var g = m.Registry.getConferenceManager().get(c);
                    if (g) {
                        var h = g.getPeerConnectionManager().getPcHandler(a);
                        "string" != typeof d && (d += ""), h.updateSSRCInfo(d, b, e, f);
                    }
                }
            }, {
                key: "onAttachWifiStatsHandler",
                value: function(a) {
                    m.Registry.getWifiStatsExecutor().setGetWifiStatsMethod(a);
                }
            }, {
                key: "onSetProxyConfig",
                value: function(a) {
                    o.warn("FSM onSetProxyConfig"), a.collectorURL && w.setBaseUrl(a.collectorURL), 
                    a.authServiceURL && w.setAuthServiceUrl(a.authServiceURL), a.csioInternalAPIURL && w.setQmodelThresholdsAPIUrl(a.csioInternalAPIURL), 
                    a.wsURL && w.setWsUrl(a.wsURL), a.restEventURL && w.setRestEventUrl(a.restEventURL), 
                    a.restStatsURL && w.setRestStatsUrl(a.restStatsURL), a.appSettingsURL && w.setConfigServiceUrl(a.appSettingsURL);
                }
            }, {
                key: "onSendUserFeedback",
                value: function(a, b, c) {
                    var d = {
                        feedback: {
                            overallRating: b.overall
                        }
                    };
                    b.video && (d.feedback.videoQualityRating = b.video), b.audio && (d.feedback.audioQualityRating = b.audio), 
                    b.comment && (d.feedback.comments = b.comment), m.Registry.getEventMessageBuilder().make(u.callstatsChannels.userFeedback, a, null, d);
                }
            }, {
                key: "onOn",
                value: function(a, b) {
                    m.Registry.getCallbacks().set(a, b);
                }
            }, {
                key: "onSetIdentifiers",
                value: function(a, b) {
                    if (a.conferenceID && (m.Registry.getConferenceManager().updateConferenceId(a.conferenceID), 
                    m.Registry.getTransmissionManager().updateConferenceId(a.conferenceID), m.Registry.getTransmissionManager().trySend()), 
                    a.remoteUserID && b) {
                        var c = m.Registry.getConferenceManager().getConferenceForPc(b);
                        if (!c) return void o.log("onSetIdentifiers conference not found");
                        var d = c.getPeerConnectionManager().getPcHandler(b);
                        if (!d) return void o.log("pcHandler not found");
                        d.updateRemoteId(a.remoteUserID), m.Registry.getTransmissionManager().trySend();
                    }
                }
            }, {
                key: "onMakePrecallTest",
                value: function(a, b) {
                    var c = this, d = a, e = b || "callstats";
                    a || (d = this.authenticator.getIceServers(), e = "callstats"), c.precalltest.start(d, e, c.precalltestCallback.bind(c));
                }
            }, {
                key: "handleGUMErrors",
                value: function(a) {
                    var b = m.Registry.getConferenceManager().get(a);
                    if (b || (m.Registry.getConferenceManager().add(a, m.Registry.getCredentials()), 
                    b = m.Registry.getConferenceManager().get(a)), !b.getUcId()) {
                        var c = {
                            endpointInfo: m.Registry.getEndpoint().serialize()
                        };
                        m.Registry.getEventMessageBuilder().make(u.internalFabricEvent.userJoined, a, null, c), 
                        b.userJoinedSent = !0;
                    }
                }
            }, {
                key: "callFailureClassifier",
                value: function(a) {
                    var b = void 0;
                    return u.webRTCFunctions.hasOwnProperty(a) ? a === u.webRTCFunctions.createOffer || a === u.webRTCFunctions.createAnswer || a === u.webRTCFunctions.setRemoteDescription ? b = u.callFailureReasons.negotiationFailure : a === u.webRTCFunctions.setLocalDescription ? b = u.callFailureReasons.sdpError : a === u.webRTCFunctions.addIceCandidate ? b = u.callFailureReasons.sdpError : a === u.webRTCFunctions.getUserMedia ? b = u.callFailureReasons.mediaConfigError : a === u.webRTCFunctions.iceConnectionFailure ? b = u.callFailureReasons.iceFailure : a === u.webRTCFunctions.signalingError ? b = u.callFailureReasons.signalingError : (a === u.webRTCFunctions.applicationLog || u.webRTCFunctions.applicationError) && (b = u.callFailureReasons.applicationLog) : b = u.callFailureReasons.invalidWebRTCFunctionName, 
                    b;
                }
            }, {
                key: "formatDomError",
                value: function(a) {
                    var b = {}, c = {};
                    a && (window.DOMException && a instanceof window.DOMException ? (c.message = a.message, 
                    c.name = a.name, b.messageType = "domError") : "object" === (void 0 === a ? "undefined" : j(a)) ? (a.message && (c.message = a.message), 
                    a.name && (c.name = a.name), a.constraintName && (c.name = a.constraintName), a.stack && (c.stack = a.stack), 
                    b.messageType = "json") : (c = a, b.messageType = "text"));
                    var d = this.truncateLog(c);
                    return "object" === (void 0 === d ? "undefined" : j(d)) ? b.message = JSON.stringify(d) : b.message = d, 
                    b;
                }
            }, {
                key: "pickSDP",
                value: function(a, b, c) {
                    return b || (a && a[c] ? a[c].sdp : "");
                }
            }, {
                key: "truncateString",
                value: function(a) {
                    return a.length > 2e4 && (o.log("Log exceeds 20kb, It will be truncated"), a = a.substring(0, 2e4)), 
                    a;
                }
            }, {
                key: "truncateLog",
                value: function(a) {
                    return a ? ("string" == typeof a ? a = this.truncateString(a) : "object" === (void 0 === a ? "undefined" : j(a)) && a.message && (a.message = this.truncateString(a.message)), 
                    a) : a;
                }
            } ]), b;
        }(l.StateMachine);
        c.MainFSM = H;
    }, {
        "../config/constants": 33,
        "../config/settings": 34,
        "../statspipeline/statsadapter": 69,
        "../statspipeline/statsassembler": 70,
        "../statspipeline/statsmonitor": 72,
        "../statspipeline/statsparser": 73,
        "../statspipeline/statstransmitter": 74,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "../utility/timestamps": 99,
        "../utility/utils": 101,
        "./statemachine": 37,
        "./utility": 38
    } ],
    36: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a(b, c) {
                d(this, a), this.type = b, this.args = void 0 !== c ? c : null;
            }
            return e(a, [ {
                key: "getType",
                value: function() {
                    return this.type;
                }
            }, {
                key: "getArgs",
                value: function() {
                    return this.args;
                }
            } ]), a;
        }();
        c.ProgramEvent = f;
    }, {} ],
    37: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.StateMachine = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./programevent"), g = a("../utility/csiologger"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = function() {
            function a(b) {
                d(this, a), this.events = [], this.state = b;
            }
            return e(a, [ {
                key: "fire",
                value: function(a) {
                    for (var b = arguments.length, c = Array(b > 1 ? b - 1 : 0), d = 1; d < b; d++) c[d - 1] = arguments[d];
                    var e = new f.ProgramEvent(a, c);
                    this.events.push(e);
                }
            }, {
                key: "proceed",
                value: function(a, b) {
                    h.warn("You need to overwrite the proceed function inan extended StateMachine");
                }
            }, {
                key: "setState",
                value: function(a) {
                    this.state = a;
                }
            }, {
                key: "getState",
                value: function() {
                    return this.state;
                }
            }, {
                key: "run",
                value: function() {
                    if (!(this.events.length < 1)) {
                        var a = this.events.shift();
                        this.proceed(a.getType(), a.getArgs());
                    }
                }
            } ]), a;
        }();
        c.StateMachine = i;
    }, {
        "../utility/csiologger": 88,
        "./programevent": 36
    } ],
    38: [ function(a, b, c) {
        "use strict";
        function d(a) {
            var b = {
                mediaConnectivity: !1,
                throughput: null,
                fractionalLoss: null,
                rtt: null
            };
            return a && a.tests ? (b.provider = a.provider, a.tests.rtt && (b.rtt = a.tests.rtt.median, 
            b.mediaConnectivity = !0), a.tests.throughput && (b.throughput = a.tests.throughput.average, 
            b.fractionalLoss = Math.max(a.tests.throughput.fractionLostBytes, 0), b.mediaConnectivity = !0), 
            a.tests.ice && (a.tests.ice.relayTcpSuccess || a.tests.ice.relayTlsSuccess || a.tests.ice.relayUdpSuccess) && (b.mediaConnectivity = !0), 
            b) : b;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.getPublicPrecalltestResults = d;
    }, {} ],
    39: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.GetStatsHandler = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../config/constants"), h = d(g), i = a("../statspipeline/statsadapter"), j = a("../utility/registry"), k = a("../utility/rttregistry"), l = a("../utility/csiologger"), m = d(l), n = function() {
            function a(b, c, d, f, g) {
                e(this, a), this.pc = b, this.interval = d, this.codeBase = f, this.browserName = g, 
                this.getStatsTimer = null, this.isPromiseBased = !0, this.pcHash = c, this.genericevent = j.Registry.getGenericEventHandler();
            }
            return f(a, [ {
                key: "startStatsPolling",
                value: function() {
                    var a = this;
                    a.getStatsTimer || (m.log("startStatsPolling for ", a.pcHash), this.getStatsTimer = setInterval(function() {
                        a.csioGetStats(a.statsHandler, a.pcHash);
                    }, a.interval));
                }
            }, {
                key: "stopStatsPolling",
                value: function() {
                    this.getStatsTimer && (clearInterval(this.getStatsTimer), this.getStatsTimer = null);
                }
            }, {
                key: "csioGetStats",
                value: function(a, b) {
                    var c = h.codeBaseType.firefox, d = h.codeBaseType.chrome, e = h.codeBaseType.edge, f = h.browserName.safari;
                    if (this.pc) {
                        if ("closed" === this.pc.iceConnectionState) return void this.stopStatsPolling();
                        try {
                            this.isTemaSys() ? this.getStatsTemasys(a, b) : this.codeBase === c ? this.getStatsFirefox(a, b) : this.browserName === f ? this.getStatsSafari(a, b) : this.codeBase === d ? this.getStatsChrome(a, b) : this.codeBase === e && this.getStatsEdge(a, b);
                        } catch (a) {
                            m.log("csioGetStats: Error ", a);
                        }
                    }
                }
            }, {
                key: "getStatsTemasys",
                value: function(a, b) {
                    this.pc.getStats(null, function(c) {
                        a(c, b);
                    }, function(a) {
                        m.log("getStatsTemasys error", a);
                    });
                }
            }, {
                key: "getStatsFirefox",
                value: function(a, b) {
                    var c = this, d = this.pc;
                    if (!c.isPromiseBased) return void d.getStats(null, function(c) {
                        a(c, b);
                    });
                    try {
                        d.getStats().then(function(c) {
                            a(c, b);
                        }).catch(function(e) {
                            c.isPromiseBased = !1, d.getStats(null, function(c) {
                                a(c, b);
                            });
                        });
                    } catch (e) {
                        c.isPromiseBased = !1, c.genericevent.sendEvent(h.logEvents.getStatsError, {
                            msg: "Firefox getStats reports error ",
                            error: e.message + ":" + e.stack
                        }), d.getStats(null, function(c) {
                            a(c, b);
                        });
                    }
                }
            }, {
                key: "getStatsChrome",
                value: function(a, b) {
                    var c = this, d = c.pc;
                    if (window && window.csioReactNative) return void d.getStats(null, function(c) {
                        a(c, b);
                    }, function(a) {
                        c.genericevent.sendEvent(h.logEvents.getStatsError, {
                            msg: "react-native getStats reports error",
                            error: a.message + ":" + a.stack
                        });
                    });
                    if (!c.isPromiseBased) return void d.getStats(function(c) {
                        a(c, b);
                    });
                    try {
                        d.getStats().then(function(c) {
                            (0, k.getRTTRegistry)().update(d), a(c, b);
                        }).catch(function(e) {
                            m.log("Chrome getStats Error ", e), c.isPromiseBased = !1, c.genericevent.sendEvent(h.logEvents.getStatsError, {
                                msg: "Chrome getStats reports error",
                                error: e.message + ":" + e.stack
                            }), d.getStats(function(c) {
                                a(c, b);
                            });
                        });
                    } catch (e) {
                        c.isPromiseBased = !1, c.genericevent.sendEvent(h.logEvents.getStatsError, {
                            msg: "Chrome getStats reports error",
                            error: e.message + ":" + e.stack
                        }), d.getStats(function(c) {
                            a(c, b);
                        });
                    }
                }
            }, {
                key: "getStatsEdge",
                value: function(a, b) {
                    var c = this;
                    c.pc.getStats().then(function(c) {
                        a(c, b);
                    }).catch(function(d) {
                        a({}, b), d ? c.genericevent.sendEvent(h.logEvents.getStatsError, {
                            msg: "Edge getStats reports error",
                            error: d.message + ":" + d.stack
                        }) : c.genericevent.sendEvent(h.logEvents.getStatsError, {
                            msg: "Edge getStats reports error"
                        });
                    });
                }
            }, {
                key: "getStatsSafari",
                value: function(a, b) {
                    var c = this;
                    c.pc.getStats().then(function(c) {
                        a(c, b);
                    }).catch(function(a) {
                        c.genericevent.sendEvent(h.logEvents.getStatsError, {
                            msg: "Safari getStats reports error",
                            error: a.message + ":" + a.stack
                        });
                    });
                }
            }, {
                key: "statsHandler",
                value: function(a, b) {
                    var c = j.Registry.getStatsAdapter();
                    if (a && c) try {
                        c.transmit(i.StatsAdapterIO.RawStatsIn, a, b);
                    } catch (a) {
                        m.log("statsHandler 123: Error ", a), j.Registry.getGenericEventHandler().sendEvent(h.logEvents.error, {
                            msg: "statsHandler: Error",
                            error: a.message + ":" + a.stack
                        });
                    }
                }
            }, {
                key: "iceCandidatesHandler",
                value: function(a, b) {
                    var c = j.Registry.getStatsAdapter(), d = void 0;
                    d = c.getIceCandidates(a), b(d);
                }
            }, {
                key: "getIceCandidates",
                value: function() {
                    var a = this;
                    return new Promise(function(b, c) {
                        a.csioGetStats(a.iceCandidatesHandler, function(a) {
                            b(a);
                        });
                    });
                }
            }, {
                key: "isTemaSys",
                value: function() {
                    return !!(window && window.AdapterJS && window.AdapterJS.WebRTCPlugin && window.AdapterJS.WebRTCPlugin.plugin);
                }
            } ]), a;
        }();
        c.GetStatsHandler = n;
    }, {
        "../config/constants": 33,
        "../statspipeline/statsadapter": 69,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "../utility/rttregistry": 96
    } ],
    40: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.PcCallbackHandler = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../config/constants"), h = d(g), i = a("../utility/registry"), j = a("../utility/timestamps"), k = d(j), l = a("../config/callstatserrors"), m = d(l), n = a("../utility/csiologger"), o = d(n), p = function() {
            function a(b, c, d, f, g, j) {
                var l = this;
                e(this, a), c && (this.conferenceId = b, this.pc = c, this.getStatsHandler = d, 
                this.userAlive = f, this.callback = j, this.remoteId = g, this.clocksync = i.Registry.getClockSync(), 
                this.emb = i.Registry.getEventMessageBuilder(), this.precalltest = i.Registry.getPreCallTest(), 
                this.genericevent = i.Registry.getGenericEventHandler(), this.iceCandidates = [], 
                this.iceConnectionState = c.iceConnectionState, this.iceGatheringState = c.iceGatheringState, 
                this.signalingState = c.signalingState, this.oldIceConnectionState = "", this.oldIceGatheringState = "", 
                this.iceConnectionStateTS = "", this.negotiationNeeded = 0, this.pcState = h.fabricState.initializing, 
                this.disruptedTS = 0, this.connectionDisruptedTS = 0, this.startTime = k.getCurrent(), 
                this.established = !1, this.activeIceCandidatePair = null, this.prevActiveIceCandidatePair = null, 
                this.localIceCandidates = [], this.remoteIceCandidates = [], this.iceCandidatePairs = [], 
                this.iceConnectivityDelay = 0, this.iceGatheringDelay = 0, this.fabricSetupSent = !1, 
                this.pc && this.pc.addEventListener ? (this.pc.addEventListener("icecandidate", this.iceCandidateCallback.bind(this), !1), 
                this.pc.addEventListener("iceconnectionstatechange", this.iceConnectionStateChangeCallback.bind(this), !1), 
                this.pc.addEventListener("signalingstatechange", this.pcSignalingStateChangeCallback.bind(this), !1), 
                this.pc.addEventListener("negotiationneeded", this.pcNegotiationNeededCallback.bind(this), !1)) : this.pc && this.pc.attachEvent ? (o.info("attachEvent"), 
                this.pc.attachEvent("onicecandidate", this.iceCandidateCallback.bind(this)), this.pc.attachEvent("oniceconnectionstatechange", this.iceConnectionStateChangeCallback.bind(this)), 
                this.pc.attachEvent("onsignalingstatechange", this.pcSignalingStateChangeCallback.bind(this)), 
                this.pc.attachEvent("onnegotiationneeded", this.pcNegotiationNeededCallback.bind(this))) : o.error("callstats cannot monitor or collect stats"), 
                !c || "connected" !== c.iceConnectionState && "completed" !== c.iceConnectionState || (this.pcState = h.fabricState.established, 
                this.getStatsHandler.getIceCandidates().then(function(a) {
                    l.localIceCandidates = a.localIceCandidates, l.remoteIceCandidates = a.remoteIceCandidates, 
                    l.iceCandidatePairs = a.iceCandidatePairs, l.prevActiveIceCandidatePair = l.activeIceCandidatePair, 
                    l.activeIceCandidatePair = l.getActiveIceCandidatePair(), l.sendfabricSetup(), l.startStatsPolling();
                })));
            }
            return f(a, [ {
                key: "iceCandidateCallback",
                value: function(a) {
                    if (a && a.candidate) {
                        var b = a.candidate.candidate.split(" ");
                        if ("0" !== b[4] && "0" !== b[5]) {
                            var c = -1 !== b[4].indexOf(":"), d = "1" === b[1] ? "rtp" : "rtcp", e = {
                                transport: b[2],
                                protocol: d,
                                typePreference: b[3],
                                address: c ? "[" + b[4] + "]:" + b[5] : b[4] + ":" + b[5],
                                type: b[7],
                                media: a.candidate.sdpMid
                            };
                            -1 === this.iceCandidates.indexOf(e) && (this.iceCandidates.push(e), o.warn("CALLBACK: ICE candidate", e));
                        }
                    }
                }
            }, {
                key: "iceConnectionStateChangeCallback",
                value: function(a) {
                    var b = this;
                    if (a) {
                        o.log("pc states ", this.pc.iceGatheringState, this.pc.iceConnectionState), this.iceConnectionStateTS = this.clocksync.getSynchronizedTimestamp(), 
                        this.handleIceGatheringState(), this.handleIceConnectionState(), o.log("states ", this.iceGatheringState, this.iceConnectionState), 
                        "complete" === this.iceGatheringState && "checking" === this.iceConnectionState && this.handleIceChecking();
                        var c = {
                            prevIceConnectionState: this.oldIceConnectionState,
                            currIceConnectionState: this.iceConnectionState
                        }, d = this.iceConnectionState;
                        this.getStatsHandler.getIceCandidates().then(function(a) {
                            b.localIceCandidates = a.localIceCandidates, b.remoteIceCandidates = a.remoteIceCandidates, 
                            b.iceCandidatePairs = a.iceCandidatePairs, b.prevActiveIceCandidatePair = b.activeIceCandidatePair, 
                            b.activeIceCandidatePair = b.getActiveIceCandidatePair(), "connected" === d || "completed" === d ? b.handleIceConnectedOrCompleted(c) : "failed" === d ? b.handleIceFailed(c) : "disconnected" === d ? b.handleIceDisconnected(c) : "closed" === d ? b.handleIceClosed(c) : "new" === d && b.handleIceRestart(c);
                        });
                    }
                }
            }, {
                key: "sendFabricStateChange",
                value: function(a) {
                    this.emb.make(h.internalFabricEvent.fabricStateChange, this.conferenceId, this.pc, a);
                }
            }, {
                key: "handleIceConnectionState",
                value: function() {
                    this.oldIceConnectionState = this.iceConnectionState, this.iceConnectionState = this.pc.iceConnectionState, 
                    o.warn("CALLBACK: ICE connection state change", this.oldIceConnectionState, "->", this.iceConnectionState);
                    var a = {
                        changedState: h.fabricStateChangeType.iceConnectionState,
                        prevState: this.oldIceConnectionState,
                        newState: this.iceConnectionState
                    };
                    this.sendFabricStateChange(a);
                }
            }, {
                key: "handleIceGatheringState",
                value: function() {
                    if (this.iceGatheringState !== this.pc.iceGatheringState) {
                        "complete" === this.pc.iceGatheringState && (this.iceGatheringDelay = k.getCurrent() - this.startTime), 
                        this.oldIceGatheringState = this.iceGatheringState, this.iceGatheringState = this.pc.iceGatheringState, 
                        o.warn("CALLBACK: ICE gathering state change", this.oldIceGatheringState, "->", this.iceGatheringState);
                        var a = {
                            changedState: h.fabricStateChangeType.iceGatheringState,
                            prevState: this.oldIceGatheringState,
                            newState: this.iceGatheringState
                        };
                        this.sendFabricStateChange(a);
                    }
                }
            }, {
                key: "handleIceChecking",
                value: function() {
                    var a = k.getCurrent();
                    if ("disconnected" === this.oldIceConnectionState && (this.pcState === h.fabricState.checkingDisrupted || this.pcState === h.fabricState.disrupted)) {
                        var b = {
                            prevIceConnectionState: this.oldIceConnectionState,
                            currIceConnectionState: this.iceConnectionState,
                            delay: a - this.connectionDisruptedTS
                        };
                        this.pcState === h.fabricState.disrupted && (b.prevIceCandidatePair = this.prevActiveIceCandidatePair, 
                        b.currIceCandidatePair = this.activeIceCandidatePair, b.delay = a - this.disruptedTS, 
                        this.emb.make(h.internalFabricEvent.iceDisruptionEnd, this.conferenceId, this.pc, b)), 
                        this.pcState = h.fabricState.initializing, this.emb.make(h.internalFabricEvent.iceConnectionDisruptionEnd, this.conferenceId, this.pc, b);
                    }
                }
            }, {
                key: "handleIceConnectedOrCompleted",
                value: function(a) {
                    var b = k.getCurrent();
                    this.pcState === h.fabricState.disrupted && (a.prevIceCandidatePair = this.prevActiveIceCandidatePair, 
                    a.currIceCandidatePair = this.activeIceCandidatePair, a.delay = b - this.disruptedTS, 
                    this.emb.make(h.internalFabricEvent.iceDisruptionEnd, this.conferenceId, this.pc, a)), 
                    this.iceConnectivityDelay = b - this.startTime, this.established = !0, this.pcState = h.fabricState.established, 
                    this.sendfabricSetup(), this.startStatsPolling();
                }
            }, {
                key: "sendfabricSetup",
                value: function() {
                    if (this.fabricSetupSent) return void o.log("fabricSetup has been sent already");
                    var a = {
                        delay: k.getCurrent() - this.startTime,
                        iceGatheringDelay: this.iceGatheringDelay,
                        iceConnectivityDelay: this.iceConnectivityDelay,
                        localIceCandidates: this.localIceCandidates,
                        remoteIceCandidates: this.remoteIceCandidates,
                        iceCandidatePairs: this.iceCandidatePairs
                    }, b = this.getActiveIceCandidatePair();
                    b && (a.selectedCandidatePairID = b.id), this.fabricSetupSent = !0;
                    var c = void 0;
                    if (this.conferenceId) {
                        c = i.Registry.getConferenceManager().get(this.conferenceId).getPeerConnectionManager().getPcHandler(this.pc), 
                        a.remoteEndpointType = c.getRemoteEndpointType(), a.fabricTransmissionDirection = c.getFabricTransmissionDirection();
                    }
                    this.pcState = h.fabricState.established, this.emb.make(h.internalFabricEvent.fabricSetup, this.conferenceId, this.pc, a);
                }
            }, {
                key: "isFabricSetupSent",
                value: function() {
                    return this.fabricSetupSent;
                }
            }, {
                key: "startStatsPolling",
                value: function() {
                    this.getStatsHandler.startStatsPolling();
                }
            }, {
                key: "stopStatsPolling",
                value: function() {
                    this.getStatsHandler.stopStatsPolling();
                }
            }, {
                key: "handleIceFailed",
                value: function(a) {
                    a.currIceCandidatePair = this.activeIceCandidatePair, a.failureDelay = k.getCurrent() - this.startTime, 
                    a.delay = k.getCurrent() - this.startTime, this.pcState = h.fabricState.failed, 
                    "checking" === a.prevIceConnectionState ? this.sendIceFailed(a) : "completed" === a.prevIceConnectionState || "connected" === a.prevIceConnectionState ? this.emb.make(h.internalFabricEvent.fabricDropped, this.conferenceId, this.pc, a) : "disconnected" === a.prevIceConnectionState && this.established ? this.emb.make(h.internalFabricEvent.fabricDropped, this.conferenceId, this.pc, a) : "disconnected" === a.prevIceConnectionState && this.sendIceFailed(a);
                }
            }, {
                key: "getActiveIceCandidatePair",
                value: function() {
                    var a = null, b = this.iceCandidatePairs;
                    if (b && b.length > 0) {
                        var c = b.filter(function(a) {
                            return "true" === a.selected || "true" === a.googActiveConnection || !0 === a.selected || !0 === a.googActiveConnection;
                        });
                        c.length > 0 && (a = c[0]);
                    }
                    return a;
                }
            }, {
                key: "sendIceFailed",
                value: function(a) {
                    a.localIceCandidates = this.localIceCandidates, a.remoteIceCandidates = this.remoteIceCandidates, 
                    a.iceCandidatePairs = this.iceCandidatePairs, o.log("sending icefailed ", a), this.emb.make(h.internalFabricEvent.iceFailed, this.conferenceId, this.pc, a);
                }
            }, {
                key: "sendFabricTransportSwitch",
                value: function(a) {
                    var b = this, c = {};
                    c.prevIceCandidatePair = b.activeIceCandidatePair, c.relayType = a, c.currIceConnectionState = b.iceConnectionState, 
                    c.prevIceConnectionState = b.oldIceConnectionState, c.switchDelay = null, b.getStatsHandler.getIceCandidates().then(function(a) {
                        b.localIceCandidates = a.localIceCandidates, b.remoteIceCandidates = a.remoteIceCandidates, 
                        b.iceCandidatePairs = a.iceCandidatePairs, b.activeIceCandidatePair = b.getActiveIceCandidatePair(), 
                        c.currIceCandidatePair = b.activeIceCandidatePair, c.localIceCandidates = b.localIceCandidates, 
                        c.remoteIceCandidates = b.remoteIceCandidates, o.log("sending fabric transport switch ", c), 
                        "completed" !== c.currIceConnectionState && "connected" !== c.currIceConnectionState || "completed" !== c.prevIceConnectionState && "connected" !== c.prevIceConnectionState || b.emb.make(h.internalFabricEvent.fabricTransportSwitch, b.conferenceId, b.pc, c);
                    });
                }
            }, {
                key: "handleIceDisconnected",
                value: function(a) {
                    var b = k.getCurrent();
                    this.startTime = b, a.prevIceConnectionStateTs = this.iceConnectionStateTS, a.currIceCandidatePair = this.activeIceCandidatePair, 
                    "connected" === a.prevIceConnectionState || "completed" === a.prevIceConnectionState ? (this.pcState = h.fabricState.disrupted, 
                    this.disruptedTS = b, this.emb.make(h.internalFabricEvent.iceDisruptionStart, this.conferenceId, this.pc, a), 
                    this.callback && this.callback(m.csError.appConnectivityError, "Connectivity check for PC object to " + this.remoteId + " failed.")) : "checking" === a.prevIceConnectionState && (this.pcState = h.fabricState.checkingDisrupted, 
                    this.connectionDisruptedTS = b, this.emb.make(h.internalFabricEvent.iceConnectionDisruptionStart, this.conferenceId, this.pc, a), 
                    this.callback && this.callback(m.csError.appConnectivityError, "Connectivity check for PC object to " + this.remoteId + " failed."));
                }
            }, {
                key: "handleIceClosed",
                value: function(a) {
                    "new" === a.prevIceConnectionState || "checking" === a.prevIceConnectionState ? (a.failureDelay = k.getCurrent() - this.startTime, 
                    a.localIceCandidates = this.localIceCandidates, a.remoteIceCandidates = this.remoteIceCandidates, 
                    a.iceCandidatePairs = this.iceCandidatePairs, this.emb.make(h.internalFabricEvent.iceAborted, this.conferenceId, this.pc, a)) : "connected" !== a.prevIceConnectionState && "completed" !== a.prevIceConnectionState || (a.prevIceCandidatePair = this.activeIceCandidatePair, 
                    this.emb.make(h.internalFabricEvent.iceTerminated, this.conferenceId, this.pc, a)), 
                    this.pcState = h.fabricState.terminated, this.stopStatsPolling();
                }
            }, {
                key: "handleIceRestart",
                value: function(a) {
                    a.prevIceCandidatePair = this.prevActiveIceCandidatePair, "new" !== a.prevIceConnectionState && (o.log("iceRestarted sending"), 
                    this.established = !1, this.emb.make(h.internalFabricEvent.iceRestarted, this.conferenceId, this.pc, a));
                }
            }, {
                key: "pcSignalingStateChangeCallback",
                value: function(a) {
                    var b = this;
                    if (a) {
                        var c = this.signalingState;
                        this.signalingState = this.pc.signalingState, o.warn("CALLBACK: signaling state change", c, "->", this.signalingState);
                        var d = {
                            changedState: h.fabricStateChangeType.signalingState,
                            prevState: c,
                            newState: this.signalingState
                        };
                        this.sendFabricStateChange(d), "have-remote-offer" !== this.signalingState && "stable" !== this.signalingState || (this.precalltest.callStarts(), 
                        this.genericevent.sendEvent(h.logEvents.log, {
                            msg: "precalltest told to stop "
                        })), "closed" === this.signalingState && (this.emb.make(h.fabricEvent.fabricTerminated, this.conferenceId, this.pc), 
                        this.userAlive.stop(), this.precalltest.callFinished(), this.stopStatsPolling(), 
                        this.pcState = h.fabricState.terminated), "have-local-offer" !== this.signalingState && "have-local-pranswer" !== this.signalingState && "stable" !== this.signalingState || (o.log(this.signalingState, ".. requesting sender config."), 
                        i.Registry.getConfigServiceWrapper().initiateSenderConfig(this.pc).then(function() {
                            var a = i.Registry.getConfigServiceWrapper().getSenderConfig();
                            o.log("Sender config:", a);
                            var c = h.callstatsChannels.senderConfiguration;
                            a && i.Registry.getEventMessageBuilder().make(c, b.conferenceId, b.pc, a);
                        }).catch(function(a) {
                            o.warn(a);
                        }));
                    }
                }
            }, {
                key: "pcNegotiationNeededCallback",
                value: function(a) {
                    a && (this.negotiationNeeded++, this.startTime = k.getCurrent(), o.warn("CALLBACK: negotiation needed", this.negotiationNeeded));
                }
            } ]), a;
        }();
        c.PcCallbackHandler = p;
    }, {
        "../config/callstatserrors": 32,
        "../config/constants": 33,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "../utility/timestamps": 99
    } ],
    41: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.PeerConnectionHandler = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../utility/registry"), h = a("../peerconnection/pccallbackhandler"), i = a("../browserapi/devices"), j = a("./useralivehandler"), k = a("./getstatshandler"), l = a("../config/constants"), m = d(l), n = a("../utility/timestamps"), o = d(n), p = a("../utility/csiologger"), q = d(p), r = function() {
            function a(b) {
                e(this, a), this.pc = b.pc, this.remoteId = b.remoteId, this.fabricUsage = b.fabricUsage, 
                this.callback = b.callback, this.conferenceId = b.conferenceId, this.remoteEndpointType = b.remoteEndpointType, 
                this.fabricTransmissionDirection = b.fabricTransmissionDirection, this.clocksync = g.Registry.getClockSync(), 
                this.startTime = this.clocksync.getSynchronizedTimestamp(), this.credentials = g.Registry.getCredentials(), 
                this.pcHash = this.generatePcHash(), this.ssrcMap = new Map(), this.localSdp = null, 
                this.remoteSdp = null, this.transportInfo = null, this.userAliveHandler = new j.UserAliveHandler(this.conferenceId, this.pc), 
                this.userAliveHandler.start(), this.emb = g.Registry.getEventMessageBuilder(), this.devices = new i.Devices(this.conferenceId, this.pc);
                var c = g.Registry.getEndpoint();
                this.getStatsHandler = new k.GetStatsHandler(this.pc, this.pcHash, 5e3, c.getCodeBase(), c.getBrowserName()), 
                this.pcCallbackHandler = new h.PcCallbackHandler(this.conferenceId, this.pc, this.getStatsHandler, this.userAliveHandler, this.remoteId, this.callback), 
                this.devices.collectConnected(), this.fabricTransmissionDirection || (this.fabricTransmissionDirection = "sendrecv"), 
                this.remoteEndpointType || (this.remoteEndpointType = "peer");
            }
            return f(a, [ {
                key: "getFabricTransmissionDirection",
                value: function() {
                    return this.fabricTransmissionDirection;
                }
            }, {
                key: "getRemoteEndpointType",
                value: function() {
                    return this.remoteEndpointType;
                }
            }, {
                key: "stopUserAliveHandler",
                value: function() {
                    this.userAliveHandler.stop();
                }
            }, {
                key: "getPcState",
                value: function() {
                    return this.pcCallbackHandler.pcState;
                }
            }, {
                key: "stopStatsPolling",
                value: function() {
                    this.getStatsHandler.stopStatsPolling();
                }
            }, {
                key: "startStatsPolling",
                value: function() {
                    this.getStatsHandler.startStatsPolling();
                }
            }, {
                key: "setPcState",
                value: function(a) {
                    a in m.fabricState ? this.pcCallbackHandler.pcState = a : q.error("setPcState: Invalid state");
                }
            }, {
                key: "getAppId",
                value: function() {
                    return this.credentials.getAppId();
                }
            }, {
                key: "getLocalId",
                value: function() {
                    return this.credentials.getUserId();
                }
            }, {
                key: "getConferenceId",
                value: function() {
                    return this.conferenceId;
                }
            }, {
                key: "getPeerConnection",
                value: function() {
                    return this.pc;
                }
            }, {
                key: "getRemoteId",
                value: function() {
                    return this.remoteId;
                }
            }, {
                key: "isFabricSetupSent",
                value: function() {
                    return this.pcCallbackHandler.isFabricSetupSent();
                }
            }, {
                key: "getStartTime",
                value: function() {
                    return this.startTime;
                }
            }, {
                key: "getCallback",
                value: function() {
                    return this.callback;
                }
            }, {
                key: "getPcHash",
                value: function() {
                    return this.pcHash;
                }
            }, {
                key: "getIceCandidates",
                value: function() {
                    return this.pcCallbackHandler ? this.pcCallbackHandler.iceCandidates : null;
                }
            }, {
                key: "getIceConnectionState",
                value: function() {
                    return this.pcCallbackHandler ? this.pcCallbackHandler.iceConnectionState : null;
                }
            }, {
                key: "getNegotiationsNumber",
                value: function() {
                    return this.pcCallbackHandler ? this.pcCallbackHandler.negotiationNeeded : 0;
                }
            }, {
                key: "sendFabricTransportSwitch",
                value: function(a) {
                    this.pcCallbackHandler && this.pcCallbackHandler.sendFabricTransportSwitch(a);
                }
            }, {
                key: "getSdp",
                value: function() {
                    return {
                        localSdp: this.localSdp,
                        remoteSdp: this.remoteSdp
                    };
                }
            }, {
                key: "setSdp",
                value: function(a, b) {
                    this.localSdp = a, this.remoteSdp = b;
                }
            }, {
                key: "generatePcHash",
                value: function() {
                    var a = (Math.random() + 1).toString(36);
                    return a.substring(2, a.length);
                }
            }, {
                key: "getTransportInfo",
                value: function() {
                    return this.transportInfo;
                }
            }, {
                key: "setTransportInfo",
                value: function(a) {
                    this.transportInfo = a;
                }
            }, {
                key: "updateSDP",
                value: function(a) {
                    var b = this, c = void 0, d = void 0;
                    if (this.pc && this.pc.localDescription && (c = this.pc.localDescription.sdp), this.pc && this.pc.remoteDescription && (d = this.pc.remoteDescription.sdp), 
                    c && d && (c !== this.localSdp || d !== this.remoteSdp)) {
                        this.parseSDP(c, m.streamType.outbound), this.parseSDP(d, m.streamType.inbound);
                        var e = {
                            localSDP: c !== this.localSdp ? c : "",
                            remoteSDP: d !== this.remoteSdp ? d : ""
                        };
                        "" === c && "" === remoteSDP || !g.Registry.getCredentials().getCollectSDP() || this.emb.make(m.internalFabricEvent.sdpSubmission, this.conferenceId, this.pc, e), 
                        a && a.forEach(function(a) {
                            var c = String(a.data.ssrc), d = b.ssrcMap.get(c);
                            d || (d = {}), d.mediaType = a.data.mediaType, d.reportType = a.data.isRemote ? "remote" : "local", 
                            d.ssrc = c, b.ssrcMap.set(c, d);
                        });
                        var f = [];
                        this.ssrcMap.forEach(function(a, b) {
                            a.msid && a.mslabel && a.label && f.push(a);
                        });
                        for (var h = {
                            ssrcData: f
                        }, i = 0; i < h.ssrcData.length; i += 1) {
                            h.ssrcData[i].userID = g.Registry.getCredentials().getUserId();
                        }
                        this.emb.make(m.internalFabricEvent.ssrcMap, this.conferenceId, this.pc, h), this.setSdp(c, d);
                    }
                }
            }, {
                key: "parseSDP",
                value: function(a, b) {
                    var c = this, d = RegExp.prototype.test.bind(/^([a-z])=(.*)/), e = /^ssrc:(\d*) ([\w_]*):(.*)/, f = /^ssrc-group:SIM (\d*)/;
                    a.split(/(\r\n|\r|\n)/).filter(d).forEach(function(a) {
                        var d = a[0], g = a.slice(2);
                        if ("a" === d && e.test(g)) {
                            var h = g.match(e), i = h[1], j = h[2], k = h[3], l = c.ssrcMap.get(i);
                            if (l || (l = {}), l.ssrc = i, l[j] = k, l.localStartTime = o.getCurrent(), l.syncedStartTime = c.clocksync.getSynchronizedTimestamp(), 
                            l.streamType = b, !f.test(g)) return void c.ssrcMap.set(i, l);
                            l.ssrcGroup = {}, l.ssrcGroup[b] = {}, l.ssrcGroup[b].simulcastGroup = g.match(/\d+/g), 
                            c.ssrcMap.set(i, l);
                        }
                    });
                }
            }, {
                key: "getSSRCInfo",
                value: function(a) {
                    return this.ssrcMap.get(a);
                }
            }, {
                key: "setupVideoTagMethods",
                value: function(a, b) {
                    var c = this, d = document.getElementById(a);
                    d && (d.oncanplay = function() {
                        var a = {
                            ssrc: String(b),
                            highResTs: o.getCurrent()
                        };
                        c.emb.make(m.internalFabricEvent.mediaPlaybackStart, c.conferenceId, c.pc, a);
                    }, d.onsuspend = function() {
                        var a = {
                            ssrc: String(b),
                            highResTs: o.getCurrent()
                        };
                        c.emb.make(m.internalFabricEvent.mediaPlaybackSuspended, c.conferenceId, c.pc, a);
                    });
                }
            }, {
                key: "updateSSRCInfo",
                value: function(a, b, c, d) {
                    var e = this.ssrcMap.get(a);
                    e || (e = {}), e.ssrc = a, e.remoteUserID = b, e.usageLabel = c, e.associatedVideoTag = d, 
                    this.ssrcMap.set(a, e), d && b !== this.credentials.getUserId() && this.setupVideoTagMethods(d, a);
                }
            }, {
                key: "updateConferenceId",
                value: function(a) {
                    this.conferenceId = a, this.userAliveHandler.updateConferenceId(a);
                }
            }, {
                key: "updateRemoteId",
                value: function(a) {
                    this.remoteId = a;
                }
            } ], [ {
                key: "Builder",
                get: function() {
                    return function() {
                        function b() {
                            e(this, b);
                        }
                        return f(b, [ {
                            key: "withPc",
                            value: function(a) {
                                return this.pc = a, this;
                            }
                        }, {
                            key: "withRemoteId",
                            value: function(a) {
                                return this.remoteId = a, this;
                            }
                        }, {
                            key: "withFabricUsage",
                            value: function(a) {
                                return this.fabricUsage = a, this;
                            }
                        }, {
                            key: "withConferenceId",
                            value: function(a) {
                                return this.conferenceId = a, this;
                            }
                        }, {
                            key: "withRemoteEndpointType",
                            value: function(a) {
                                return this.remoteEndpointType = a, this;
                            }
                        }, {
                            key: "withFabricTransmissionDirection",
                            value: function(a) {
                                return this.fabricTransmissionDirection = a, this;
                            }
                        }, {
                            key: "withCallback",
                            value: function(a) {
                                return this.callback = a, this;
                            }
                        }, {
                            key: "make",
                            value: function() {
                                return new a(this);
                            }
                        } ]), b;
                    }();
                }
            } ]), a;
        }();
        c.PeerConnectionHandler = r;
    }, {
        "../browserapi/devices": 19,
        "../config/constants": 33,
        "../peerconnection/pccallbackhandler": 40,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "../utility/timestamps": 99,
        "./getstatshandler": 39,
        "./useralivehandler": 43
    } ],
    42: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.PeerConnectionManager = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./peerconnectionhandler"), g = function() {
            function a() {
                d(this, a), this.pcHandlers = new Map();
            }
            return e(a, [ {
                key: "removePcHandler",
                value: function(a) {
                    var b = this.getPcHandler(a);
                    if (b) {
                        var c = b.getPcHash();
                        this.pcHandlers.delete(c);
                    }
                }
            }, {
                key: "addPcHandler",
                value: function(a, b, c, d, e, g, h) {
                    if (!this.getPcHandler(a)) {
                        var i = new f.PeerConnectionHandler.Builder().withPc(a).withRemoteId(b).withFabricUsage(c).withConferenceId(d).withRemoteEndpointType(e).withFabricTransmissionDirection(g).withCallback(h).make();
                        this.pcHandlers.set(i.getPcHash(), i);
                    }
                }
            }, {
                key: "getPcHandler",
                value: function(a) {
                    var b = null;
                    return a ? (this.pcHandlers.forEach(function(c, d) {
                        c && c.getPeerConnection() === a && (b = c);
                    }), b) : b;
                }
            }, {
                key: "getPcHandlerByHash",
                value: function(a) {
                    return a && this.pcHandlers.has(a) ? this.pcHandlers.get(a) : null;
                }
            }, {
                key: "updateConferenceId",
                value: function(a) {
                    this.pcHandlers.forEach(function(b, c) {
                        b.updateConferenceId(a);
                    });
                }
            } ]), a;
        }();
        c.PeerConnectionManager = g;
    }, {
        "./peerconnectionhandler": 41
    } ],
    43: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.UserAliveHandler = void 0;
        var g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = a("../config/constants"), i = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(h), j = a("../utility/timeoutprocess"), k = a("../utility/registry"), l = 1e4, m = function(a) {
            function b(a, c) {
                d(this, b);
                var f = e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, l));
                return f.emb = k.Registry.getEventMessageBuilder(), f.pc = c, f.conferenceId = a, 
                f.setCallback(f.send), f;
            }
            return f(b, a), g(b, [ {
                key: "send",
                value: function() {
                    this.conferenceId !== i.tmpConferenceId && this.pc && this.emb.make(i.internalFabricEvent.userAlive, this.conferenceId, this.pc);
                }
            }, {
                key: "updateConferenceId",
                value: function(a) {
                    this.conferenceId = a;
                }
            } ]), b;
        }(j.TimeoutProcess);
        c.UserAliveHandler = m;
    }, {
        "../config/constants": 33,
        "../utility/registry": 95,
        "../utility/timeoutprocess": 98
    } ],
    44: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function g(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Authenticator = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = function a(b, c, d) {
            null === b && (b = Function.prototype);
            var e = Object.getOwnPropertyDescriptor(b, c);
            if (void 0 === e) {
                var f = Object.getPrototypeOf(b);
                return null === f ? void 0 : a(f, c, d);
            }
            if ("value" in e) return e.value;
            var g = e.get;
            if (void 0 !== g) return g.call(d);
        }, j = a("./jwt/jwt"), k = a("./jwt/jwttoken"), l = a("../config/settings"), m = d(l), n = a("../utility/base64"), o = d(n), p = a("../config/callstatserrors"), q = d(p), r = a("../config/constants"), s = d(r), t = a("../browserapi/localstorage"), u = d(t), v = a("../utility/json"), w = d(v), x = a("./xmlhttp"), y = a("./xmlhttpservice"), z = a("../utility/registry"), A = a("../utility/csiologger"), B = d(A), C = m.authRetryTimeout, D = function(a) {
            function b() {
                e(this, b);
                var a = f(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, "Authenticator"));
                return a.clockSync = z.Registry.getClockSync(), a.credentials = z.Registry.getCredentials(), 
                a;
            }
            return g(b, a), h(b, [ {
                key: "initiate",
                value: function(a, c) {
                    var d = this;
                    return this.inProgress ? (c && c(q.csError.authOngoing, null), new Promise(function(a, b) {
                        b(new Error(d.name + ": in progress"));
                    })) : this.credentials.getAppId() && this.credentials.getUserId() ? (this.initCallback = c, 
                    "function" == typeof a ? (this.setTokenGenerator(a), i(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "initiate", this).call(this)) : new Promise(function(c, e) {
                        d.createTokenGenerator(a).then(function(a) {
                            d.setTokenGenerator(a), i(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "initiate", d).call(d).then(function() {
                                c();
                            }, function(a) {
                                e(a);
                            });
                        }, function(a) {
                            e(new Error(d.name + ": tokenGenerator creation problem (" + a + ")"));
                        });
                    })) : new Promise(function(a, b) {
                        b(new Error(d.name + ": credentials not set"));
                    });
                }
            }, {
                key: "getToken",
                value: function() {
                    var a = null;
                    return this.token && (a = this.token.getToken()), a;
                }
            }, {
                key: "isTokenValid",
                value: function() {
                    return !!this.token && this.token.isValid(this.credentials);
                }
            }, {
                key: "getElapsed",
                value: function() {
                    return this.isCompleted() ? this.elapsed : null;
                }
            }, {
                key: "getIceServers",
                value: function() {
                    return this.iceServers;
                }
            }, {
                key: "reset",
                value: function() {
                    this.token = null, this.reauthTimer = null, this.renew = !1, this.credentials = null, 
                    this.jwt = new j.Jwt(), this.tokenGenerator = function(a, b) {
                        b("Token generator is not set");
                    }, this.elapsed = 0, this.iceServers = null, i(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "reset", this).call(this);
                }
            }, {
                key: "setupToken",
                value: function(a) {
                    u.store("csio_auth_data", JSON.stringify(a)), this.token = new k.JwtToken(a, this.clockSync);
                }
            }, {
                key: "clearReauthTimer",
                value: function() {
                    null !== this.reauthTimer && (clearTimeout(this.reauthTimer), this.reauthTimer = null);
                }
            }, {
                key: "setupReauthTimer",
                value: function(a) {
                    var b = this;
                    b.clearReauthTimer(), b.reauthTimer = setTimeout(function() {
                        b.reAuthenticate();
                    }, a);
                }
            }, {
                key: "reAuthenticate",
                value: function() {
                    this.inProgress || (this.inProgress = !0, this.token = null, this.sendRequest());
                }
            }, {
                key: "handleErrorActions",
                value: function(a) {
                    if (0 !== a.length) {
                        var b = a.shift();
                        if (b.action === q.authErrorActions.RETRY) {
                            var c = b.params.timeout ? b.params.timeout : m.authRetryTimeout;
                            this.setupReauthTimer(c), this.handleErrorActions(a);
                        }
                        b.action === q.authErrorActions.GET_NEW_TOKEN && (this.renew = !0, this.handleErrorActions(a)), 
                        b.action === q.authErrorActions.REPORT_ERROR && (B.error(this.name + ": " + b.params.errorReason), 
                        this.handleErrorActions(a));
                    }
                }
            }, {
                key: "setTokenGenerator",
                value: function(a) {
                    this.tokenGenerator = a;
                }
            }, {
                key: "handleResponse",
                value: function(a) {
                    var b = a.getXhr(), c = a.getElapsed(), d = w.parse(b.response);
                    if (!d) return B.error(this.name + ": invalid authentication response"), void this.sendNextRequest();
                    if (d["urn:x-callstats:auth:errorActions"] && d["urn:x-callstats:auth:errorActions"].length > 0) return void this.handleErrorActions(d["urn:x-callstats:auth:errorActions"]);
                    if (200 === b.status) {
                        if ("bearer" !== d.token_type) return B.error(this.name + ": successful, but token type was not bearer. Scheduling retry."), 
                        void this.sendNextRequest();
                        this.setupToken(d.access_token), d.iceServers && (this.iceServers = d.iceServers);
                        var e = parseInt(1e3 * parseInt(d.expires_in) * .9);
                        return this.setupReauthTimer(e), this.renew = !1, this.initCallback && this.initCallback(q.csError.success, s.csCallBackMessages.authSuccessful), 
                        this.elapsed = c, void this.completeProcess();
                    }
                    B.error("Authentication failed, but no error actions were defined in response."), 
                    this.sendNextRequest();
                }
            }, {
                key: "request",
                value: function() {
                    var a = this;
                    this.clearReauthTimer();
                    var b = new Promise(function(b, c) {
                        a.tempResolve = b, a.tempReject = c;
                    });
                    return this.tokenGenerator(this.renew, function(b, c) {
                        if (null !== b) return a.initCallback && a.initCallback(q.csError.tokenGenerationError, b.toString()), 
                        a.rejectCb(new Error(a.name + ": tokenGenerationError")), B.error("tokenGenerationError ", b), 
                        null;
                        var d = m.authServiceUrl + "authenticate", e = {
                            client_id: a.credentials.userId + "@" + a.credentials.getAppId(),
                            code: c,
                            grant_type: "authorization_code"
                        }, f = {
                            "Content-Type": "application/x-www-form-urlencoded"
                        };
                        (0, x.sendPostRequest)(d, f, C, e).then(function(b) {
                            a.tempResolve(b);
                        }, function(b) {
                            a.tempReject(b);
                        });
                    }), b;
                }
            }, {
                key: "tokenGeneratorCreator",
                value: function(a, b) {
                    var c = this;
                    return function(d, e) {
                        var f = null, g = {
                            alg: "HS256"
                        };
                        if (!d && null !== f) return e(null, f);
                        var h = c.credentials, i = {
                            userID: h.getUserId(),
                            appID: h.getAppId()
                        };
                        b && (i.keyId = b), c.jwt.sign(g, i, a).then(function(a) {
                            f = a, e(null, a);
                        }).catch(function(a) {
                            e(a);
                        });
                    };
                }
            }, {
                key: "createTokenGenerator",
                value: function(a) {
                    var b = this;
                    return new Promise(function(c, d) {
                        var e = null;
                        a.indexOf(":") > -1 && (e = o.strtohex(a.split(":")[0]), a = a.split(":")[1]), b.jwt.importKey(a).then(function(d) {
                            a = null;
                            var f = b.tokenGeneratorCreator(d, e);
                            c(f);
                        }).catch(function(a) {
                            B.error(b.name + ": could not import key (" + a + ")"), d(a);
                        });
                    });
                }
            } ]), b;
        }(y.XMLHttpService);
        c.Authenticator = D;
    }, {
        "../browserapi/localstorage": 20,
        "../config/callstatserrors": 32,
        "../config/constants": 33,
        "../config/settings": 34,
        "../utility/base64": 85,
        "../utility/csiologger": 88,
        "../utility/json": 93,
        "../utility/registry": 95,
        "./jwt/jwt": 52,
        "./jwt/jwttoken": 53,
        "./xmlhttp": 58,
        "./xmlhttpservice": 59
    } ],
    45: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.GenericEventHandler = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../config/settings"), h = d(g), i = a("./xmlhttp"), j = a("../utility/registry"), k = a("../utility/csiologger"), l = d(k), m = function() {
            function a() {
                e(this, a), this.credentials = j.Registry.getCredentials(), this.enabled = !1;
            }
            return f(a, [ {
                key: "enable",
                value: function() {
                    this.enabled = !0;
                }
            }, {
                key: "disable",
                value: function() {
                    this.enabled = !1;
                }
            }, {
                key: "sendEvent",
                value: function(a, b) {
                    this.send(a, b).then(function(a) {
                        l.log("Got generic response: %o", a);
                    }).catch(function(a) {
                        l.log("Got error for generic request", a);
                    });
                }
            }, {
                key: "send",
                value: function(a, b) {
                    if (!this.enabled) return new Promise(function(a, b) {
                        b(new Error("GenericEvent Error: not enabled"));
                    });
                    var c = this;
                    return new Promise(function(d, e) {
                        var f = {
                            "Content-Type": "application/json"
                        }, g = {
                            appID: c.credentials.appId,
                            userID: encodeURIComponent(c.credentials.userId),
                            version: h.version,
                            eventType: a,
                            data: b
                        }, j = h.baseUrl + "generics";
                        (0, i.sendPostRequest)(j, f, 5e3, g).then(function(a) {
                            d(a.getXhr().response);
                        }, function(a) {
                            e(a);
                        });
                    });
                }
            } ]), a;
        }();
        c.GenericEventHandler = m;
    }, {
        "../config/settings": 34,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "./xmlhttp": 58
    } ],
    46: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function g(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ClockSync = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = function a(b, c, d) {
            null === b && (b = Function.prototype);
            var e = Object.getOwnPropertyDescriptor(b, c);
            if (void 0 === e) {
                var f = Object.getPrototypeOf(b);
                return null === f ? void 0 : a(f, c, d);
            }
            if ("value" in e) return e.value;
            var g = e.get;
            if (void 0 !== g) return g.call(d);
        }, j = a("../config/settings"), k = d(j), l = a("./xmlhttp"), m = a("../utility/timestamps"), n = d(m), o = a("./xmlhttpservice"), p = a("../utility/registry"), q = a("../config/constants"), r = d(q), s = function(a) {
            function b() {
                e(this, b);
                var a = f(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, "ClockSync"));
                return a.currentOffset = 0, a.completed = !1, a;
            }
            return g(b, a), h(b, [ {
                key: "initiate",
                value: function() {
                    return this.startTime = n.getCurrent(), i(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "initiate", this).call(this);
                }
            }, {
                key: "getSynchronizedTimestamp",
                value: function() {
                    return n.getCurrent() + this.currentOffset;
                }
            }, {
                key: "getElapsed",
                value: function() {
                    return this.isCompleted() ? this.endTime - this.startTime : null;
                }
            }, {
                key: "getOffset",
                value: function() {
                    return this.currentOffset;
                }
            }, {
                key: "reset",
                value: function() {
                    this.currentOffset = 0, this.offsetResults = [], this.startTime = 0, this.endTime = 0, 
                    i(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "reset", this).call(this);
                }
            }, {
                key: "request",
                value: function() {
                    var a = k.baseUrl + "clockSync";
                    return (0, l.sendGetRequest)(a, null, 5e3);
                }
            }, {
                key: "handleResponse",
                value: function(a) {
                    var b = a.getXhr(), c = a.getElapsed(), d = JSON.parse(b.response), e = n.getCurrent();
                    this.handleMessage(d, c, e);
                }
            }, {
                key: "handleMessage",
                value: function(a, b, c) {
                    var d = b / 2;
                    d > 6e4 ? this.offsetResults = [] : this.addOffset(a, d, c), this.offsetResults.length >= 5 ? (this.calculateOffset(), 
                    this.endTime = n.getCurrent(), this.completeProcess()) : this.sendRequest();
                }
            }, {
                key: "isCompleted",
                value: function() {
                    return this.completed;
                }
            }, {
                key: "addOffset",
                value: function(a, b, c) {
                    var d = a.now + b, e = d - c;
                    this.offsetResults.push(e);
                }
            }, {
                key: "calculateOffset",
                value: function() {
                    var a = this.offsetResults.reduce(function(a, b) {
                        return a + b;
                    });
                    this.currentOffset = a / this.offsetResults.length, this.currentOffset = isNaN(this.currentOffset) ? 0 : this.currentOffset, 
                    p.Registry.getGenericEventHandler().sendEvent(r.logEvents.log, {
                        msg: "clockSync Done, offset is: " + this.currentOffset + "results length" + this.offsetResults.length
                    }), this.offsetResults = [], this.completed = !0;
                }
            } ]), b;
        }(o.XMLHttpService);
        c.ClockSync = s;
    }, {
        "../config/constants": 33,
        "../config/settings": 34,
        "../utility/registry": 95,
        "../utility/timestamps": 99,
        "./xmlhttp": 58,
        "./xmlhttpservice": 59
    } ],
    47: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a() {
                d(this, a), this.connected = !1, this.reconnected = !1, this.conferenceUrl = {};
            }
            return e(a, [ {
                key: "setup",
                value: function() {
                    return new Promise(function(a, b) {
                        a();
                    });
                }
            }, {
                key: "isReady",
                value: function() {
                    return this.connected;
                }
            }, {
                key: "send",
                value: function(a) {}
            } ]), a;
        }();
        c.CollectorConnection = f;
    }, {} ],
    48: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ConfigServiceGet = void 0;
        var g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = function a(b, c, d) {
            null === b && (b = Function.prototype);
            var e = Object.getOwnPropertyDescriptor(b, c);
            if (void 0 === e) {
                var f = Object.getPrototypeOf(b);
                return null === f ? void 0 : a(f, c, d);
            }
            if ("value" in e) return e.value;
            var g = e.get;
            if (void 0 !== g) return g.call(d);
        }, i = a("../xmlhttp"), j = a("../xmlhttpservice"), k = a("../../utility/registry"), l = function(a) {
            function b() {
                return d(this, b), e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, "ConfigService"));
            }
            return f(b, a), g(b, [ {
                key: "initiate",
                value: function(a) {
                    var c = this;
                    return this.url = a, this.authToken = k.Registry.getAuthenticator().getToken(), 
                    this.authToken ? h(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "initiate", this).call(this) : new Promise(function(a, b) {
                        b(new Error(c.name + ": authToken has to be string"));
                    });
                }
            }, {
                key: "getConfig",
                value: function() {
                    return this.config;
                }
            }, {
                key: "getElapsed",
                value: function() {
                    return this.isCompleted() ? this.elapsed : null;
                }
            }, {
                key: "reset",
                value: function() {
                    this.authToken = null, this.url = null, this.config = null, this.elapsed = 0, h(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "reset", this).call(this);
                }
            }, {
                key: "request",
                value: function() {
                    var a = {
                        Authorization: "Bearer " + this.authToken
                    };
                    return (0, i.sendGetRequest)(this.url, a, 2e3);
                }
            }, {
                key: "handleResponse",
                value: function(a) {
                    var b = a.getXhr(), c = a.getElapsed();
                    this.config = JSON.parse(b.response), this.elapsed = c, this.completeProcess();
                }
            } ]), b;
        }(j.XMLHttpService);
        c.ConfigServiceGet = l;
    }, {
        "../../utility/registry": 95,
        "../xmlhttp": 58,
        "../xmlhttpservice": 59
    } ],
    49: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ConfigServicePost = void 0;
        var g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = function a(b, c, d) {
            null === b && (b = Function.prototype);
            var e = Object.getOwnPropertyDescriptor(b, c);
            if (void 0 === e) {
                var f = Object.getPrototypeOf(b);
                return null === f ? void 0 : a(f, c, d);
            }
            if ("value" in e) return e.value;
            var g = e.get;
            if (void 0 !== g) return g.call(d);
        }, i = a("../xmlhttp"), j = a("./configserviceget"), k = function(a) {
            function b() {
                return d(this, b), e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this));
            }
            return f(b, a), g(b, [ {
                key: "initiate",
                value: function(a, c) {
                    return this.body = c, h(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "initiate", this).call(this, a);
                }
            }, {
                key: "request",
                value: function() {
                    var a = {
                        Authorization: "Bearer " + this.authToken
                    };
                    return a["Content-Type"] = "application/json", (0, i.sendPostRequest)(this.url, a, 2e3, this.body);
                }
            } ]), b;
        }(j.ConfigServiceGet);
        c.ConfigServicePost = k;
    }, {
        "../xmlhttp": 58,
        "./configserviceget": 48
    } ],
    50: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ConfigServiceWrapper = void 0;
        var f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
            return typeof a;
        } : function(a) {
            return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
        }, g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = a("./configserviceget"), i = a("./configservicepost"), j = a("../../config/settings"), k = d(j), l = a("../../utility/registry"), m = a("../../utility/csiologger"), n = d(m), o = function() {
            function a() {
                e(this, a), this.internalConfigService = new h.ConfigServiceGet(), this.appConfigService = new h.ConfigServiceGet(), 
                this.senderConfigService = new i.ConfigServicePost(), this.defaultSenderConfig = null;
            }
            return g(a, [ {
                key: "initiateInternalConfig",
                value: function() {
                    var a = this, b = l.Registry.getCredentials().getAppId();
                    if (!b) return new Promise(function(b, c) {
                        n.log("appId has to be string"), c(new Error(a.internalConfigService.name + ": appId has to be string"));
                    });
                    var c = k.configServiceUrl + b;
                    return this.internalConfigService.initiate(c + "/configurations/internal");
                }
            }, {
                key: "initiateAppConfig",
                value: function() {
                    var a = this, b = l.Registry.getCredentials().getAppId();
                    if (!b) return new Promise(function(b, c) {
                        n.log("appId has to be string"), c(new Error(a.appConfigService.name + ": appId has to be string"));
                    });
                    var c = k.configServiceUrl + b;
                    return this.appConfigService.initiate(c + "/configurations");
                }
            }, {
                key: "initiateSenderConfig",
                value: function(a) {
                    var b = this;
                    if (this.senderConfigService.getConfig()) return new Promise(function(a, c) {
                        n.log("sender config already present"), c(new Error(b.senderConfigService.name + ": sender config already present"));
                    });
                    var c = l.Registry.getCredentials().getAppId(), d = l.Registry.getCredentials().getUserId();
                    if (!c || !d) return new Promise(function(a, c) {
                        n.log("appId and userId have to be string"), c(new Error(b.senderConfigService.name + ": appId and userId have to be string"));
                    });
                    if (this.defaultSenderConfig = this.getCurrentVideoSenderConfig(a), !this.defaultSenderConfig) return new Promise(function(a, c) {
                        n.log("Could not obtain a sender config"), c(new Error(b.senderConfigService.name + ": Could not obtain a sender config"));
                    });
                    var e = k.configServiceUrl + c, f = {
                        app_id: c,
                        local_id: d,
                        rtc_rtp_parameters: this.defaultSenderConfig
                    };
                    return this.senderConfigService.initiate(e + "/configurations", f);
                }
            }, {
                key: "getInternalConfig",
                value: function() {
                    return this.internalConfigService.getConfig();
                }
            }, {
                key: "getAppDefaultConfig",
                value: function() {
                    var a = this.appConfigService.getConfig(), b = {
                        peerConnection: null,
                        media: null
                    };
                    return a.default ? (a.default.peerConnection && (b.peerConnection = a.default.peerConnection), 
                    a.default.media && (b.media = a.default.media), b) : b;
                }
            }, {
                key: "getAppRecommendedConfig",
                value: function() {
                    var a = this.appConfigService.getConfig(), b = {};
                    return a.recommended ? (a.recommended.peerConnection && (b.peerConnection = a.recommended.peerConnection), 
                    a.recommended.media && (b.media = a.recommended.media), b) : b;
                }
            }, {
                key: "getSenderConfig",
                value: function() {
                    var a = this.senderConfigService.getConfig();
                    return a && a.recommended && a.recommended.sender ? a.recommended.sender : null;
                }
            }, {
                key: "getDefaultSenderConfig",
                value: function() {
                    return this.defaultSenderConfig ? this.defaultSenderConfig : null;
                }
            }, {
                key: "getInternalElapsed",
                value: function() {
                    return this.internalConfigService.getElapsed();
                }
            }, {
                key: "getAppElapsed",
                value: function() {
                    return this.appConfigService.getElapsed();
                }
            }, {
                key: "getSenderElapsed",
                value: function() {
                    return this.senderConfigService.getElapsed();
                }
            }, {
                key: "getCurrentVideoSenderConfig",
                value: function(a) {
                    var b = {
                        encodings: [ {
                            maxBitrate: 0
                        } ]
                    }, c = l.Registry.getConferenceManager().getConferenceForPc(a);
                    if (!c) return n.warn("No conference found for PC, skipping"), null;
                    if (c.getPeerConnectionManager().pcHandlers.size > 1) return n.warn("Multiple PCs found, skipping"), 
                    null;
                    if (!a.getSenders || "function" != typeof a.getSenders) return n.warn("Get senders error"), 
                    b;
                    for (var d = a.getSenders(), e = void 0, g = 0; g < d.length; g += 1) {
                        var h = d[g];
                        if ("object" !== (void 0 === h ? "undefined" : f(h)) || !h.track || "object" !== f(h.track) || !h.track.kind) return n.warn("Access senders error"), 
                        null;
                        if ("video" === h.track.kind) {
                            if (e) return n.warn("Multiple video sender, skipping"), null;
                            e = h;
                        }
                    }
                    if (!e) return n.warn("No video sender found"), null;
                    if (!e.getParameters || "function" != typeof e.getParameters) return n.warn("Sender getParameters error"), 
                    b;
                    var i = e.getParameters();
                    return "object" !== (void 0 === i ? "undefined" : f(i)) ? null : ("encodings" in i || (i.encodings = []), 
                    0 === i.encodings.length && i.encodings.push({
                        maxBitrate: 0
                    }), i);
                }
            } ]), a;
        }();
        c.ConfigServiceWrapper = o;
    }, {
        "../../config/settings": 34,
        "../../utility/csiologger": 88,
        "../../utility/registry": 95,
        "./configserviceget": 48,
        "./configservicepost": 49
    } ],
    51: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ConnectionManager = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("../config/constants"), g = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(f), h = a("./wscollectorconnection"), i = a("./restcollectorconnection"), j = a("../utility/registry"), k = function() {
            function a() {
                d(this, a), this.connection = null;
            }
            return e(a, [ {
                key: "setupCollectorConnection",
                value: function(a) {
                    a === g.transportType.rest ? this.connection = new i.RestCollectorConnection() : this.connection = new h.WsCollectorConnection();
                }
            }, {
                key: "setup",
                value: function() {
                    return this.connection ? this.connection.setup() : new Promise(function(a, b) {
                        b();
                    });
                }
            }, {
                key: "isReady",
                value: function() {
                    return !!this.connection && this.connection.isReady();
                }
            }, {
                key: "send",
                value: function(a) {
                    if (!this.connection) return void j.Registry.getGenericEventHandler().sendEvent(g.logEvents.error, {
                        msg: "Connection not available to the collector"
                    });
                    this.connection.send(a);
                }
            } ]), a;
        }();
        c.ConnectionManager = k;
    }, {
        "../config/constants": 33,
        "../utility/registry": 95,
        "./restcollectorconnection": 54,
        "./wscollectorconnection": 57
    } ],
    52: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Jwt = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../../utility/base64"), h = d(g), i = a("../../utility/csiologger"), j = d(i), k = a("../../utility/registry"), l = a("../../config/constants"), m = d(l), n = function() {
            function a() {
                e(this, a), this.cryptotype = null, window.crypto && window.crypto.subtle ? (this.cryptotype = "standard", 
                this.subtlecrypto = window.crypto.subtle) : window.crypto && !window.crypto.subtle && window.crypto.webkitSubtle ? (this.cryptotype = "webkit", 
                this.subtlecrypto = window.crypto.webkitSubtle) : window.msCrypto && window.msCrypto.subtle ? (this.cryptotype = "ie", 
                this.subtlecrypto = window.msCrypto.subtle) : (this.subtlecrypto = null, j.info("WebCryptography API not supported in this browser.")), 
                this.browserName = k.Registry.getEndpoint().getBrowserName();
            }
            return f(a, [ {
                key: "sign",
                value: function(a, b, c) {
                    var d = this;
                    return new Promise(function(e, f) {
                        "HS256" !== a.alg && f("Use header.alg=HS256"), a = JSON.stringify(a), "string" != typeof b && (b = JSON.stringify(b));
                        var g = h.urlencodeUnicode(a) + "." + h.urlencodeUnicode(b);
                        window.csioReactNative && window.csiosign(g, c, function(a, b) {
                            if (a) return j.log("Token sign error", a), void f(error);
                            e(b);
                        });
                        var i = new ArrayBuffer(g.length), k = new Uint8Array(i), l = {
                            name: "HMAC"
                        };
                        "ie" !== d.cryptotype && "webkit" !== d.cryptotype && d.browserName !== m.browserName.edge || (l.hash = {
                            name: "sha-256"
                        });
                        for (var n = g.length - 1; n >= 0; n--) k[n] = g.charCodeAt(n);
                        var o = d.subtlecrypto.sign(l, c, k);
                        "ie" === d.cryptotype ? (o.onerror = f, o.oncomplete = function(a) {
                            g = d.buildToken(a.target.result, g), e(g);
                        }) : o.then(function(a) {
                            g = d.buildToken(a, g), e(g);
                        }).catch(function(a) {
                            f(a);
                        });
                    });
                }
            }, {
                key: "buildToken",
                value: function(a, b) {
                    for (var c = "", d = new Uint8Array(a), e = d.byteLength, f = 0; f < e; f++) c += String.fromCharCode(d[f]);
                    return b += "." + h.urlencode(c);
                }
            }, {
                key: "decode",
                value: function(a) {
                    try {
                        var b = a.split(".")[1], c = h.decode(b);
                        return JSON.parse(c);
                    } catch (a) {
                        return j.error("Could not decode token. "), null;
                    }
                }
            }, {
                key: "importKey",
                value: function(a) {
                    var b = this;
                    return new Promise(function(c, d) {
                        if (window.csioReactNative) return void c(a);
                        if ("webkit" === b.cryptotype) for (;a.length < 32; ) a += "\0";
                        var e = {
                            kty: "oct",
                            k: h.urlencode(a),
                            alg: "HS256"
                        }, f = {
                            name: "HMAC",
                            hash: {
                                name: "SHA-256"
                            }
                        };
                        if ("ie" === b.cryptotype ? e.extractable = !1 : e.ext = !1, "webkit" === b.cryptotype && (f = null, 
                        e.use = "sig"), "ie" === b.cryptotype || "webkit" === b.cryptotype) {
                            var g = JSON.stringify(e);
                            e = new Uint8Array(g.length);
                            for (var i = 0; i < g.length; i++) e[i] = g.charCodeAt(i);
                        }
                        var j = b.subtlecrypto.importKey("jwk", e, f, !1, [ "sign" ]);
                        "ie" === b.cryptotype ? (j.onerror = d, j.oncomplete = function(a) {
                            c(a.target.result);
                        }) : j.then(c).catch(d);
                    });
                }
            } ]), a;
        }();
        c.Jwt = n;
    }, {
        "../../config/constants": 33,
        "../../utility/base64": 85,
        "../../utility/csiologger": 88,
        "../../utility/registry": 95
    } ],
    53: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.JwtToken = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("./jwt"), h = a("../../utility/registry"), i = a("../../config/constants"), j = d(i), k = a("../../utility/csiologger"), l = d(k), m = function() {
            function a(b) {
                e(this, a), this.token = b, this.statsSubmissionInterval = 15e3, this.collectSDP = !1, 
                this.appId = null, this.userId = null, this.tokenPayload = null, this.jwt = new g.Jwt(), 
                this.expires = null, this.clockSync = h.Registry.getClockSync(), this.adaptiveInterval = !1, 
                this.transportType = j.transportType.rest, this.setupTokenPayload(), this.restApiTransport = !1;
            }
            return f(a, [ {
                key: "getToken",
                value: function() {
                    return this.token;
                }
            }, {
                key: "setupTokenPayload",
                value: function() {
                    var a = this.jwt.decode(this.token);
                    if (this.statsSubmissionInterval = parseInt(a.submissionInterval, 10), this.collectSDP = a.collectSDP, 
                    this.adaptiveInterval = a.adaptiveInterval, this.appId = a.appID, this.userId = a.userID, 
                    this.restApiTransport = a.restApiTransport, navigator.mozGetUserMedia) {
                        var b = a.expiry.split(" ").join("T");
                        this.expires = Date.parse(b);
                    } else this.expires = new Date(a.expiry);
                    this.restApiTransport ? this.transportType = j.transportType.rest : this.transportType = j.transportType.ws, 
                    l.info("transportType is ", this.transportType, this.restApiTransport), h.Registry.getCredentials().setStatsSubmissionInterval(this.statsSubmissionInterval), 
                    h.Registry.getCredentials().setCollectSDP(this.collectSDP), h.Registry.getCredentials().setTransportType(this.transportType), 
                    h.Registry.getCredentials().setAdaptiveInterval(this.adaptiveInterval);
                }
            }, {
                key: "isValid",
                value: function(a) {
                    var b = this, c = !1;
                    if (null !== b.token && b.appId === a.appId && b.userId === encodeURIComponent(a.userId)) {
                        new Date(this.clockSync.getSynchronizedTimestamp()) < b.expires && (c = !0);
                    }
                    return c;
                }
            } ]), a;
        }();
        c.JwtToken = m;
    }, {
        "../../config/constants": 33,
        "../../utility/csiologger": 88,
        "../../utility/registry": 95,
        "./jwt": 52
    } ],
    54: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function g(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.RestCollectorConnection = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = a("../utility/registry"), j = a("./xmlhttp"), k = a("./collectorconnection"), l = a("./restrelays"), m = a("../config/constants"), n = d(m), o = a("../utility/csiologger"), p = d(o), q = function(a) {
            function b() {
                e(this, b);
                var a = f(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this));
                return a.relays = new l.RestRelays(), a;
            }
            return g(b, a), h(b, [ {
                key: "isReady",
                value: function() {
                    return !0;
                }
            }, {
                key: "send",
                value: function(a) {
                    var b = {
                        "Content-Type": "application/json",
                        Authorization: "Bearer " + i.Registry.getAuthenticator().getToken()
                    }, c = a.eventType, d = a.confID, e = a.ucID, f = this.relays, g = f.getRequestUrl(c, d, e);
                    if (!g) return void p.warn("No action for message type: " + c);
                    var h = this.getMessage(c, a);
                    p.log("sending ", g, a), (0, j.sendPostRequest)(g, b, 5e3, h).then(function(b) {
                        if (!b || !b.xhr) return void p.log("Response for request is null");
                        var e = JSON.parse(b.xhr.response);
                        e && "success" !== e.status && (i.Registry.getGenericEventHandler().sendEvent(n.logEvents.restResponseError, {
                            msg: "response failure " + d + ":" + c + ":" + e.msg + ":" + e.status + JSON.stringify(a)
                        }), p.error("Response error:", e.msg, a)), f.handleResponse(c, e, d);
                    }, function(a) {
                        p.error(a);
                    });
                }
            }, {
                key: "getMessage",
                value: function(a, b) {
                    delete b.confID, delete b.channel, delete b.token, delete b.appID, delete b.action, 
                    delete b.ucID, delete b.version, delete b.timeShift;
                    var c = decodeURIComponent(b.localID);
                    b.localID = c;
                    var d = decodeURIComponent(b.remoteID);
                    return b.remoteID = d, a === n.callstatsChannels.processedStats && (b.eventType = "stats"), 
                    b;
                }
            } ]), b;
        }(k.CollectorConnection);
        c.RestCollectorConnection = q;
    }, {
        "../config/constants": 33,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "./collectorconnection": 47,
        "./restrelays": 55,
        "./xmlhttp": 58
    } ],
    55: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f() {
            var a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, b = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
            return function(c, d, e) {
                "success" === c.status ? a && a(c, d) : b && b(c);
            };
        }
        function g(a) {
            var b = f();
            return new Map([ [ j.fabricEvent.fabricTerminated, new r(l.restEventUrl, "/events/fabric/terminated", b) ], [ j.fabricEvent.audioMute, new r(l.restEventUrl, "/events/media/actions", b) ], [ j.fabricEvent.audioUnmute, new r(l.restEventUrl, "/events/media/actions", b) ], [ j.fabricEvent.videoPause, new r(l.restEventUrl, "/events/media/actions", b) ], [ j.fabricEvent.videoResume, new r(l.restEventUrl, "/events/media/actions", b) ], [ j.fabricEvent.screenShareStart, new r(l.restEventUrl, "/events/media/actions", b) ], [ j.fabricEvent.screenShareStop, new r(l.restEventUrl, "/events/media/actions", b) ], [ j.fabricEvent.activeDeviceList, new r(l.restEventUrl, "/events/devices/list", b) ], [ j.fabricEvent.applicationErrorLog, new r(l.restEventUrl, "/events/app/logs", b) ], [ j.fabricEvent.dominantSpeaker, new r(l.restEventUrl, "/events/dominantspeaker", b) ], [ j.fabricEvent.fabricHold, new r(l.restEventUrl, "/events/fabric/actions", b) ], [ j.fabricEvent.fabricResume, new r(l.restEventUrl, "/events/fabric/actions", b) ], [ j.internalFabricEvent.fabricSetup, new r(l.restEventUrl, "/events/fabric/setup", b) ], [ j.fabricEvent.fabricSetupFailed, new r(l.restEventUrl, "/events/fabric/setupfailed", b) ], [ j.internalFabricEvent.userJoined, new r(l.restEventUrl, "", f(function(a, b) {
                b = decodeURIComponent(b);
                var c = m.Registry.getConferenceManager().get(b);
                c && (p.log("UcId is - ", a.ucID, b), c.setUcId(a.ucID), m.Registry.getTransmissionManager().trySend());
            })) ], [ j.internalFabricEvent.userLeft, new r(l.restEventUrl, "/events/user/left", b) ], [ j.internalFabricEvent.userAlive, new r(l.restEventUrl, "/events/user/alive", b) ], [ j.internalFabricEvent.fabricTransportSwitch, new r(l.restEventUrl, "/events/fabric/transportchange", b) ], [ j.internalFabricEvent.mediaPlaybackStart, new r(l.restEventUrl, "/events/media/pipeline", b) ], [ j.internalFabricEvent.mediaPlaybackSuspended, new r(l.restEventUrl, "/events/media/pipeline", b) ], [ j.internalFabricEvent.mediaPlaybackStalled, new r(l.restEventUrl, "/events/media/pipeline", b) ], [ j.internalFabricEvent.ssrcMap, new r(l.restEventUrl, "/events/ssrcmap", b) ], [ j.internalFabricEvent.connectedDeviceList, new r(l.restEventUrl, "/events/devices/list", b) ], [ j.internalFabricEvent.sdpSubmission, new r(l.restEventUrl, "/events/sdp", b) ], [ j.internalFabricEvent.iceDisruptionStart, new r(l.restEventUrl, "/events/ice/status", b) ], [ j.internalFabricEvent.iceDisruptionEnd, new r(l.restEventUrl, "/events/ice/status", b) ], [ j.internalFabricEvent.iceConnectionDisruptionStart, new r(l.restEventUrl, "/events/ice/status", b) ], [ j.internalFabricEvent.iceConnectionDisruptionEnd, new r(l.restEventUrl, "/events/ice/status", b) ], [ j.internalFabricEvent.iceAborted, new r(l.restEventUrl, "/events/ice/status", b) ], [ j.internalFabricEvent.iceTerminated, new r(l.restEventUrl, "/events/ice/status", b) ], [ j.internalFabricEvent.iceFailed, new r(l.restEventUrl, "/events/ice/status", b) ], [ j.internalFabricEvent.iceRestarted, new r(l.restEventUrl, "/events/ice/status", b) ], [ j.internalFabricEvent.fabricDropped, new r(l.restEventUrl, "/events/fabric/status", b) ], [ j.callstatsChannels.processedStats, new r(l.restStatsUrl, "/stats", b) ], [ j.internalFabricEvent.fabricStateChange, new r(l.restEventUrl, "/events/fabric/statechange", b) ], [ j.callstatsChannels.userFeedback, new r(l.restEventUrl, "/events/feedback", b) ], [ j.precalltestEvents.results, new r(l.restEventUrl, "/events/precall", b) ], [ j.precalltestEvents.associate, new r(l.restEventUrl, "/events/precall", b) ], [ j.internalFabricEvent.userDetails, new r(l.restEventUrl, "/events/userdetails", b) ] ]);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.RestRelays = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = a("../config/constants"), j = d(i), k = a("../config/settings"), l = d(k), m = a("../utility/registry"), n = a("../utility/url"), o = a("../utility/csiologger"), p = d(o), q = function() {
            function a() {
                e(this, a), this.items = g();
            }
            return h(a, [ {
                key: "getRequestUrl",
                value: function(a, b, c) {
                    return this.items.has(a) ? this.items.get(a).getRequestUrl(a, b, c) : (p.warn("EventType Unsupported ", a), 
                    null);
                }
            }, {
                key: "handleResponse",
                value: function(a, b, c) {
                    if (!this.items.has(a)) return void p.warn("No response handler for event type " + a);
                    this.items.get(a).handleResponse(b, c, a);
                }
            } ]), a;
        }(), r = function() {
            function a(b, c) {
                var d = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                e(this, a), this.baseUrl = b, this.urlAppendix = c, this.responseHandler = d;
            }
            return h(a, [ {
                key: "getRequestUrl",
                value: function(a, b, c) {
                    return this.makeRequestUrl(a, b, c), this.requestUrl.toString();
                }
            }, {
                key: "makeRequestUrl",
                value: function(a, b, c) {
                    a === j.precalltestEvents.results ? this.requestUrl = new n.Url(this.baseUrl, m.Registry.getCredentials().getAppId(), this.urlAppendix) : (a === j.internalFabricEvent.userJoined && c && (c = ""), 
                    this.requestUrl = new n.Url(this.baseUrl, m.Registry.getCredentials().getAppId() + "/conferences/" + b, c, this.urlAppendix));
                }
            }, {
                key: "handleResponse",
                value: function(a, b, c) {
                    this.responseHandler(a, b, c);
                }
            } ]), a;
        }();
        c.RestRelays = q;
    }, {
        "../config/constants": 33,
        "../config/settings": 34,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "../utility/url": 100
    } ],
    56: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.TransmissionManager = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../utility/timestamps"), h = d(g), i = a("../collections/cache"), j = a("../utility/registry"), k = a("../config/constants"), l = d(k), m = a("../utility/csiologger"), n = d(m), o = function() {
            function a() {
                e(this, a), this.cache = [], this.connectionManager = j.Registry.getConnectionManager(), 
                this.lastTS = 0, this.timerStarted = !1;
            }
            return f(a, [ {
                key: "send",
                value: function(a) {
                    (a.isCachable() || a.canBeSent()) && (this.cache[a.getConferenceId()] || (this.cache[a.getConferenceId()] = new i.Cache()), 
                    this.cache[a.getConferenceId()].add(a, a.isPriority()), this.trySend());
                }
            }, {
                key: "trySend",
                value: function() {
                    if (!this.connectionManager.isReady()) return void this.setupConnection();
                    if (!this.timerStarted) return this.timeToSend() ? void (this.sendMessage() && this.startTimer()) : void (this.getCacheLength() > 0 && this.startTimer());
                }
            }, {
                key: "setupConnection",
                value: function() {
                    this.connectionManager.setup().then(function() {
                        n.log("Connected to connectionManager");
                    }).catch(function(a) {
                        return n.log("Could not connect to connectionManager", a);
                    });
                }
            }, {
                key: "sendMessage",
                value: function() {
                    var a = void 0, b = void 0;
                    if (0 === this.getCacheLength()) return !1;
                    for (var c in this.cache) if (this.cache.hasOwnProperty(c) && (b = c, (a = this.cache[b].peak()) && a.canBeSent())) break;
                    return !(!a || !a.canBeSent()) && (n.log("sending message type :", a.toJson().action, a.toJson()), 
                    a = this.cache[b].pop(), this.lastTS = h.getCurrent(), this.connectionManager.send(a.toJson()), 
                    !0);
                }
            }, {
                key: "startTimer",
                value: function() {
                    var a = this;
                    this.timerStarted || 0 != this.getCacheLength() && (this.timerStarted = !0, setTimeout(function() {
                        a.timerStarted = !1, a.trySend();
                    }, 200));
                }
            }, {
                key: "timeToSend",
                value: function() {
                    return h.getCurrent() >= this.lastTS + 200;
                }
            }, {
                key: "getCacheLength",
                value: function() {
                    var a = 0;
                    for (var b in this.cache) this.cache.hasOwnProperty(b) && (a += this.cache[b].length());
                    return a;
                }
            }, {
                key: "updateConferenceId",
                value: function(a) {
                    var b = l.tmpConferenceId;
                    this.cache[b] && this.cache[b].updateConferenceId(a);
                }
            } ]), a;
        }();
        c.TransmissionManager = o;
    }, {
        "../collections/cache": 25,
        "../config/constants": 33,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "../utility/timestamps": 99
    } ],
    57: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function g(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.WsCollectorConnection = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = a("../config/callstatserrors"), j = d(i), k = a("../config/constants"), l = d(k), m = a("../config/settings"), n = d(m), o = a("../utility/registry"), p = a("../utility/csiologger"), q = d(p), r = a("./collectorconnection"), s = function(a) {
            function b() {
                e(this, b);
                var a = f(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this));
                return a.wsConnection = null, a.wsConnectionState = l.wsConnectionState.closed, 
                a.connected = !1, a.reconnected = !1, a;
            }
            return g(b, a), h(b, [ {
                key: "onOpenHandler",
                value: function() {
                    var a = this;
                    a.wsConnectionState = l.wsConnectionState.connected, a.connected ? a.reconnected = !0 : a.connected = !0, 
                    a.reconnected = !1;
                }
            }, {
                key: "onCloseHandler",
                value: function() {
                    var a = this;
                    a.wsConnectionState = l.wsConnectionState.closed, q.log("**** Connection to the backend closed."), 
                    a.wsConnection && (a.wsConnection = null);
                }
            }, {
                key: "onErrorHandler",
                value: function(a) {
                    var b = this;
                    b.wsConnectionState = l.wsConnectionState.closed, q.log("**** Connection establishment to the backend failed."), 
                    b.callback && b.callback(j.csError.wsChannelFailure, "WebSocket establishment failed.", a);
                }
            }, {
                key: "onMessageHandler",
                value: function(a) {
                    var b = a.data, c = JSON.parse(b);
                    if ("200 OK" === c.status) {
                        if ("feedback" === c.event) window.localStorage.removeItem("feedback"); else if (c.event === l.internalFabricEvent.userJoined) {
                            var d = o.Registry.getConferenceManager().get(decodeURIComponent(c.conferenceID));
                            d && d.setUcId(c.ucID), q.log("UcId =", c.ucID), o.Registry.getTransmissionManager().trySend();
                        }
                    } else q.error("Collector error:", c.reason);
                }
            }, {
                key: "setup",
                value: function() {
                    var a = this;
                    return new Promise(function(b, c) {
                        if (a.wsConnectionState === l.wsConnectionState.initiated || a.wsConnectionState === l.wsConnectionState.connected) return q.log("setupWebSocketConnection is called when already connected!"), 
                        a.callback && a.callback(j.csError.success, l.csCallBackMessages.wsConnected), void b();
                        a.wsConnectionState = l.wsConnectionState.initiated, q.log("creating new WebSocket", n.wsUrl), 
                        a.wsConnection = new WebSocket(n.wsUrl, "echo-protocol"), a.wsConnection.onopen = function() {
                            b(), a.onOpenHandler();
                        }, a.wsConnection.onclose = function() {
                            a.onCloseHandler();
                        }, a.wsConnection.onerror = function(b) {
                            c(b), a.onErrorHandler(b);
                        }, a.wsConnection.onmessage = function(b) {
                            a.onMessageHandler(b);
                        };
                    });
                }
            }, {
                key: "isReady",
                value: function() {
                    var a = this;
                    return !(!a.wsConnection || 1 !== a.wsConnection.readyState);
                }
            }, {
                key: "getState",
                value: function() {
                    var a = this;
                    return a.wsConnection ? a.wsConnection.readyState : -1;
                }
            }, {
                key: "send",
                value: function(a) {
                    this.wsConnection.send(JSON.stringify(a));
                }
            } ]), b;
        }(r.CollectorConnection);
        c.WsCollectorConnection = s;
    }, {
        "../config/callstatserrors": 32,
        "../config/constants": 33,
        "../config/settings": 34,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "./collectorconnection": 47
    } ],
    58: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b, c, d, e) {
            return new Promise(function(f, g) {
                var h = null, i = null, j = null, l = new XMLHttpRequest(), p = n.Registry.getEndpoint().getBrowserName();
                if (!l) return void g(new Error("creating instance failed"));
                h = k.getCurrent(), l.open(a, b), p !== m.browserName.msie && (l.timeout = d);
                for (var q in c) c.hasOwnProperty(q) && l.setRequestHeader(q, c[q]);
                var r = null;
                if ("POST" === a) {
                    if ("application/x-www-form-urlencoded" === c["Content-Type"]) {
                        var s = [];
                        for (var t in e) e.hasOwnProperty(t) && s.push(encodeURIComponent(t) + "=" + encodeURIComponent(e[t]));
                        r = s.join("&");
                    }
                    "application/json" === c["Content-Type"] && (r = JSON.stringify(e));
                }
                l.onload = function() {
                    i = k.getCurrent(), j = i - h;
                    var a = new o(l, j);
                    f(a);
                }, l.ontimeout = function() {
                    g(new Error("connection timeout"));
                }, l.onreadystatechange = function() {
                    4 === l.readyState && 0 === l.status && g(new Error("no server response received"));
                }, l.send(r);
            });
        }
        function g(a, b, c) {
            return f("GET", a, b, c, null);
        }
        function h(a, b, c, d) {
            return f("POST", a, b, c, d);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var i = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }();
        c.sendGetRequest = g, c.sendPostRequest = h;
        var j = a("../utility/timestamps"), k = d(j), l = a("../config/constants"), m = d(l), n = a("../utility/registry"), o = function() {
            function a(b, c) {
                e(this, a), this.xhr = b, this.elapsed = c;
            }
            return i(a, [ {
                key: "getXhr",
                value: function() {
                    return this.xhr;
                }
            }, {
                key: "getElapsed",
                value: function() {
                    return this.elapsed;
                }
            } ]), a;
        }();
    }, {
        "../config/constants": 33,
        "../utility/registry": 95,
        "../utility/timestamps": 99
    } ],
    59: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.XMLHttpService = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("../utility/sigmoid"), g = a("../utility/csiologger"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = 100, j = 1e4, k = function() {
            function a() {
                var b = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "XMLHttpService", c = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i, e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : j;
                d(this, a), this.name = b, this.minRetryTimeout = c, this.sigmoid = new f.Sigmoid(e - c, 15, .5), 
                this.reset();
            }
            return e(a, [ {
                key: "reset",
                value: function() {
                    this.inProgress = !1, this.completed = !1, this.resolveCb && this.rejectCb(new Error(this.name + ": resetting")), 
                    this.resolveCb = null, this.rejectCb = null;
                }
            }, {
                key: "initiate",
                value: function() {
                    var a = this;
                    if (this.inProgress) return new Promise(function(b, c) {
                        c(new Error(a.name + ": in progress"));
                    });
                    var b = new Promise(function(b, c) {
                        a.resolveCb = b, a.rejectCb = c;
                    });
                    return this.inProgress = !0, this.sendRequest(), b;
                }
            }, {
                key: "isCompleted",
                value: function() {
                    return this.completed;
                }
            }, {
                key: "handleSendError",
                value: function(a) {
                    h.log(this.name + ": send next request (" + a + ")"), this.sendNextRequest();
                }
            }, {
                key: "handleResponseProxy",
                value: function(a) {
                    this.handleResponse(a), this.resetTimeout();
                }
            }, {
                key: "handleResponse",
                value: function(a) {
                    h.error(this.name + ": handleResponse() not implemented"), this.completeProcess();
                }
            }, {
                key: "completeProcess",
                value: function() {
                    this.inProgress = !1, this.completed = !0, this.resolveCb.apply(this, arguments);
                }
            }, {
                key: "request",
                value: function() {
                    return h.error(this.name + ": request() not implemented!"), new Promise(function(a, b) {
                        a();
                    });
                }
            }, {
                key: "sendRequest",
                value: function() {
                    if (this.inProgress) {
                        var a = this.request();
                        a && a.then(this.handleResponseProxy.bind(this), this.handleSendError.bind(this));
                    }
                }
            }, {
                key: "sendNextRequest",
                value: function() {
                    setTimeout(this.sendRequest.bind(this), this.getTimeout());
                }
            }, {
                key: "resetTimeout",
                value: function() {
                    this.sigmoid.reset();
                }
            }, {
                key: "getTimeout",
                value: function() {
                    return this.minRetryTimeout + this.sigmoid.getActual();
                }
            } ]), a;
        }();
        c.XMLHttpService = k;
    }, {
        "../utility/csiologger": 88,
        "../utility/sigmoid": 97
    } ],
    60: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Measurement = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./resolution"), g = a("./validator"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = function() {
            function a() {
                d(this, a), this.pcHash = null, this.ssrc = null, this.streamType = null, this.mediaType = null, 
                this.resolution = null, this.frameRateReceived = null, this.frameHeight = null, 
                this.frameWidth = null, this.droppedFramesNum = null, this.framesReceived = null, 
                this.rtt = null, this.jitter = null, this.lostPackets = -1, this.receivedPackets = -1, 
                this.sentPackets = -1, this.discardedPackets = -1, this.sentBytes = -1, this.receivedBytes = -1, 
                this.track = null, this.fractionLost = 0;
            }
            return e(a, null, [ {
                key: "make",
                value: function(b, c, d, e, f, g, i, j, k, l, m, n, o, p, q, r, s, t) {
                    var u = new a(), v = function(a, b) {
                        -1 === [ void 0, null ].indexOf(b) && (u[a] = b);
                    };
                    return v("pcHash", b), v("ssrc", c), v("streamType", d), v("mediaType", e), v("frameRateReceived", f), 
                    v("frameHeight", h.checkForNan(parseInt(g, 10))), v("frameWidth", h.checkForNan(parseInt(i, 10))), 
                    v("droppedFramesNum", j), v("framesReceived", k), v("rtt", l), v("jitter", m), v("lostPackets", n), 
                    v("receivedPackets", o), v("sentPackets", p), v("discardedPackets", q), v("sentBytes", r), 
                    v("receivedBytes", s), v("track", t), u.setFrameRateReceived(f), u;
                }
            } ]), e(a, [ {
                key: "getPcHash",
                value: function() {
                    return this.pcHash;
                }
            }, {
                key: "getSSRC",
                value: function() {
                    return this.ssrc;
                }
            }, {
                key: "getStreamType",
                value: function() {
                    return this.streamType;
                }
            }, {
                key: "getMediaType",
                value: function() {
                    return this.mediaType;
                }
            }, {
                key: "getResolution",
                value: function() {
                    return this.resolution ? this.resolution.toString() : null;
                }
            }, {
                key: "getFrameRateReceived",
                value: function() {
                    return this.frameRateReceived;
                }
            }, {
                key: "getFrameHeight",
                value: function() {
                    return this.frameHeight;
                }
            }, {
                key: "getFrameWidth",
                value: function() {
                    return this.frameWidth;
                }
            }, {
                key: "getDroppedFramesNum",
                value: function() {
                    return this.droppedFramesNum;
                }
            }, {
                key: "getFramesReceived",
                value: function() {
                    return this.framesReceived;
                }
            }, {
                key: "setFrameRateReceived",
                value: function(a) {
                    this.frameRateReceived = a, void 0 !== this.frameRateReceived && void 0 !== this.frameWidth && void 0 !== this.frameHeight && this.frameWidth > 0 && this.frameHeight > 0 ? this.resolution = new f.Resolution(this.frameWidth, this.frameHeight, this.frameRateReceived) : this.resolution = null;
                }
            }, {
                key: "getJitter",
                value: function() {
                    return this.jitter;
                }
            }, {
                key: "getRTT",
                value: function() {
                    return this.rtt;
                }
            }, {
                key: "getLostPackets",
                value: function() {
                    return this.lostPackets;
                }
            }, {
                key: "getDiscardedPackets",
                value: function() {
                    return this.discardedPackets;
                }
            }, {
                key: "getReceivedPackets",
                value: function() {
                    return this.receivedPackets;
                }
            }, {
                key: "getSentPackets",
                value: function() {
                    return this.sentPackets;
                }
            }, {
                key: "getSentBytes",
                value: function() {
                    return this.sentBytes;
                }
            }, {
                key: "getReceivedBytes",
                value: function() {
                    return this.receivedBytes;
                }
            }, {
                key: "setFractionLost",
                value: function(a) {
                    this.fractionLost = void 0 === a ? null : a;
                }
            }, {
                key: "getFractionLost",
                value: function() {
                    return this.fractionLost;
                }
            }, {
                key: "extractTrack",
                value: function() {
                    var a = this.track;
                    return this.track = null, a;
                }
            }, {
                key: "toString",
                value: function() {
                    return "pcHash: " + this.pcHash + ", ssrc: " + this.ssrc + ", streamType: " + this.streamType + ", mediaType: " + this.mediaType + ", frameRateReceived: " + this.frameRateReceived + ", frameHeight: " + this.frameHeight + ", frameWidth: " + this.frameWidth + ", droppedFramesNum: " + this.droppedFramesNum + ", rtt: " + this.rtt + ", jitter: " + this.jitter + ", lostPackets: " + this.lostPackets + ", receivedPackets: " + this.receivedPackets + ", sentPackets: " + this.sentPackets + ", discardedPackets: " + this.discardedPackets + ", sentBytes: " + this.sentBytes + ", receivedBytes: " + this.receivedBytes;
                }
            } ]), a;
        }();
        c.Measurement = i;
    }, {
        "./resolution": 68,
        "./validator": 83
    } ],
    61: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.CPULimitationObserver = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../../config/constants"), h = d(g), i = a("../../utility/timestamps"), j = d(i), k = function() {
            function a() {
                e(this, a), this.ewmaDiscardedPackets = 0, this.ewmaLostPackets = 0, this.ewmaDroppedFrames = 0, 
                this.last = 0, this.noticed = 0;
            }
            return f(a, [ {
                key: "test",
                value: function(a) {
                    var b = a.discardedPackets, c = a.lostPackets;
                    if (!c || c < 1 || !b || b < 1) return !1;
                    if (0 === this.last) return this.last = j.getCurrent(), this.ewmaLostPackets = c, 
                    this.ewmaDiscardedPackets = b, !1;
                    var d = j.getCurrent(), e = Math.max(d - this.last, 1), f = Math.min((5e3 - e) / 5e3, .9), g = a.droppedFrames;
                    return this.ewmaLostPackets = this.ewmaLostPackets * f + c, this.ewmaDroppedFrames = this.ewmaDroppedFrames * f + g, 
                    this.ewmaDiscardedPackets = this.ewmaDiscardedPackets * f + b, !(!g || g < 1) && (!(1 < this.ewmaLostPackets || 1 < this.ewmaDiscardedPackets) && (!(d - this.noticed < 1e4) && (!(this.ewmaDroppedFrames < 1) && (this.noticed = d, 
                    !0))));
                }
            } ]), a;
        }(), l = function() {
            function a(b) {
                e(this, a), this.notifyCallback = b, this.inbVideoTesters = new Map();
            }
            return f(a, [ {
                key: "accept",
                value: function(a) {
                    for (var b = a.filter(function(a) {
                        return a.getMediaType() === h.mediaType.video && a.getStreamType() === h.streamType.inbound;
                    }), c = 0; c < b.length; ++c) {
                        var d = b[c];
                        this.checkInboundVideo(d);
                    }
                }
            }, {
                key: "checkInboundVideo",
                value: function(a) {
                    var b = a.peek(), c = a.getSSRC();
                    if (this.inbVideoTesters.has(c) || this.inbVideoTesters.set(c, new k()), this.inbVideoTesters.get(c).test(b)) {
                        var d = {
                            reason: h.limitationType.cpu,
                            ssrc: c
                        };
                        this.notifyCallback(d);
                    }
                }
            }, {
                key: "toString",
                value: function() {
                    return "CPULimitationObserver";
                }
            } ]), a;
        }();
        c.CPULimitationObserver = l;
    }, {
        "../../config/constants": 33,
        "../../utility/timestamps": 99
    } ],
    62: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.OneWayMediaObserver = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../../config/constants"), h = d(g), i = a("../onewaymediadisruption"), j = a("../../utility/timestamps"), k = d(j), l = function() {
            function a(b) {
                e(this, a), this.notifierCallback = b, this.inbOneWayAudioDisruption = {
                    sent: !1,
                    started: 0,
                    hasTrafficTs: 0
                }, this.outbOneWayAudioDisruption = {
                    sent: !1,
                    started: 0,
                    hasTrafficTs: 0
                };
            }
            return f(a, [ {
                key: "accept",
                value: function(a) {
                    var b = a.filter(function(a) {
                        return a.getMediaType() == h.mediaType.audio && a.getStreamType() === h.streamType.inbound;
                    }), c = a.filter(function(a) {
                        return a.getMediaType() == h.mediaType.audio && a.getStreamType() === h.streamType.outbound;
                    }), d = [ this.getInbOneWayAudioDisruption(b, c), this.getOutbOneWayAudioDisruption(b, c) ], e = d.filter(function(a) {
                        return null !== a;
                    });
                    0 < e.length && this.notifierCallback(e);
                }
            }, {
                key: "toString",
                value: function() {
                    return "DisruptionObserver";
                }
            }, {
                key: "getInbOneWayAudioDisruption",
                value: function(a, b) {
                    var c = this.inbOneWayAudioDisruption;
                    if (c.sent) return null;
                    var d = b.filter(function(a) {
                        return 0 === a.getStartTime();
                    }).length < 1, e = b.filter(function(a) {
                        return !a.hasTraffic();
                    }).length < 1;
                    if (!d || e) return null;
                    var f = a.filter(function(a) {
                        return !a.hasTraffic();
                    }).length < 1;
                    return 0 < a.length && f ? (c.started = 0, null) : 0 === c.started ? (c.started = k.getCurrent(), 
                    null) : k.getCurrent() - 5e3 < c.started ? null : (c.sent = !0, new i.OneWayMediaDisruption(h.oneWayMediaTypes.audio));
                }
            }, {
                key: "getOutbOneWayAudioDisruption",
                value: function(a, b) {
                    var c = this.outbOneWayAudioDisruption;
                    if (c.sent) return null;
                    var d = a.filter(function(a) {
                        return 0 === a.getStartTime();
                    }).length < 1, e = a.filter(function(a) {
                        return !a.hasTraffic();
                    }).length < 1;
                    if (!d || !e) return null;
                    var f = b.filter(function(a) {
                        return !a.hasTraffic();
                    }).length < 1;
                    return 0 < b.length && f ? (c.started = 0, null) : 0 === c.started ? (c.started = k.getCurrent(), 
                    null) : k.getCurrent() - 5e3 < c.started ? null : (c.sent = !0, new i.OneWayMediaDisruption(h.oneWayMediaTypes.audio));
                }
            } ]), a;
        }();
        c.OneWayMediaObserver = l;
    }, {
        "../../config/constants": 33,
        "../../utility/timestamps": 99,
        "../onewaymediadisruption": 66
    } ],
    63: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.QPSumObserver = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../../config/constants"), h = d(g), i = a("../../utility/timestamps"), j = d(i), k = function() {
            function a(b) {
                e(this, a), this.lastQpSum = null, this.qpAvg = null, this.noticed = 0;
            }
            return f(a, [ {
                key: "test",
                value: function(a) {
                    var b = a.getTrack();
                    if (!b || !b.data || !b.data.qpSum) return !1;
                    if (!this.lastQpSum) return this.lastQpSum = b.data.qpSum, !1;
                    var c = b.data.qpSum - this.lastQpSum;
                    if (this.lastQpSum = b.data.qpSum, null === this.qpAvg) this.qpAvg = c; else {
                        this.qpAvg = .2 * c + .8 * this.qpAvg;
                    }
                    var d = Math.max(2 * this.qpAvg, 1);
                    if (c < this.qpAvg + d) return !1;
                    var e = j.getCurrent();
                    return this.noticed < e - 1e4;
                }
            } ]), a;
        }(), l = function() {
            function a(b) {
                e(this, a), this.notifyCallback = b, this.testers = new Map();
            }
            return f(a, [ {
                key: "accept",
                value: function(a) {
                    for (var b = 0; b < a.length; ++b) {
                        var c = a[b];
                        if (c.getMediaType() === h.mediaType.video) {
                            var d = c.getSSRC();
                            this.testers.has(d) || this.testers.set(d, new k(c));
                            if (this.testers.get(d).test(c)) {
                                var e = {
                                    reason: h.qualityDisruptionTypes.qpchange
                                };
                                this.notifyCallback(e);
                            }
                        }
                    }
                }
            }, {
                key: "toString",
                value: function() {
                    return "QPSumObserver";
                }
            } ]), a;
        }();
        c.QPSumObserver = l;
    }, {
        "../../config/constants": 33,
        "../../utility/timestamps": 99
    } ],
    64: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.SendingTrigger = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../../utility/timestamps"), h = d(g), i = a("../validator"), j = d(i), k = 1e3, l = 3e4, m = function() {
            function a(b, c, d) {
                e(this, a), this.last = null, this.actual = 0, this.name = b, this.alpha = c, this.supplier = d;
            }
            return f(a, [ {
                key: "update",
                value: function(a) {
                    if (null === this.last) return void (this.last = a);
                    var b = Math.abs(a - this.last);
                    this.actual = b * this.alpha + this.actual * (1 - this.alpha), this.last = a;
                }
            }, {
                key: "doTest",
                value: function(a) {
                    var b = this.last;
                    return this.update(a), null !== b && b + this.supplier(this.actual) < a;
                }
            } ]), a;
        }(), n = function() {
            function a() {
                e(this, a);
                var b = this;
                this.marginFactor = 1, this.rttTester = new m("RTT Tester", .2, function(a) {
                    return Math.max(50, a) * b.marginFactor;
                }), this.throughputTester = new m("Throughput Tester", .1, function(a) {
                    return Math.max(100, a) * b.marginFactor;
                }), this.FLTester = new m("FL Tester", .1, function(a) {
                    return Math.max(.2, a) * b.marginFactor;
                }), this.lastDecreased = h.getCurrent();
            }
            return f(a, [ {
                key: "test",
                value: function(a) {
                    var b = a.peek();
                    if (!b) return !1;
                    var c = a.getTrack(), d = c.data, e = b.getRTT(), f = j.checkForNan(parseInt(d.csioIntBRKbps, 10)), g = b.getFractionLost();
                    if (this.rttTester.doTest(e) || this.throughputTester.doTest(f) || this.FLTester.doTest(g)) return this.marginFactor = Math.min(2 * this.marginFactor, 15), 
                    !0;
                    var i = h.getCurrent();
                    return 3e3 < i - this.lastChanged && (this.marginFactor = Math.max(this.marginFactor - .5, 1), 
                    this.lastDecreased = i), !1;
                }
            } ]), a;
        }(), o = function() {
            function a(b) {
                e(this, a), this.notifyCallback = b, this.minInterval = k, this.maxInterval = l, 
                this.notified = 0, this.testers = new Map();
            }
            return f(a, [ {
                key: "setup",
                value: function(a, b) {
                    this.minInterval = a, this.maxInterval = b;
                }
            }, {
                key: "accept",
                value: function(a) {
                    var b = h.getCurrent(), c = b - this.notified;
                    if (this.minInterval === this.maxInterval) return void (this.minInterval <= c && (this.notifyCallback(), 
                    this.notified = b));
                    if (!(c < this.minInterval)) {
                        if (c < this.maxInterval) {
                            if (!1 === this.doSend(a)) return;
                        }
                        this.notifyCallback(), this.notified = b;
                    }
                }
            }, {
                key: "setIntervals",
                value: function(a, b) {
                    this.minInterval = a, this.maxInterval = b;
                }
            }, {
                key: "toString",
                value: function() {
                    return "SendingTrigger";
                }
            }, {
                key: "doSend",
                value: function(a) {
                    for (var b = 0; b < a.length; ++b) {
                        var c = a[b], d = c.getSSRC();
                        this.testers.has(d) || this.testers.set(d, new n());
                        if (this.testers.get(d).test(c)) return !0;
                    }
                    return !1;
                }
            } ]), a;
        }();
        c.SendingTrigger = o;
    }, {
        "../../utility/timestamps": 99,
        "../validator": 83
    } ],
    65: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.ThroughputObserver = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../../config/constants"), h = d(g), i = a("../../utility/timestamps"), j = d(i), k = function() {
            function a(b) {
                e(this, a), this.notifierCallback = b, this.observations = new Map();
            }
            return f(a, [ {
                key: "accept",
                value: function(a) {
                    var b = a.filter(function(a) {
                        return a.getMediaType() === h.mediaType.video && a.getStreamType() === h.streamType.outbound;
                    });
                    if (!(b.length < 1)) {
                        var c = this;
                        b.forEach(function(a) {
                            c.observe(a);
                        });
                    }
                }
            }, {
                key: "toString",
                value: function() {
                    return "ThroughputObserver";
                }
            }, {
                key: "getObservations",
                value: function(a) {
                    if (this.observations.has(a)) return this.observations.get(a);
                    var b = {
                        ssrc: 0,
                        started: 0,
                        max: 0,
                        maxTs: 0,
                        stable: 0,
                        stableTs: 0,
                        ready: !1,
                        maxVerified: !1,
                        stableVerified: !1
                    };
                    return this.observations.set(a, b), this.observations.get(a);
                }
            }, {
                key: "observe",
                value: function(a) {
                    var b = a.getSSRC(), c = this.getObservations(b), d = j.getCurrent();
                    if (!0 !== c.ready) {
                        if (0 === c.started) return c.ssrc = b, void (c.started = d);
                        var e = a.getTrack(), f = e.data, g = f.csioIntBRKbps, h = Math.min(50, .05 * g);
                        if (c.max < g ? (c.max = g, c.maxTs = d) : 1e4 < d - c.maxTs && (c.maxVerified = !0), 
                        !(d - c.started < 15e3) && (g - h < f.csioAvgBRKbps && f.csioAvgBRKbps < g + h && (c.stableTs = d, 
                        c.stable = g, c.stableVerified = !0), c.stableVerified && c.maxVerified)) {
                            var i = {
                                ssrc: String(c.ssrc),
                                maxsendingKBitrate: c.max,
                                timeToMaxSendingKBitrate: c.maxTs - c.started,
                                stablesendingKBitrate: c.stable,
                                timeToStableSendingKBitrate: c.stableTs - c.started
                            };
                            this.notifierCallback(i), c.ready = !0;
                        }
                    }
                }
            } ]), a;
        }();
        c.ThroughputObserver = k;
    }, {
        "../../config/constants": 33,
        "../../utility/timestamps": 99
    } ],
    66: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a(b) {
                var c = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "0";
                d(this, a), this.mediaType = b, this.ssrc = c;
            }
            return e(a, [ {
                key: "getContent",
                value: function() {
                    var a = this;
                    return {
                        mediaType: a.mediaType,
                        ssrc: a.ssrc
                    };
                }
            } ]), a;
        }();
        c.OneWayMediaDisruption = f;
    }, {} ],
    67: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a(b, c, e, f, g, h) {
                d(this, a), this.candidatePair = b, this.codec = c, this.pcHash = e, this.trackStats = f, 
                this.transportStats = g, this.measurements = h;
            }
            return e(a, [ {
                key: "getCandidatePair",
                value: function() {
                    return this.candidatePair;
                }
            }, {
                key: "getCodec",
                value: function() {
                    return this.codec;
                }
            }, {
                key: "getPcHash",
                value: function() {
                    return this.pcHash;
                }
            }, {
                key: "getTrackStats",
                value: function() {
                    return this.trackStats;
                }
            }, {
                key: "getTransportStats",
                value: function() {
                    return this.transportStats;
                }
            }, {
                key: "getMeasurements",
                value: function() {
                    return this.measurements;
                }
            } ]), a;
        }();
        c.PcStats = f;
    }, {} ],
    68: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a(b, c, e) {
                d(this, a), this.width = b, this.height = c, this.frameRate = e;
            }
            return e(a, [ {
                key: "getWidth",
                value: function() {
                    return this.width;
                }
            }, {
                key: "getHeight",
                value: function() {
                    return this.height;
                }
            }, {
                key: "getFrameRate",
                value: function() {
                    return this.frameRate;
                }
            }, {
                key: "toString",
                value: function() {
                    return this.width && this.height && this.frameRate ? this.width.toString() + "X" + this.height.toString() + "X" + this.frameRate.toString() : null;
                }
            } ]), a;
        }();
        c.Resolution = f;
    }, {} ],
    69: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function g(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.StatsAdapter = c.StatsAdapterIO = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = a("../config/constants"), j = d(i), k = a("../collections/component"), l = a("../utility/registry"), m = a("../utility/hash"), n = d(m), o = c.StatsAdapterIO = {
            RawStatsIn: "RawStatsIn",
            RawStatsOut: "RawStatsOut",
            UnprocessedOut: "UnprocessedOut"
        }, p = function(a) {
            function b(a, c) {
                e(this, b);
                var d = f(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, "StatsAdapter"));
                return d.bindPort(o.RawStatsIn, d.receiveRawData, d), d.declarePort(o.RawStatsOut), 
                d.declarePort(o.UnprocessedOut), d.codeBase = a, d.browser = c, d;
            }
            return g(b, a), h(b, [ {
                key: "receiveRawData",
                value: function(a, b) {
                    if (a) {
                        var c = this.extractRawStats(a);
                        if (c) {
                            window && window.csioReactNative && (c = this.removeValues(c)), this.isConnected(o.UnprocessedOut) && this.transmit(o.UnprocessedOut, c, b);
                            var d = this.processRawStats(c, b);
                            if (d && d.transportStats) for (var e = 0; e < d.transportStats.length; e++) d.transportStats[e].hash = this.getTransportHash(d.transportStats[e]);
                            d && d.transportStats && this.checkTransportStatsUpdates(d.transportStats, b), d && d.trackStats && (d = this.backFillTrackStats(d)), 
                            d && d.transportStats && d.candidatePair && (d = this.backFillCandidatePairStats(d)), 
                            d.pcHash = b, this.transmit(o.RawStatsOut, d);
                        }
                    }
                }
            }, {
                key: "removeValues",
                value: function(a) {
                    for (var b = 0; b < a.length; ++b) {
                        var c = a[b];
                        if (c && c.values) {
                            for (var d = 0; d < c.values.length; ++d) Object.assign(c, c.values[d]);
                            delete c.values;
                        }
                    }
                    return a;
                }
            }, {
                key: "getIceCandidates",
                value: function(a) {
                    if (!a) return {
                        localIceCandidates: [],
                        remoteIceCandidates: [],
                        iceCandidatePairs: []
                    };
                    var b = this.extractRawStats(a);
                    return this.processRawStatsForIceInfo(b);
                }
            }, {
                key: "extractRawStats",
                value: function(a) {
                    var b = [];
                    if (a && a.result) b = a.result(); else if (a && a.forEach) a.forEach(function(a) {
                        b.push(a);
                    }); else for (var c in a) a.hasOwnProperty(c) && b.push(a[c]);
                    return b;
                }
            }, {
                key: "normalizeIceCandidates",
                value: function(a) {
                    for (var b = 0; b < a.length; b += 1) {
                        var c = a[b];
                        c.transport = c.protocol ? c.protocol : "udp", c.ip = c.ip ? c.ip : c.ipAddress, 
                        c.port = c.portNumber ? Number(c.portNumber) : c.port, "ssltcp" === c.transport && (c.transport = "tcp"), 
                        c.id || (c.id = "csio" + c.port);
                    }
                    return a;
                }
            }, {
                key: "normalizeCanidatePairs",
                value: function(a) {
                    for (var b = 0; b < a.length; b += 1) {
                        var c = a[b];
                        "in-progress" === c.state && (c.state = "inprogress"), c.state || (c.state = "succeeded"), 
                        c.nominated || (c.nominated = "true" === c.googActiveConnection), c.priority || (c.priority = 123), 
                        c.id || (c.id = "csio" + c.priority);
                    }
                    return a;
                }
            }, {
                key: "processRawStatsForIceInfo",
                value: function(a) {
                    var b = [], c = [], d = [], e = void 0;
                    if (!a) return {
                        localIceCandidates: b,
                        remoteIceCandidates: c,
                        iceCandidatePairs: d
                    };
                    for (var f = 0; f < a.length; ++f) {
                        var g = this.getParsedStats(a[f]), h = this.statsClassifier(g);
                        if (h.candidatePair) d.push(h.candidatePair); else if (h.transportStats) {
                            if ("transport" === h.transportStats.type) {
                                e = h.transportStats.selectedCandidatePairId;
                                continue;
                            }
                            d.push(h.transportStats);
                        } else h.localCandidate ? b.push(h.localCandidate) : h.remoteCandidate && c.push(h.remoteCandidate);
                    }
                    if (e) for (var i = 0; i < d.length; ++i) d[i].id === e && (d[i].googActiveConnection = "true");
                    return {
                        localIceCandidates: this.normalizeIceCandidates(b),
                        remoteIceCandidates: this.normalizeIceCandidates(c),
                        iceCandidatePairs: this.normalizeCanidatePairs(d)
                    };
                }
            }, {
                key: "processRawStats",
                value: function(a, b) {
                    var c = {}, d = {}, e = {};
                    c.tracks = [], c.candidatePair = [], c.transportStats = [], c.trackStats = [], c.codec = [];
                    for (var f = 0; f < a.length; f++) {
                        var g = this.getParsedStats(a[f]), h = this.statsClassifier(g);
                        h.tracks ? c.tracks.push(h.tracks) : h.candidatePair ? c.candidatePair.push(h.candidatePair) : h.transportStats ? this.codeBase !== j.codeBaseType.firefox ? (parseInt(h.transportStats.bytesReceived, 10) > 0 || parseInt(h.transportStats.bytesSent, 10) > 0) && (c.transportStats.push(h.transportStats), 
                        "true" !== h.transportStats.googActiveConnection && !0 !== h.transportStats.googActiveConnection || (c.activeConnectionIndex = h.transportStats.length)) : "true" !== h.transportStats.selected && !0 !== h.transportStats.selected || (c.transportStats.push(h.transportStats), 
                        c.activeConnectionIndex = h.transportStats.length) : h.bwe ? c.bwe = h.bwe : h.trackStats ? c.trackStats.push(h.trackStats) : h.codec ? c.codec.push(h.codec) : h.localCandidate ? d[h.localCandidate.id] = h.localCandidate : h.remoteCandidate && (e[h.remoteCandidate.id] = h.remoteCandidate);
                    }
                    if (c.tracks) {
                        var i = l.Registry.getConferenceManager().getConferenceForPcHash(b), k = void 0;
                        i && (k = i.getPeerConnectionManager().getPcHandlerByHash(b)), c.tracks.forEach(function(a) {
                            var b = k.getSSRCInfo(a.data.ssrc);
                            void 0 !== b && b.localStartTime || k && (k.updateSDP(c.tracks), b = k.getSSRCInfo(a.data.ssrc)), 
                            b && (a.cname = b.cname, a.msid = b.msid, a.associatedVideoTag = b.associatedVideoTag, 
                            a.usageLabel = b.usageLabel);
                        });
                    }
                    return c.transportStats && this.codeBase === j.codeBaseType.firefox && (c.transportStats = this.getAddressInfoFromCandidates(c.transportStats, d, e)), 
                    c;
                }
            }, {
                key: "getParsedStats",
                value: function(a) {
                    var b = {};
                    if (a.timestamp instanceof Date && (b.timestamp = a.timestamp.getTime().toString()), 
                    a.type && (b.type = a.type), a.names) {
                        for (var c = a.names(), d = 0; d < c.length; ++d) b[c[d]] = a.stat(c[d]);
                        a.id && (b.id = a.id);
                    } else Object.assign(b, a);
                    if (b.values) {
                        for (var e = 0; e < b.values.length; ++e) Object.assign(b, b.values[e]);
                        delete b.values;
                    }
                    return b;
                }
            }, {
                key: "statsClassifier",
                value: function(a) {
                    var b = {}, c = function() {
                        for (var b = arguments.length, c = Array(b), d = 0; d < b; d++) c[d] = arguments[d];
                        return -1 !== c.indexOf(a.type);
                    }, d = c("inbound-rtp", "inboundrtp", "remote-inbound-rtp"), e = "true" === a.isRemote || !0 === a.isRemote;
                    return d || c("outbound-rtp", "outboundrtp", "remote-outbound-rtp") ? (b.tracks = {}, 
                    b.tracks.data = a, b.tracks.ssrc = a.ssrc, b.tracks.streamType = d ? "inbound" : "outbound", 
                    b.tracks.reportType = "local", void 0 !== a.isRemote && (b.tracks.reportType = e ? "remote" : "local")) : c("candidatepair") && a.selected ? b.transportStats = a : c("localcandidate", "local-candidate") ? b.localCandidate = a : c("remotecandidate", "remote-candidate") ? b.remoteCandidate = a : c("transport", "googCandidatePair") ? b.transportStats = a : c("VideoBwe") ? b.bwe = a : c("track") ? b.trackStats = a : c("candidate-pair") ? b.candidatePair = a : c("codec") ? b.codec = a : c("ssrc") && (b.tracks = {}, 
                    b.tracks.data = a, b.tracks.ssrc = a.ssrc, b.tracks.reportType = "local", b.tracks.streamType = a.bytesSent ? "outbound" : "inbound"), 
                    b;
                }
            }, {
                key: "getAddressInfoFromCandidates",
                value: function(a, b, c) {
                    for (var d = void 0, e = void 0, f = 0; f < a.length; f++) d = b[a[f].localCandidateId], 
                    e = c[a[f].remoteCandidateId], d && e && (a[f].localAddr = d.ipAddress + ":" + d.portNumber, 
                    a[f].remoteAddr = e.ipAddress + ":" + e.portNumber, a[f].localAddrType = d.candidateType, 
                    a[f].remoteAddrType = e.candidateType, a[f].transportType = d.transport);
                    return a;
                }
            }, {
                key: "getTransportHash",
                value: function(a) {
                    var b = void 0;
                    return a && (this.codeBase === j.codeBaseType.chrome ? a.googLocalAddress ? (b = a.googLocalAddress, 
                    b.concat(":", a.googRemoteAddress)) : a.selectedCandidatePairId && (b = a.selectedCandidatePairId) : this.codeBase === j.codeBaseType.firefox && (b = a.localAddr, 
                    b.concat(":", a.remoteAddr))), n.generateHash(b);
                }
            }, {
                key: "backFillTrackStats",
                value: function(a) {
                    for (var b = a.tracks.length, c = void 0, d = void 0, e = void 0, f = 0; f < b; f++) c = a.tracks[f], 
                    c.data.trackId && (d = this.getStatsForId(a.trackStats, c.data.trackId)) && (a.tracks[f].data = this.mergeObjects(a.tracks[f].data, d)), 
                    c.data.codecId && (e = this.getStatsForId(a.codec, c.data.codecId)) && (a.tracks[f].data = this.mergeObjects(a.tracks[f].data, e));
                    return a;
                }
            }, {
                key: "backFillCandidatePairStats",
                value: function(a) {
                    for (var b = a.transportStats.length, c = void 0, d = void 0, e = 0; e < b; e++) d = a.transportStats[e], 
                    d.selectedCandidatePairId && (c = this.getStatsForId(a.candidatePair, d.selectedCandidatePairId)) && (a.transportStats[e] = this.mergeObjects(a.transportStats[e], c));
                    return a;
                }
            }, {
                key: "mergeObjects",
                value: function(a, b) {
                    for (var c in b) b.hasOwnProperty(c) && "id" !== c && "type" !== c && (a[c] = b[c]);
                    return a;
                }
            }, {
                key: "getStatsForId",
                value: function(a, b) {
                    if (a) {
                        var c = a.filter(function(a) {
                            return a.id === b;
                        });
                        if (c.length > 0) return c[0];
                    }
                }
            }, {
                key: "formatRelayType",
                value: function(a) {
                    var b = "None";
                    switch (a) {
                      case 0:
                        b = "TURN/TLS";
                        break;

                      case 1:
                        b = "TURN/TCP";
                        break;

                      case 2:
                        b = "TURN/UDP";
                    }
                    return b;
                }
            }, {
                key: "getRelayType",
                value: function(a, b) {
                    var c = this, d = void 0, e = function(b) {
                        if (b.typePreference) {
                            var e = b.typePreference >> 24;
                            return "rtp" === b.protocol && b.address === a && (e >= 0 && e <= 2 && (d = c.formatTypePreference(e)), 
                            !0);
                        }
                        return !1;
                    };
                    return b.getIceCandidates().some(e), d;
                }
            }, {
                key: "getTransportInfo",
                value: function(a, b) {
                    for (var c = {}, d = !1, e = 0; e < a.length; e++) {
                        var f = a[e];
                        if (navigator.mozGetUserMedia && "candidatepair" === f.type && ("true" === f.selected || !0 === f.selected)) {
                            c.foundActive = !0, c.localAddr = f.localAddr, c.remoteAddr = f.remoteAddr, c.localAddrType = f.localAddrType, 
                            c.remoteAddrType = f.remoteAddrType, c.transportType = f.transportType, c.localCandidateId = f.localCandidateId, 
                            c.remoteCandidateId = f.remoteCandidateId;
                            break;
                        }
                        if ("googCandidatePair" === f.type && ("true" === f.googActiveConnection || !0 === f.googActiveConnection)) {
                            c.foundActive = !0, c.localAddr = f.googLocalAddress, c.remoteAddr = f.googRemoteAddress, 
                            c.localAddrType = f.googLocalCandidateType, c.remoteAddrType = f.googRemoteCandidateType, 
                            c.transportType = f.googTransportType;
                            break;
                        }
                        if ("transport" === f.type) {
                            d = !0, f.selectedCandidatePairId && (c.selectedCandidatePairId = f.selectedCandidatePairId);
                            break;
                        }
                    }
                    return d && c.localAddr && (c.ipv6 = 0 === c.localAddr.indexOf("["), c.relayType = getRelayType(c.localAddr, b)), 
                    c;
                }
            }, {
                key: "sendFabricTransportSwitch",
                value: function(a, b) {
                    a.sendFabricTransportSwitch(b);
                }
            }, {
                key: "checkTransportStatsUpdates",
                value: function(a, b) {
                    var c = l.Registry.getConferenceManager().getConferenceForPcHash(b);
                    if (c) {
                        var d = c.getPeerConnectionManager().getPcHandlerByHash(b);
                        if (d) {
                            var e = this.getTransportInfo(a, d), f = d.getTransportInfo();
                            f && (f.localAddr === e.localAddr && f.remoteAddr === e.remoteAddr && f.transportType === e.transportType && f.selectedCandidatePairId === e.selectedCandidatePairId && f.localCandidateId === e.localCandidateId && f.remoteCandidateId === e.remoteCandidateId || (d.setTransportInfo(e), 
                            this.sendFabricTransportSwitch(d, e.relayType)));
                        }
                    }
                }
            } ]), b;
        }(k.Component);
        c.StatsAdapter = p;
    }, {
        "../collections/component": 26,
        "../config/constants": 33,
        "../utility/hash": 92,
        "../utility/registry": 95
    } ],
    70: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.StatsAssembler = c.StatsAssemblerIO = void 0;
        var g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = a("../collections/component"), i = c.StatsAssemblerIO = {
            StatsTupleIn: "StatsTupleIn",
            CallstatsOut: "CallstatsOut"
        }, j = function(a) {
            function b() {
                d(this, b);
                var a = e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, "StatsAssembler"));
                return a.pcHashes = [], a.bindPort(i.StatsTupleIn, a.receiveStats, a), a.declarePort(i.CallstatsOut), 
                a;
            }
            return f(b, a), g(b, [ {
                key: "receiveStats",
                value: function(a) {
                    for (var b = this, c = 0; c < a.tracks.length; c++) {
                        (function(c) {
                            var d = a.tracks[c];
                            if (b.pcHashes.find(function(a) {
                                return a === d.pcHash;
                            })) return "continue";
                            b.pcHashes.push(d.pcHash);
                        })(c);
                    }
                    for (var d = a.getTransportStats(), c = 0; c < this.pcHashes.length; c++) {
                        var e = this.pcHashes[c], f = {};
                        f.codec = a.getCodec(), f.trackStats = a.getTrackStats(), f.tracks = [];
                        for (var g = 0; g < a.tracks.length; g++) {
                            var h = a.tracks[g];
                            h.pcHash === e && f.tracks.push(h);
                        }
                        var j = d.get(e);
                        1 == j.length ? f.Transport = j[0] : f.Transport = j, this.transmit(i.CallstatsOut, e, f);
                    }
                }
            } ]), b;
        }(h.Component);
        c.StatsAssembler = j;
    }, {
        "../collections/component": 26
    } ],
    71: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.StatsCallbackBuilder = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("../utility/registry"), g = function() {
            function a() {
                d(this, a), this.callback = null;
            }
            return e(a, [ {
                key: "setCallback",
                value: function(a) {
                    this.callback = a;
                }
            }, {
                key: "buildStats",
                value: function(a, b) {
                    this.callback && this.buildFromUnifiedFormat(a, b);
                }
            }, {
                key: "getConnectionState",
                value: function() {
                    return !0 === navigator.onLine ? "online" : "offline";
                }
            }, {
                key: "buildConferenceUrl",
                value: function(a) {
                    var b = a.getConferenceId(), c = f.Registry.getConferenceManager().get(b);
                    return c ? c.getUrl() : null;
                }
            }, {
                key: "buildFromUnifiedFormat",
                value: function(a, b) {
                    var c = {};
                    c.connectionState = this.getConnectionState(), c.conferenceURL = this.buildConferenceUrl(b), 
                    c.fabricState = b.getPcState(), c.streams = {}, c.mediaStreamTracks = [];
                    for (var d = 0; d < a.length; d++) {
                        var e = a[d];
                        if ("inbound-rtp" === e.type || "outbound-rtp" === e.type || "ssrc" === e.type || "inboundrtp" === e.type || "outboundrtp" === e.type) {
                            var f = {
                                ssrc: e.ssrc,
                                statsType: e.type,
                                fractionLoss: e.csioIntFL,
                                bitrate: e.csioIntBRKbps,
                                quality: e.csioMark,
                                mediaType: e.csioMediaType,
                                jitter: e.jitter,
                                audioOutputLevel: e.audioOutputLevel,
                                audioIntputLevel: e.audioInputLevel,
                                audioLevel: e.audioLevel,
                                averageRTT: e.csioAvgRtt,
                                averageJitter: e.csioAvgJitter,
                                packetLossPercentage: e.csioPktLossPercentage,
                                rtt: e.roundTripTime,
                                packetRate: e.csioIntPR,
                                remoteUserID: b.getRemoteId()
                            }, g = b.getSSRCInfo(e.ssrc + "");
                            if (g && (f.cname = g.cname, f.msid = g.msid, f.usageLabel = g.usageLabel, f.associatedVideoTag = g.associatedVideoTag), 
                            e.hasOwnProperty("googRtt") && (f.rtt = e.googRtt), e.hasOwnProperty("mozRtt") && (f.rtt = e.mozRtt), 
                            e.hasOwnProperty("googJitterReceived") && (f.jitter = e.googJitterReceived), "inboundrtp" === f.statsType) f.statsType = "inbound-rtp"; else if ("outboundrtp" === f.statsType) f.statsType = "outbound-rtp"; else if ("ssrc" === f.statsType) {
                                var h = e.id;
                                h.indexOf("send") > 0 ? f.statsType = "outbound-rtp" : f.statsType = "inbound-rtp";
                            }
                            "remote-inbound-rtp" !== f.statsType && "remote-outbound-rtp" !== f.statsType && (!0 !== e.isRemote && "true" !== e.isRemote || (f.statsType = "remote-" + f.statsType)), 
                            c.streams[e.ssrc] = f, c.mediaStreamTracks.push(f);
                        }
                    }
                    this.callback(c);
                }
            } ]), a;
        }();
        c.StatsCallbackBuilder = g;
    }, {
        "../utility/registry": 95
    } ],
    72: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function g(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.StatsMonitor = c.StatsMonitorIO = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = a("../collections/component"), j = a("./tracksmonitor"), k = a("./transportsmonitor"), l = a("./statstuple"), m = a("../utility/registry"), n = a("./monitorhooks/sendingtrigger"), o = a("./monitorhooks/onewaymediaobserver"), p = a("./monitorhooks/throughputobserver"), q = a("./monitorhooks/cpulimitationobserver"), r = a("./monitorhooks/qpsumobserver"), s = a("../config/constants"), t = d(s), u = a("../utility/csiologger"), v = d(u), w = c.StatsMonitorIO = {
            PcStatsTupleIn: "PcStatsTupleIn",
            StatsTupleOut: "StatsTupleOut"
        }, x = function(a) {
            function b(a) {
                e(this, b);
                var c = f(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, "StatsMonitor"));
                return c.bindPort(w.PcStatsTupleIn, c.receive, c), c.declarePort(w.StatsTupleOut), 
                c.lastPcStats = null, c.lastPcHash = null, c.tracksmonitor = new j.TracksMonitor(), 
                c.transportsmonitor = new k.TransportsMonitor(a), c.candidatepairs = new Map(), 
                c.monitorhooks = [], c.sendingTrigger = new n.SendingTrigger(c.sendStatsTuple.bind(c)), 
                c.oneWayMediaObserver = new o.OneWayMediaObserver(c.sendDisruptions.bind(c)), c.throughputObserver = new p.ThroughputObserver(c.sendThroughputObservations.bind(c)), 
                c.cpuLimitationObserver = new q.CPULimitationObserver(c.sendCPULimitationObservations.bind(c)), 
                c.qpSumObserver = new r.QPSumObserver(c.sendQPSumDistortions.bind(c)), c.setupHooks(), 
                c;
            }
            return g(b, a), h(b, [ {
                key: "setupHooks",
                value: function() {
                    this.monitorhooks.push(this.sendingTrigger.accept.bind(this.sendingTrigger)), this.monitorhooks.push(this.oneWayMediaObserver.accept.bind(this.oneWayMediaObserver)), 
                    this.monitorhooks.push(this.throughputObserver.accept.bind(this.throughputObserver)), 
                    this.monitorhooks.push(this.cpuLimitationObserver.accept.bind(this.cpuLimitationObserver)), 
                    this.monitorhooks.push(this.qpSumObserver.accept.bind(this.qpSumObserver));
                }
            }, {
                key: "setIntervals",
                value: function(a, b) {
                    this.sendingTrigger.setup(a, b);
                }
            }, {
                key: "receive",
                value: function(a) {
                    var b = a.getPcHash(), c = a.getMeasurements();
                    this.candidatepairs.set(b, a.getCandidatePair()), this.transportsmonitor.set(b, a.getTransportStats());
                    for (var d = 0; d < c.length; d++) {
                        var e = c[d], f = this.tracksmonitor.getMonitor(e);
                        f ? f.add(e) : v.warn("No monitor for ssrc " + e.getSSRC());
                    }
                    this.lastPcStats = a, this.lastPcHash = b;
                    for (var g = this.tracksmonitor.getMonitors(), h = this.monitorhooks, i = 0; i < h.length; i++) {
                        (0, h[i])(g);
                    }
                }
            }, {
                key: "getCandidatePairs",
                value: function() {
                    var a = [];
                    return this.candidatepairs.forEach(function(b, c) {
                        var d = [ c, b ];
                        a.push(d);
                    }), a;
                }
            }, {
                key: "sendStatsTuple",
                value: function() {
                    var a = new l.StatsTuple(this.getCandidatePairs(), this.lastPcStats.getCodec(), this.lastPcStats.getTrackStats(), this.transportsmonitor.getIntervalStats(), this.tracksmonitor.extractTracks());
                    this.transmit(w.StatsTupleOut, a);
                }
            }, {
                key: "sendDisruptions",
                value: function(a) {
                    var b = this;
                    a.forEach(function(a) {
                        b.sendEventMsg(t.internalFabricEvent.oneWayMedia, a.getContent());
                    });
                }
            }, {
                key: "sendCPULimitationObservations",
                value: function(a) {}
            }, {
                key: "sendQPSumDistortions",
                value: function(a) {}
            }, {
                key: "sendThroughputObservations",
                value: function(a) {
                    this.sendEventMsg(t.internalFabricEvent.sendingThroughputObservations, a);
                }
            }, {
                key: "sendEventMsg",
                value: function(a, b) {
                    if (this.lastPcHash) {
                        var c = m.Registry.getConferenceManager().getConferenceForPcHash(this.lastPcHash);
                        if (c) {
                            var d = c.getPeerConnectionManager().getPcHandlerByHash(this.lastPcHash), e = d.getPeerConnection(), f = d.getConferenceId();
                            m.Registry.getEventMessageBuilder().make(a, f, e, b);
                        }
                    }
                }
            } ]), b;
        }(i.Component);
        c.StatsMonitor = x;
    }, {
        "../collections/component": 26,
        "../config/constants": 33,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "./monitorhooks/cpulimitationobserver": 61,
        "./monitorhooks/onewaymediaobserver": 62,
        "./monitorhooks/qpsumobserver": 63,
        "./monitorhooks/sendingtrigger": 64,
        "./monitorhooks/throughputobserver": 65,
        "./statstuple": 75,
        "./tracksmonitor": 81,
        "./transportsmonitor": 82
    } ],
    73: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function g(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.StatsParser = c.StatsParserIO = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = a("../collections/component"), j = a("./measurement"), k = a("./pcstats"), l = a("../utility/rttregistry"), m = a("./validator"), n = d(m), o = a("../config/constants"), p = d(o), q = a("../utility/csiologger"), r = d(q), s = c.StatsParserIO = {
            RawStatsIn: "RawStatsIn",
            PcStatsTupleOut: "PcStatsTupleOut"
        }, t = function(a) {
            function b() {
                e(this, b);
                var a = f(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, "StatsParser"));
                return a.bindPort(s.RawStatsIn, a.receive, a), a.declarePort(s.PcStatsTupleOut), 
                a;
            }
            return g(b, a), h(b, [ {
                key: "receive",
                value: function(a) {
                    if (null === a) return void r.warn("Stats object can not be null");
                    for (var b = a.tracks, c = [], d = 0; d < b.length; ++d) {
                        var e = b[d];
                        if (e && e.data) {
                            var f = j.Measurement.make(a.pcHash, this.getSSRC(e), this.getStreamType(e), this.getMediaType(e), this.getFrameRateReceived(e), this.getFrameHeight(e), this.getFrameWidth(e), this.getDroppedFramesNum(e), this.getFramesReceived(e), this.getRTT(e), this.getJitter(e), this.getLostPackets(e), this.getReceivedPackets(e), this.getSentPackets(e), this.getDiscardedPackets(e), this.getSentBytes(e), this.getReceivedBytes(e), e);
                            c.push(f);
                        } else r.log("No track or track.data.");
                    }
                    var g = new k.PcStats(a.candidatePair, a.codec, a.pcHash, a.trackStats, a.transportStats, c);
                    this.transmit(s.PcStatsTupleOut, g);
                }
            }, {
                key: "getSSRC",
                value: function(a) {
                    return a.ssrc;
                }
            }, {
                key: "getStreamType",
                value: function(a) {
                    return a.streamType === p.streamType.inbound ? p.streamType.inbound : a.streamType === p.streamType.outbound ? p.streamType.outbound : void 0;
                }
            }, {
                key: "getSentBytes",
                value: function(a) {
                    if (void 0 === a.data.bytesSent) return -1;
                    var b = n.checkForNan(parseInt(a.data.bytesSent, 10));
                    return null !== b ? b : -1;
                }
            }, {
                key: "getReceivedBytes",
                value: function(a) {
                    if (void 0 === a.data.bytesReceived) return -1;
                    var b = n.checkForNan(parseInt(a.data.bytesReceived, 10));
                    return null !== b ? b : -1;
                }
            }, {
                key: "getReceivedPackets",
                value: function(a) {
                    if (void 0 === a.data.packetsReceived) return -1;
                    var b = n.checkForNegativeValue(parseInt(a.data.packetsReceived, 10));
                    return null !== b ? b : -1;
                }
            }, {
                key: "getSentPackets",
                value: function(a) {
                    if (void 0 === a.data.packetsSent) return -1;
                    var b = n.checkForNegativeValue(parseInt(a.data.packetsSent, 10));
                    return null !== b ? b : -1;
                }
            }, {
                key: "getDiscardedPackets",
                value: function(a) {
                    if (void 0 === a.data.discardedPackets) return -1;
                    var b = n.checkForNan(parseInt(a.data.discardedPackets, 10));
                    return null !== b ? b : -1;
                }
            }, {
                key: "getLostPackets",
                value: function(a) {
                    if (void 0 === a.data.packetsLost) return -1;
                    var b = n.checkForNegativeValue(parseInt(a.data.packetsLost, 10));
                    return null !== b ? b : -1;
                }
            }, {
                key: "getDroppedFramesNum",
                value: function(a) {
                    if (void 0 === a.data.droppedFrames) return -1;
                    var b = n.checkForNegativeValue(parseInt(a.data.droppedFrames, 10));
                    return null !== b ? b : -1;
                }
            }, {
                key: "getFramesReceived",
                value: function(a) {
                    if (void 0 === a.data.framesReceived) return -1;
                    var b = n.checkForNegativeValue(parseInt(a.data.framesReceived, 10));
                    return null !== b ? b : -1;
                }
            }, {
                key: "getFrameRateReceived",
                value: function(a) {
                    var b = null;
                    return void 0 !== a.data.googFrameRateOutput ? b = parseInt(a.data.googFrameRateOutput, 10) : void 0 !== a.data.googFrameRateDecoded ? b = parseInt(a.data.googFrameRateDecoded, 10) : void 0 !== a.data.googFrameRateReceived ? b = parseInt(a.data.googFrameRateReceived, 10) : void 0 !== a.data.googFrameRateSent ? b = parseInt(a.data.googFrameRateSent, 10) : void 0 !== a.data.framerateMean ? b = parseInt(a.data.framerateMean, 10) : void 0 !== a.data.framesPerSecond && (b = parseInt(a.data.framesPerSecond, 10)), 
                    void 0 !== b && (b = n.checkForNegativeValue(b)), b;
                }
            }, {
                key: "getFrameHeight",
                value: function(a) {
                    var b = void 0;
                    return void 0 !== a.data.googFrameHeightReceived ? b = a.data.googFrameHeightReceived : void 0 !== a.data.googFrameHeightSent ? b = a.data.googFrameHeightSent : void 0 !== a.data.frameHeight && (b = a.data.frameHeight), 
                    b;
                }
            }, {
                key: "getJitter",
                value: function(a) {
                    return void 0 !== a.data.googJitterReceived ? n.checkForNan(parseFloat(a.data.googJitterReceived, 10)) : void 0 !== a.data.jitter ? n.checkForNan(parseFloat(a.data.jitter, 10)) : void 0;
                }
            }, {
                key: "getFrameWidth",
                value: function(a) {
                    return void 0 !== a.data.googFrameWidthReceived ? a.data.googFrameWidthReceived : void 0 !== a.data.googFrameWidthSent ? a.data.googFrameWidthSent : void 0 !== a.data.frameWidth ? a.data.frameWidth : void 0;
                }
            }, {
                key: "getRTT",
                value: function(a) {
                    var b = function(a) {
                        return isNaN(a) || a < 0 ? null : a;
                    };
                    if (void 0 !== a.data.googRtt) return b(parseFloat(a.data.googRtt, 10));
                    if (void 0 !== a.data.mozRtt) return b(parseFloat(a.data.mozRtt, 10));
                    if (a.data.roundTripTime) return b(parseFloat(a.data.roundTripTime, 10));
                    var c = this.getSSRC(a), d = (0, l.getRTTRegistry)().getRTT(c);
                    return d && (a.data.roundTripTime = d), d;
                }
            }, {
                key: "getMediaType",
                value: function(a) {
                    var b = p.mediaType.unknown;
                    return a.data && void 0 !== a.data.mediaType ? a.data.mediaType : (void 0 !== a.data.googFrameRateReceived || void 0 !== a.data.googFrameRateSent ? b = p.mediaType.video : void 0 !== a.data.audioInputLevel || void 0 !== a.data.audioOutputLevel ? b = p.mediaType.audio : a.data.mediaType ? b = a.data.mediaType : void 0 !== a.data.framerateMean && (b = p.mediaType.video), 
                    b);
                }
            } ]), b;
        }(i.Component);
        c.StatsParser = t;
    }, {
        "../collections/component": 26,
        "../config/constants": 33,
        "../utility/csiologger": 88,
        "../utility/rttregistry": 96,
        "./measurement": 60,
        "./pcstats": 67,
        "./validator": 83
    } ],
    74: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function f(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function g(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.StatsTransmitter = c.StatsTransmitterIO = void 0;
        var h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = a("../collections/component"), j = a("../utility/registry"), k = a("../config/constants"), l = d(k), m = a("../utility/csiologger"), n = d(m), o = c.StatsTransmitterIO = {
            CallstatsIn: "CallstatsIn",
            UnprocessedIn: "UnprocessedIn"
        }, p = function(a) {
            function b() {
                e(this, b);
                var a = f(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, "StatsTransmitter"));
                return a.battery = j.Registry.getBattery(), a.lastUnprocessedStats = {}, a.bindPort(o.CallstatsIn, a.receiveCallstats, a), 
                a.bindPort(o.UnprocessedIn, a.receiveUnprocessed, a), a;
            }
            return g(b, a), h(b, [ {
                key: "receiveUnprocessed",
                value: function(a, b) {
                    this.lastUnprocessedStats[b] = a;
                }
            }, {
                key: "receiveCallstats",
                value: function(a, b) {
                    var c = null;
                    if (!(c = this.getUnifiedFormat(b, a))) return void n.warn("Content can not be sent");
                    this.send(a, c);
                }
            }, {
                key: "send",
                value: function(a, b) {
                    var c = j.Registry.getConferenceManager().getConferenceForPcHash(a);
                    if (c) {
                        var d = c.getPeerConnectionManager().getPcHandlerByHash(a);
                        if (d) {
                            var e = d.getPcState();
                            if (e !== l.fabricState.terminated && e !== l.fabricState.hold) {
                                j.Registry.getEventMessageBuilder().make(l.callstatsChannels.processedStats, d.getConferenceId(), d.getPeerConnection(), b), 
                                this.sendToStatsCallback(b.stats, d);
                            }
                        }
                    }
                }
            }, {
                key: "sendToStatsCallback",
                value: function(a, b) {
                    var c = j.Registry.getStatsCallbackBuilder();
                    c && c.buildStats(a, b);
                }
            }, {
                key: "getUnifiedFormat",
                value: function(a, b) {
                    for (var c = this.lastUnprocessedStats[b], d = [], e = 0; e < c.length; e++) {
                        var f = c[e], g = {};
                        if (f.id && (g.id = f.id), f.timestamp && (g.timestamp = f.timestamp), f.type && (g.type = f.type), 
                        f.names) for (var h = f.names(), i = 0; i < h.length; ++i) g[h[i]] = f.stat(h[i]); else Object.assign(g, f);
                        if (g.values) {
                            for (var k = 0; k < g.values.length; ++k) Object.assign(g, g.values[k]);
                            delete g.values;
                        }
                        var l = function(b) {
                            for (var c = 0; c < a.tracks.length; c++) {
                                var d = a.tracks[c];
                                if (d.data.id === b.id && d.data.type === b.type) return d.data;
                            }
                            return b.id === a.Transport.id && b.type === a.Transport.type ? a.Transport : null;
                        }(f);
                        if (l) {
                            for (var m in l) if (l.hasOwnProperty(m)) {
                                if ("id" === m || "type" === m || "timestamp" === m) continue;
                                g[m] = l[m];
                            }
                            d.push(g);
                        } else d.push(g);
                    }
                    var n = {
                        stats: d
                    };
                    return n.wifiStats = j.Registry.getWifiStatsExecutor().getWifiStats(), n.batteryStatus = {}, 
                    n.batteryStatus.batteryLevel = this.battery.getLevel(), n.batteryStatus.isBatteryCharging = this.battery.getCharging(), 
                    n;
                }
            } ]), b;
        }(i.Component);
        c.StatsTransmitter = p;
    }, {
        "../collections/component": 26,
        "../config/constants": 33,
        "../utility/csiologger": 88,
        "../utility/registry": 95
    } ],
    75: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a(b, c, e, f, g) {
                d(this, a), this.candidatePairs = b, this.codec = c, this.trackStats = e, this.transportStats = f, 
                this.tracks = g;
            }
            return e(a, [ {
                key: "getCandidatePairs",
                value: function() {
                    return this.candidatePairs;
                }
            }, {
                key: "getCodec",
                value: function() {
                    return this.codec;
                }
            }, {
                key: "getTrackStats",
                value: function() {
                    return this.trackStats;
                }
            }, {
                key: "getTransportStats",
                value: function() {
                    return this.transportStats;
                }
            }, {
                key: "getTracks",
                value: function() {
                    return this.tracks;
                }
            } ]), a;
        }();
        c.StatsTuple = f;
    }, {} ],
    76: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.SWAvg = void 0;
        var g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = a("./swplugin"), i = function(a) {
            function b(a, c) {
                var f = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                d(this, b);
                var g = e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, a, c, f));
                return g.sum = 0, g.counter = 0, g;
            }
            return f(b, a), g(b, [ {
                key: "add",
                value: function(a) {
                    this.filter(a) && (this.sum += this.extract(a), ++this.counter, this.calculate());
                }
            }, {
                key: "remove",
                value: function(a) {
                    this.filter(a) && (this.sum -= this.extract(a), --this.counter, this.calculate());
                }
            }, {
                key: "calculate",
                value: function() {
                    var a = 0;
                    if (this.counter < 1) return void this.notify(a);
                    a = this.sum / this.counter, this.notify(a);
                }
            } ]), b;
        }(h.SWPlugin);
        c.SWAvg = i;
    }, {
        "./swplugin": 79
    } ],
    77: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.SWBTreePercentile = void 0;
        var g = function() {
            function a(a, b) {
                var c = [], d = !0, e = !1, f = void 0;
                try {
                    for (var g, h = a[Symbol.iterator](); !(d = (g = h.next()).done) && (c.push(g.value), 
                    !b || c.length !== b); d = !0) ;
                } catch (a) {
                    e = !0, f = a;
                } finally {
                    try {
                        !d && h.return && h.return();
                    } finally {
                        if (e) throw f;
                    }
                }
                return c;
            }
            return function(b, c) {
                if (Array.isArray(b)) return b;
                if (Symbol.iterator in Object(b)) return a(b, c);
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            };
        }(), h = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), i = a("./swplugin"), j = a("../../collections/binarytree"), k = function(a) {
            function b(a, c, f, g) {
                var h = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, k = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null;
                d(this, b);
                var l = e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, f, g, i));
                if (99 < a || a < 1) throw new RangeError("Percentile parameter must be between 1 and 99");
                return l.comparator = c, l.percentile = a, l.meanCalcer = k, l.estimator = h, l.ratio = a / (100 - a), 
                l.maxtree = new j.BinaryTree(c), l.mintree = new j.BinaryTree(c), l.ratio < 1 ? l.required = 1 / l.ratio + 1 : 1 < l.ratio ? l.required = l.ratio + 1 : l.required = 2, 
                l.result = null, l;
            }
            return f(b, a), h(b, [ {
                key: "add",
                value: function(a) {
                    if (this.filter(a)) {
                        if (this.maxtree.getNodeCounter() < 1) return this.maxtree.insert(a), void this.calculate();
                        this.comparator(a, this.maxtree.getTopValue()) <= 0 ? this.maxtree.insert(a) : this.mintree.insert(a), 
                        this.balancing(), this.calculate();
                    }
                }
            }, {
                key: "remove",
                value: function(a) {
                    if (this.filter(a)) {
                        var b = this.mintree.getNodeCounter();
                        this.maxtree.getNodeCounter() < 1 ? this.mintree.delete(a) : b < 1 ? this.maxtree.delete(a) : this.comparator(a, this.maxtree.getTopValue()) <= 0 ? this.maxtree.delete(a) : this.mintree.delete(a), 
                        this.calculate();
                    }
                }
            }, {
                key: "getThresholds",
                value: function() {
                    var a = this.mintree.getSize(), b = this.maxtree.getSize(), c = a + 1, d = b + 1;
                    return 1 < this.ratio ? (c = Math.ceil(a * this.ratio), d = Math.floor(b / this.ratio) + 1) : this.ratio < 1 && (c = Math.floor(a * this.ratio) + 1, 
                    d = Math.ceil(b / this.ratio)), [ c, d ];
                }
            }, {
                key: "balancing",
                value: function() {
                    var a = this.mintree, b = this.maxtree, c = a.getSize(), d = b.getSize();
                    if (!(d + c < this.required)) {
                        if (c < 1) return void a.insertNodeAtBottom(b.popTopNode());
                        for (d < 1 && b.insertNodeAtTop(a.popBottomNode()); ;) {
                            var e = 1 < a.getNodeCounter(), f = 1 < b.getNodeCounter(), h = a.getBottomNode().getLength(), i = b.getTopNode().getLength();
                            if (a.getNodeCounter() < 1 || b.getNodeCounter() < 1) break;
                            var j = this.getThresholds(), k = g(j, 2), l = k[0], m = k[1];
                            if (f &= c + i <= m, e &= d + h <= l, c = a.getSize(), d = b.getSize(), l < d && f) a.insertNodeAtBottom(b.popTopNode()); else {
                                if (!(m < c && e)) break;
                                b.insertNodeAtTop(a.popBottomNode());
                            }
                        }
                    }
                }
            }, {
                key: "getMean",
                value: function(a, b) {
                    return this.meanCalcer ? this.meanCalcer(a, b) : a;
                }
            }, {
                key: "estimate",
                value: function(a, b) {
                    return this.estimator ? this.estimator(a, b) : null;
                }
            }, {
                key: "calculate",
                value: function() {
                    var a = null, b = this.mintree, c = this.maxtree, d = b.getSize(), e = c.getSize(), f = e + d;
                    if (!(f < 1)) {
                        if (f < this.required || d < 1 || e < 1) {
                            if (0 == f) return;
                            var g = void 0, h = void 0;
                            d < 1 ? (g = this.maxtree.getBottomValue(), h = this.maxtree.getTopValue()) : e < 1 ? (g = this.mintree.getBottomValue(), 
                            h = this.mintree.getTopValue()) : (h = this.mintree.getTopValue(), g = this.maxtree.getBottomValue());
                            var i = this.estimate(g, h);
                            return void this.notify(i);
                        }
                        var j = c.getTopNode(), k = b.getBottomNode();
                        if (j || k) {
                            if (!j) {
                                var l = this.extract(k);
                                return void this.notify(l);
                            }
                            if (!k) {
                                var m = this.extract(j);
                                return void this.notify(m);
                            }
                            var n = f * (this.percentile / 100);
                            if (!Number.isInteger(n)) {
                                var o = e / d;
                                a = this.ratio < o ? j.peek() : o < this.ratio ? k.peek() : this.ratio < 1 ? k.peek() : j.peek();
                            } else {
                                var p = Math.floor(n);
                                a = Math.ceil(n + 1) <= e ? j.peek() : p <= e ? this.getMean(j.peek(), k.peek()) : k.peek();
                            }
                            var q = this.extract(a);
                            this.notify(q);
                        }
                    }
                }
            } ]), b;
        }(i.SWPlugin);
        c.SWBTreePercentile = k;
    }, {
        "../../collections/binarytree": 23,
        "./swplugin": 79
    } ],
    78: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.SWFunctor = void 0;
        var g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = a("./swplugin"), i = function(a) {
            function b(a, c) {
                var f = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                d(this, b);
                var g = e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, null, null, f));
                return g.addFunc = a, g.remFunc = c, g;
            }
            return f(b, a), g(b, [ {
                key: "add",
                value: function(a) {
                    this.filter(a) && this.addFunc && this.addFunc(a);
                }
            }, {
                key: "remove",
                value: function(a) {
                    this.filter(a) && this.remFunc && this.remFunc(a);
                }
            }, {
                key: "toString",
                value: function() {
                    return "SWFuncPlugin";
                }
            } ]), b;
        }(h.SWPlugin);
        c.SWFunctor = i;
    }, {
        "./swplugin": 79
    } ],
    79: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.SWPlugin = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("../../utility/csiologger"), g = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(f), h = function() {
            function a(b, c) {
                var e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                d(this, a), this.extractorFnc = b, this.notifierFnc = c, this.filterFunc = e;
            }
            return e(a, [ {
                key: "notify",
                value: function(a) {
                    if (!this.notifierFnc) return void g.warn("Failed notification for " + this.toString());
                    this.notifierFnc(a);
                }
            }, {
                key: "extract",
                value: function(a) {
                    return this.extractorFnc ? this.extractorFnc(a) : (g.warn(this.toString() + " tried to extract without extractorFnc"), 
                    null);
                }
            }, {
                key: "filter",
                value: function(a) {
                    return !this.filterFunc || this.filterFunc(a);
                }
            }, {
                key: "add",
                value: function(a) {
                    g.log("Abstract method is called width value: " + a);
                }
            }, {
                key: "remove",
                value: function(a) {
                    g.log("Abstract method is called with value: " + a);
                }
            }, {
                key: "toString",
                value: function() {
                    return "SWPlugin";
                }
            } ]), a;
        }();
        c.SWPlugin = h;
    }, {
        "../../utility/csiologger": 88
    } ],
    80: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!a) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !b || "object" != typeof b && "function" != typeof b ? a : b;
        }
        function f(a, b) {
            if ("function" != typeof b && null !== b) throw new TypeError("Super expression must either be null or a function, not " + typeof b);
            a.prototype = Object.create(b && b.prototype, {
                constructor: {
                    value: a,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), b && (Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b);
        }
        function g(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function h(a, b) {
            return b.green <= a ? t.avQualityRatings.excellent : b.red < a ? t.avQualityRatings.fair : t.avQualityRatings.bad;
        }
        function i(a, b) {
            return b.red < a ? t.avQualityRatings.bad : b.green <= a ? t.avQualityRatings.fair : t.avQualityRatings.excellent;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.TrackMonitor = void 0;
        var j = function a(b, c, d) {
            null === b && (b = Function.prototype);
            var e = Object.getOwnPropertyDescriptor(b, c);
            if (void 0 === e) {
                var f = Object.getPrototypeOf(b);
                return null === f ? void 0 : a(f, c, d);
            }
            if ("value" in e) return e.value;
            var g = e.get;
            if (void 0 !== g) return g.call(d);
        }, k = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), l = a("../utility/registry"), m = a("../collections/slidingwindow"), n = a("../statspipeline/swplugins/swavg"), o = a("../statspipeline/swplugins/swbtreepercentile"), p = a("../statspipeline/swplugins/swfunctor"), q = a("../utility/timestamps"), r = d(q), s = a("../config/constants"), t = d(s), u = a("../utility/csiologger"), v = d(u), w = a("../utility/rttregistry"), x = function() {
            function a() {
                g(this, a), this.evaluators = [];
            }
            return k(a, [ {
                key: "addEvaluator",
                value: function(a) {
                    var b = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, c = {
                        processFnc: a,
                        weight: b
                    };
                    this.evaluators.push(c);
                }
            }, {
                key: "getQuality",
                value: function(a) {
                    for (var b = 0, c = [], d = 0, e = 0; e < this.evaluators.length; e++) {
                        var f = this.evaluators[e], g = 0, h = f.processFnc ? f.processFnc(a) : 0;
                        if (h) {
                            if (h === t.avQualityRatings.bad) g = t.qualityRating.bad; else if (h === t.avQualityRatings.fair) g = t.qualityRating.fair; else if (h === t.avQualityRatings.excellent) g = t.qualityRating.excellent; else if (h === t.avQualityRatings.unknown) continue;
                            b += f.weight, c.push({
                                result: g,
                                weight: f.weight
                            });
                        }
                    }
                    for (var i = 0; i < c.length; i++) {
                        var j = c[i];
                        d += j.result * (j.weight / b);
                    }
                    return d = Math.floor(d), d === t.qualityRating.excellent ? t.avQualityRatings.excellent : d === t.qualityRating.good ? t.avQualityRatings.fair : d === t.qualityRating.fair ? t.avQualityRatings.fair : d === t.qualityRating.poor ? t.avQualityRatings.fair : d === t.qualityRating.bad ? t.avQualityRatings.bad : void 0;
                }
            } ]), a;
        }(), y = function(a) {
            function b(a, c, d, f) {
                g(this, b);
                var h = e(this, (b.__proto__ || Object.getPrototypeOf(b)).call(this, a, c));
                return h.thresholds = [], h.enableThresholds = !1, h.requestTime = 0, h.started = 0, 
                h.created = r.getCurrent(), h.mediaType = f, h.streamType = d, h.qualityHelper = new x(), 
                h.metrics = h.makeTrack(), h.lastTrack = {}, h.prevFrameRateMean = null, h.ssrc = null, 
                h.scsHelper = {
                    total: 0,
                    above: 0,
                    ccDriven: 0,
                    sumMaxBitrateDiff: 0,
                    sumThroughputDiff: 0,
                    prevCsioAvgBRKbps: 0
                }, h;
            }
            return f(b, a), k(b, null, [ {
                key: "make",
                value: function(a, c, d, e) {
                    var f = new b(a, c, d, e), g = f.metrics;
                    return f.attach(new n.SWAvg(function(a) {
                        return a.getJitter();
                    }, function(a) {
                        g.csioAvgJitter = a;
                    }, function(a) {
                        var b = a.getJitter();
                        return null !== b && void 0 !== b;
                    })), f.attach(new n.SWAvg(function(a) {
                        return a.getRTT();
                    }, function(a) {
                        g.csioAvgRtt = a;
                    }, function(a) {
                        var b = a.getRTT();
                        return null !== b && void 0 !== b;
                    })), f.attach(new o.SWBTreePercentile(95, function(a, b) {
                        var c = a.getJitter(), d = b.getJitter();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getJitter();
                    }, function(a) {
                        g.csioPercentileJitter = a;
                    }, function(a, b) {
                        return b ? b.getJitter() : a ? a.getJitter() : void 0;
                    }, function(a) {
                        var b = a.getJitter();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    })), f.attach(new o.SWBTreePercentile(95, function(a, b) {
                        var c = a.getRTT(), d = b.getRTT();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getRTT();
                    }, function(a) {
                        g.csioSig2Latency = a, g.csioeM = a + 40;
                    }, function(a, b) {
                        return b ? b.getRTT() : a ? a.getRTT() : void 0;
                    }, function(a) {
                        var b = a.getRTT();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    })), d === t.streamType.inbound ? b.setupInboundMonitor(f) : d === t.streamType.outbound ? b.setupOutboundMonitor(f) : v.warn("Unrecognized streamType (" + d + ") at TrackMonitor"), 
                    e === t.mediaType.audio ? b.setupAudioMonitor(f) : e === t.mediaType.video ? b.setupVideoMonitor(f) : v.warn("Unrecognized mediaType (" + e + ") at TrackMonitor"), 
                    d === t.streamType.inbound && e === t.mediaType.audio ? b.setupInbAudioQualityEvaluator(f) : d === t.streamType.inbound && e === t.mediaType.video ? b.setupInbVideoQualityEvaluator(f) : d === t.streamType.outbound && e === t.mediaType.audio ? b.setupOutbAudioQualityEvaluator(f) : d === t.streamType.outbound && e === t.mediaType.video && (b.setupOutbVideoQualityEvaluator(f), 
                    b.setupSCSValidator(f)), f.addPostProcess(function(a) {
                        g.csioMark = f.getQuality(a);
                    }), f;
                }
            }, {
                key: "setupInbAudioQualityEvaluator",
                value: function(a) {
                    var b = a.metrics;
                    a.addQualityEvaluator(function(a) {
                        return void 0 === b.csioIntBRKbps || null === b.csioIntBRKbps || b.csioIntBRKbps < 0 ? t.avQualityRatings.unknown : h(b.csioIntBRKbps, t.throughputThreshold.audio);
                    }), a.addQualityEvaluator(function(a) {
                        return void 0 === b.csioIntFL || null === b.csioIntFL || b.csioIntFL < 0 ? t.avQualityRatings.unknown : i(b.csioIntFL, t.fractionalLossThreshold.audio);
                    }), a.addQualityEvaluator(function(a) {
                        return void 0 === b.csioeM || null === b.csioeM ? t.avQualityRatings.unknown : i(b.csioeM, t.eModelThreshold.audio);
                    });
                }
            }, {
                key: "setupOutbAudioQualityEvaluator",
                value: function(a) {
                    var b = a.metrics;
                    a.addQualityEvaluator(function(a) {
                        return void 0 === b.csioIntBRKbps || null === b.csioIntBRKbps || b.csioIntBRKbps < 0 ? t.avQualityRatings.unknown : h(b.csioIntBRKbps, t.throughputThreshold.audio);
                    }), a.addQualityEvaluator(function(a) {
                        return void 0 === b.csioeM || null === b.csioeM ? t.avQualityRatings.unknown : i(b.csioeM, t.eModelThreshold.audio);
                    });
                }
            }, {
                key: "setupInbVideoQualityEvaluator",
                value: function(a) {
                    var b = a.metrics;
                    a.addQualityEvaluator(function(a) {
                        return void 0 === b.csioIntBRKbps || null === b.csioIntBRKbps || b.csioIntBRKbps < 0 ? t.avQualityRatings.unknown : h(b.csioIntBRKbps, t.throughputThreshold.video);
                    }), a.addQualityEvaluator(function(c) {
                        return void 0 === b.csioFrameRateMean || null === b.csioFrameRateMean ? t.avQualityRatings.unknown : b.csioFrameRateMean && a.prevFrameRateMean ? h(b.csioFrameRateMean / a.prevFrameRateMean, t.currOverPrevFrameRateThreshold.video) : t.avQualityRatings.bad;
                    }), a.addQualityEvaluator(function(a) {
                        return void 0 === b.csioSig2Latency || null === b.csioSig2Latency ? t.avQualityRatings.unknown : i(b.csioSig2Latency, t.rttThreshold.video);
                    });
                }
            }, {
                key: "setupOutbVideoQualityEvaluator",
                value: function(a) {
                    var b = a.metrics;
                    a.addQualityEvaluator(function(a) {
                        return void 0 == b.csioIntBRKbps || null == b.csioIntBRKbps ? t.avQualityRatings.unknown : h(b.csioIntBRKbps, t.throughputThreshold.video);
                    }), a.addQualityEvaluator(function(c) {
                        return void 0 === b.csioFrameRateMean || null === b.csioFrameRateMean ? t.avQualityRatings.unknown : b.csioFrameRateMean && a.prevFrameRateMean ? h(b.csioFrameRateMean / a.prevFrameRateMean, t.currOverPrevFrameRateThreshold.video) : t.avQualityRatings.bad;
                    }), a.addQualityEvaluator(function(a) {
                        return void 0 === b.csioSig2Latency || null === b.csioSig2Latency ? t.avQualityRatings.unknown : i(b.csioSig2Latency, t.rttThreshold.video);
                    });
                }
            }, {
                key: "setupInboundMonitor",
                value: function(a) {
                    var b = a.metrics;
                    a.addPreProcess(function(c) {
                        var d = c.getLostPackets(), e = c.getReceivedPackets(), f = a.getRequestedMeasurement(), g = 0, h = 0;
                        f ? (g = d - f.getLostPackets(), h = e - f.getReceivedPackets()) : (g = d, h = e);
                        var i = 0;
                        if ((0 < g || 0 < h) && (i = g / (h + g)), b.csioIntPktLoss = g, b.csioIntFL = i, 
                        c.setFractionLost(i), !c.getFrameRateReceived() && c.getFramesReceived() && 0 < a.started) {
                            var j = c.getFramesReceived(), k = r.getCurrent() - a.started;
                            b.csioEstFrameRatePerSecond = 1e3 * j / k;
                            var l = c.getSSRC(), m = (0, w.getRTTRegistry)().getFrameRate(l);
                            m && (b.legacyFrameRatePerSecond = m);
                        }
                    }), a.attach(new p.SWFunctor(function(c) {
                        var d = r.getCurrent(), e = c.getResolution(), f = a.getRequestedMeasurement(), g = a.getRequestTime(), h = c.getLostPackets(), i = 8 * c.getReceivedBytes(), j = c.getReceivedPackets(), k = d - a.getStartTime(), m = 0, n = 0, o = 0, p = 0, q = 1e3, s = Math.max(d - a.getStartTime(), q);
                        f ? (p = j - f.getReceivedPackets(), m = i - 8 * f.getReceivedBytes(), n = h - f.getLostPackets(), 
                        o = Math.max(d - g, q)) : (q = (l.Registry.getCredentials().getAdaptiveInterval(), 
                        l.Registry.getCredentials().getStatsSubmissionInterval()), s = Math.max(d - a.getStartTime(), q), 
                        p = j, m = i, n = h, o = Math.max(s, q)), b.csioIntPktRcv = p, b.csioIntPR = p / (o / 1e3), 
                        b.csioAvgBRKbps = i / s, b.csioIntBRKbps = m / o, b.csioAvgPacketSize = c.getReceivedBytes() / j, 
                        b.csioIntMs = k, b.csioTimeElapseMs = o, b.csiores = e, b.csioPktLostPercentage = n / m * 100;
                    }, null, null)), a.attach(new o.SWBTreePercentile(95, function(a, b) {
                        var c = a.getFractionLost(), d = b.getFractionLost();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getFractionLost();
                    }, function(a) {
                        b.csioPercentileFl = a;
                    }, function(a, b) {
                        return b ? b.getFractionLost() : a ? a.getFractionLost() : void 0;
                    }, function(a) {
                        var b = a.getFractionLost();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    }));
                }
            }, {
                key: "setupOutboundMonitor",
                value: function(a) {
                    var b = a.metrics;
                    a.addPreProcess(function(c) {
                        var d = c.getLostPackets(), e = c.getSentPackets(), f = a.getRequestedMeasurement(), g = 0, h = 0;
                        f ? (g = d - f.getLostPackets(), h = e - f.getSentPackets()) : (g = d, h = e);
                        var i = 0;
                        (0 < g || 0 < h) && (i = g / (h + g)), b.csioIntPktLoss = g, b.csioIntFL = i, c.setFractionLost(i);
                    }), a.attach(new p.SWFunctor(function(c) {
                        var d = r.getCurrent(), e = c.getResolution(), f = a.getRequestedMeasurement(), g = a.getRequestTime(), h = c.getLostPackets(), i = 8 * c.getSentBytes(), j = c.getSentPackets(), k = d - a.getStartTime(), m = 0, n = 0, o = 0, p = 0, q = 1e3, s = Math.max(d - a.getStartTime(), q);
                        f ? (p = j - f.getSentPackets(), m = i - 8 * f.getSentBytes(), n = h - f.getLostPackets(), 
                        o = Math.max(d - g, q)) : (q = (l.Registry.getCredentials().getAdaptiveInterval(), 
                        l.Registry.getCredentials().getStatsSubmissionInterval()), s = Math.max(d - a.getStartTime(), q), 
                        p = j, m = i, n = h, o = Math.max(s, q)), b.csioIntPktRcv = p, b.csioAvgBRKbps = i / s, 
                        b.csioIntBRKbps = m / o, b.csioIntPR = p / (o / 1e3), b.csioAvgPacketSize = c.getSentBytes() / j, 
                        b.csioIntMs = k, b.csioTimeElapseMs = o, b.csiores = e, b.csioPktLostPercentage = n / m * 100;
                    }, null, null)), a.attach(new o.SWBTreePercentile(95, function(a, b) {
                        var c = a.getFractionLost(), d = b.getFractionLost();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getFractionLost();
                    }, function(a) {
                        b.csioPercentileFl = a;
                    }, function(a, b) {
                        return b ? b.getFractionLost() : a ? a.getFractionLost() : void 0;
                    }, function(a) {
                        var b = a.getFractionLost();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    }));
                }
            }, {
                key: "setupAudioMonitor",
                value: function(a) {
                    var b = a.metrics;
                    a.attach(new p.SWFunctor(function(a) {
                        b.csioMediaType = t.mediaType.audio;
                    }, null, null));
                }
            }, {
                key: "setupVideoMonitor",
                value: function(a) {
                    var b = a.metrics;
                    a.attach(new n.SWAvg(function(a) {
                        return a.getFrameRateReceived();
                    }, function(c) {
                        a.prevFrameRateMean = b.csioFrameRateMean, b.csioFrameRateMean = c;
                    }, function(a) {
                        var b = a.getFrameRateReceived();
                        return null !== b && void 0 !== b;
                    })), a.attach(new n.SWAvg(function(a) {
                        return a.getFrameHeight();
                    }, function(a) {
                        b.csioFrameHeightMean = a;
                    }, function(a) {
                        var b = a.getFrameHeight();
                        return null !== b && void 0 !== b;
                    })), a.attach(new n.SWAvg(function(a) {
                        return a.getFrameWidth();
                    }, function(a) {
                        b.csioFrameWidthMean = a;
                    }, function(a) {
                        var b = a.getFrameWidth();
                        return null !== b && void 0 !== b;
                    })), a.attach(new o.SWBTreePercentile(95, function(a, b) {
                        var c = a.getFrameRateReceived(), d = b.getFrameRateReceived();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getFrameRateReceived();
                    }, function(a) {
                        b.csioFrameRate95Percentile = a;
                    }, function(a, b) {
                        return b ? b.getFrameRateReceived() : a ? a.getFrameRateReceived() : void 0;
                    }, function(a) {
                        var b = a.getFrameRateReceived();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    })), a.attach(new o.SWBTreePercentile(50, function(a, b) {
                        var c = a.getFrameRateReceived(), d = b.getFrameRateReceived();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getFrameRateReceived();
                    }, function(a) {
                        b.csioFrameRate50Percentile = a;
                    }, function(a, b) {
                        return b ? b.getFrameRateReceived() : a ? a.getFrameRateReceived() : void 0;
                    }, function(a) {
                        var b = a.getFrameRateReceived();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    })), a.attach(new o.SWBTreePercentile(95, function(a, b) {
                        var c = a.getFrameHeight(), d = b.getFrameHeight();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getFrameHeight();
                    }, function(a) {
                        b.csioFrameHeight95Percentile = a;
                    }, function(a, b) {
                        return b ? b.getFrameHeight() : a ? a.getFrameHeight() : void 0;
                    }, function(a) {
                        var b = a.getFrameHeight();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    })), a.attach(new o.SWBTreePercentile(50, function(a, b) {
                        var c = a.getFrameHeight(), d = b.getFrameHeight();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getFrameHeight();
                    }, function(a) {
                        b.csioFrameHeight50Percentile = a;
                    }, function(a, b) {
                        return b ? b.getFrameHeight() : a ? a.getFrameHeight() : void 0;
                    }, function(a) {
                        var b = a.getFrameHeight();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    })), a.attach(new o.SWBTreePercentile(95, function(a, b) {
                        var c = a.getFrameWidth(), d = b.getFrameWidth();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getFrameWidth();
                    }, function(a) {
                        b.csioFrameWidth95Percentile = a;
                    }, function(a, b) {
                        return b ? b.getFrameWidth() : a ? a.getFrameWidth() : void 0;
                    }, function(a) {
                        var b = a.getFrameWidth();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    })), a.attach(new o.SWBTreePercentile(50, function(a, b) {
                        var c = a.getFrameWidth(), d = b.getFrameWidth();
                        return c == d ? 0 : c < d ? -1 : 1;
                    }, function(a) {
                        return a.getFrameWidth();
                    }, function(a) {
                        b.csioFrameWidth50Percentile = a;
                    }, function(a, b) {
                        return b ? b.getFrameWidth() : a ? a.getFrameWidth() : void 0;
                    }, function(a) {
                        var b = a.getFrameWidth();
                        return null !== b && void 0 !== b;
                    }, function(a, b) {
                        return a;
                    })), a.attach(new p.SWFunctor(function(a) {
                        b.csioMediaType = t.mediaType.video;
                    }, null, null));
                }
            }, {
                key: "setupSCSValidator",
                value: function(a) {
                    var b = a.metrics;
                    a.attach(new p.SWFunctor(function(c) {
                        var d = l.Registry.getConfigServiceWrapper().getSenderConfig();
                        if (!d || !d.rtc_rtp_parameters || !d.rtc_rtp_parameters.encodings) return b.csioSCSValidationSampleCount = null, 
                        b.csioAvgMaxBitrateDiff = null, b.csioAvgDeltaThroughput = null, b.csioMaxBitrateAboveRatio = null, 
                        void (b.csioCCDrivenRatio = null);
                        var e = 0;
                        d.rtc_rtp_parameters.encodings.forEach(function(a) {
                            a && (e = Math.max(e, a.maxBitrate));
                        });
                        var f = 0, g = l.Registry.getConfigServiceWrapper().getDefaultSenderConfig();
                        if (g && g.encodings) {
                            g.encodings.forEach(function(a) {
                                f = Math.max(f, a.maxBitrate);
                            });
                            var h = 0, i = 0, j = null, k = null, m = a.getSCSHelper();
                            0 < f && .9 * f < 1e3 * b.csioAvgBRKbps ? (h = e - f, k = !1) : (h = e - 1e3 * b.csioAvgBRKbps, 
                            k = !0), j = 0 < h, i = b.csioAvgBRKbps - b.prevCsioAvgBRKbps, m.prevCsioAvgBRKbps = b.csioAvgBRKbps, 
                            b.csioSCSValidationSampleCount = ++m.total, m.sumMaxBitrateDiff += h, b.csioAvgMaxBitrateDiff = m.sumMaxBitrateDiff / m.total, 
                            m.sumThroughputDiff += i, b.csioAvgDeltaThroughput = m.sumThroughputDiff / m.total, 
                            j && (m.above += 1), b.csioMaxBitrateAboveRatio = m.above / m.total, k && (m.ccDriven += 1), 
                            b.csioCCDrivenRatio = m.ccDriven / m.total;
                        }
                    }, null, null));
                }
            } ]), k(b, [ {
                key: "makeTrack",
                value: function() {
                    var a = {};
                    return a.csioMediaType = void 0, a.csioMark = void 0, a.csioIntBRKbps = void 0, 
                    a.csioAvgBRKbps = void 0, a.csioIntFL = void 0, a.csioIntMs = void 0, a.csioIntPR = void 0, 
                    a.csioPercentileFl = void 0, a.csioAvgJitter = void 0, a.csioAvgRtt = void 0, a.csioPercentileJitter = void 0, 
                    a.csioSig2Latency = void 0, a.csioTimeElapseMs = void 0, a.csioeM = void 0, a.csiores = void 0, 
                    a.csioFrameWidth95Percentile = void 0, a.csioFrameWidth50Percentile = void 0, a.csioFrameHeight95Percentile = void 0, 
                    a.csioFrameHeight50Percentile = void 0, a.csioFrameRate95Percentile = void 0, a.csioFrameRate50Percentile = void 0, 
                    a.csioFrameWidthMean = void 0, a.csioFrameHeightMean = void 0, a.csioFrameRateMean = void 0, 
                    a.csioIntPktRcv = void 0, a.csioSCSValidationSampleCount = null, a.csioAvgMaxBitrateDiff = null, 
                    a.csioAvgDeltaThroughput = null, a.csioMaxBitrateAboveRatio = null, a.csioCCDrivenRatio = null, 
                    a;
                }
            }, {
                key: "getSSRC",
                value: function() {
                    return this.ssrc;
                }
            }, {
                key: "add",
                value: function(a) {
                    this.ssrc = a.getSSRC(), this.lastTrack = a.extractTrack(), this.lastTrack.pcHash = a.getPcHash(), 
                    0 === this.started && (this.started = r.getCurrent()), j(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "add", this).call(this, a);
                }
            }, {
                key: "hasTraffic",
                value: function() {
                    return 0 < this.metrics.csioIntBRKbps;
                }
            }, {
                key: "getTrack",
                value: function() {
                    var a = this.lastTrack;
                    return Object.assign(a.data, this.metrics), a;
                }
            }, {
                key: "extractTrack",
                value: function() {
                    var a = this.lastTrack;
                    return Object.assign(a.data, this.metrics), this.requestTime = r.getCurrent(), this.requestedMeasurement = this.peek(), 
                    a;
                }
            }, {
                key: "getMediaType",
                value: function() {
                    return this.mediaType;
                }
            }, {
                key: "getStreamType",
                value: function() {
                    return this.streamType;
                }
            }, {
                key: "getStartTime",
                value: function() {
                    return this.started;
                }
            }, {
                key: "getCreationTime",
                value: function() {
                    return this.created;
                }
            }, {
                key: "getRequestTime",
                value: function() {
                    return Math.max(this.started, this.requestTime);
                }
            }, {
                key: "getRequestedMeasurement",
                value: function() {
                    return this.requestedMeasurement;
                }
            }, {
                key: "getSCSHelper",
                value: function() {
                    return this.scsHelper;
                }
            }, {
                key: "addQualityEvaluator",
                value: function(a) {
                    var b = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
                    this.qualityHelper.addEvaluator(a, b);
                }
            }, {
                key: "getQuality",
                value: function(a) {
                    return this.qualityHelper.getQuality(a);
                }
            }, {
                key: "addPreProcess",
                value: function(a) {
                    j(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "addPreProcess", this).call(this, a);
                }
            }, {
                key: "addPostProcess",
                value: function(a) {
                    j(b.prototype.__proto__ || Object.getPrototypeOf(b.prototype), "addPostProcess", this).call(this, a);
                }
            } ]), b;
        }(m.SlidingWindow);
        c.TrackMonitor = y;
    }, {
        "../collections/slidingwindow": 28,
        "../config/constants": 33,
        "../statspipeline/swplugins/swavg": 76,
        "../statspipeline/swplugins/swbtreepercentile": 77,
        "../statspipeline/swplugins/swfunctor": 78,
        "../utility/csiologger": 88,
        "../utility/registry": 95,
        "../utility/rttregistry": 96,
        "../utility/timestamps": 99
    } ],
    81: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.TracksMonitor = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./trackmonitor"), g = a("../config/constants"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = function() {
            function a() {
                d(this, a), this.inbMonitors = new Map(), this.outbMonitors = new Map();
            }
            return e(a, [ {
                key: "getMonitor",
                value: function(a) {
                    var b = a.getStreamType(), c = a.getMediaType(), d = a.getSSRC(), e = null;
                    return b === h.streamType.inbound ? c === h.mediaType.audio ? e = this.getInbAudioMonitor(d) : c === h.mediaType.video && (e = this.getInbVideoMonitor(d)) : b === h.streamType.outbound && (c === h.mediaType.audio ? e = this.getOutbAudioMonitor(d) : c === h.mediaType.video && (e = this.getOutbVideoMonitor(d))), 
                    e;
                }
            }, {
                key: "extractTracks",
                value: function() {
                    var a = [];
                    return this.outbMonitors.forEach(function(b, c) {
                        a.push(b.extractTrack());
                    }), this.inbMonitors.forEach(function(b, c) {
                        a.push(b.extractTrack());
                    }), a;
                }
            }, {
                key: "getTracks",
                value: function() {
                    var a = [];
                    return this.outbMonitors.forEach(function(b, c) {
                        a.push(b.getTrack());
                    }), this.inbMonitors.forEach(function(b, c) {
                        a.push(b.getTrack());
                    }), a;
                }
            }, {
                key: "getMonitors",
                value: function() {
                    var a = [];
                    return this.outbMonitors.forEach(function(b, c) {
                        a.push(b);
                    }), this.inbMonitors.forEach(function(b, c) {
                        a.push(b);
                    }), a;
                }
            }, {
                key: "getInbAudioMonitor",
                value: function(a) {
                    var b = this.inbMonitors.get(a);
                    return b || (b = f.TrackMonitor.make(1e3, 3e4, h.streamType.inbound, h.mediaType.audio), 
                    this.inbMonitors.set(a, b)), b;
                }
            }, {
                key: "getInbVideoMonitor",
                value: function(a) {
                    var b = this.inbMonitors.get(a);
                    return b || (b = f.TrackMonitor.make(1e3, 3e4, h.streamType.inbound, h.mediaType.video), 
                    this.inbMonitors.set(a, b)), b;
                }
            }, {
                key: "getOutbAudioMonitor",
                value: function(a) {
                    var b = this.outbMonitors.get(a);
                    return b || (b = f.TrackMonitor.make(1e3, 3e4, h.streamType.outbound, h.mediaType.audio), 
                    this.outbMonitors.set(a, b)), b;
                }
            }, {
                key: "getOutbVideoMonitor",
                value: function(a) {
                    var b = this.outbMonitors.get(a);
                    return b || (b = f.TrackMonitor.make(1e3, 3e4, h.streamType.outbound, h.mediaType.video), 
                    this.outbMonitors.set(a, b)), b;
                }
            } ]), a;
        }();
        c.TracksMonitor = i;
    }, {
        "../config/constants": 33,
        "./trackmonitor": 80
    } ],
    82: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.TransportsMonitor = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../config/constants"), h = d(g), i = a("../utility/timestamps"), j = d(i), k = a("../utility/rttregistry"), l = function() {
            function a(b) {
                e(this, a), this.previous = b, this.actual = b, this.outdated = j.getCurrent();
            }
            return f(a, [ {
                key: "setActual",
                value: function(a) {
                    this.actual = a;
                }
            }, {
                key: "outdate",
                value: function() {
                    this.previous = this.actual, this.outdated = j.getCurrent();
                }
            }, {
                key: "getActual",
                value: function() {
                    return this.actual;
                }
            }, {
                key: "getPrevious",
                value: function() {
                    return this.previous;
                }
            }, {
                key: "getElapsedTime",
                value: function() {
                    return j.getCurrent() - this.outdated;
                }
            } ]), a;
        }(), m = function() {
            function a(b) {
                e(this, a), this.stats = new Map(), this.codeBase = b;
            }
            return f(a, [ {
                key: "set",
                value: function(a, b) {
                    var c = this.stats.get(a);
                    if (!c) return void this.stats.set(a, new l(b));
                    c.setActual(b);
                }
            }, {
                key: "getIntervalStats",
                value: function() {
                    var a = this, b = new Map();
                    return this.stats.forEach(function(c, d) {
                        b.set(d, a.getIntervalStat(c)), c.outdate();
                    }), b;
                }
            }, {
                key: "getIntervalStat",
                value: function(a) {
                    var b = null;
                    switch (this.codeBase) {
                      case h.codeBaseType.chrome:
                        b = this.getIntervalStatForChrome(a);
                        break;

                      default:
                        b = a.getActual();
                    }
                    return b;
                }
            }, {
                key: "getIntervalStatForChrome",
                value: function(a) {
                    var b = a.getActual(), c = a.getPrevious(), d = a.getElapsedTime();
                    if (!c) return actual;
                    for (var e = 0; e < b.length; ++e) {
                        var f = b[e], g = c[e];
                        if (!g || !f) return b;
                        var i = parseInt(g.bytesReceived, 10), j = parseInt(g.bytesSent, 10);
                        f.csioReceivedBwKbps = 8 * (parseInt(f.bytesReceived, 10) - i) / d, f.csioSentBwKbps = 8 * (parseInt(f.bytesSent, 10) - j) / d, 
                        f.csioIntBytesReceived = parseInt(f.bytesReceived, 10) - i, f.csioIntBytesSent = parseInt(f.bytesSent, 10) - j, 
                        void 0 !== g.packetsSent && void 0 !== f.packetsSent && (f.csioSentPacketRate = (parseInt(f.packetsSent, 10) - parseInt(g.packetsSent, 10)) / (d / 1e3), 
                        f.csioIntPacketsSent = parseInt(f.packetsSent, 10) - parseInt(g.packetsSent, 10)), 
                        void 0 !== g.packetsReceived && void 0 !== f.packetsReceived && (f.csioReceivedPacketRate = (parseInt(f.packetsReceived, 10) - parseInt(g.packetsReceived, 10)) / (d / 1e3), 
                        f.csioIntPacketsReceived = parseInt(f.packetsReceived, 10) - parseInt(g.packetsReceived, 10)), 
                        this.codeBase == h.codeBaseType.chrome && (f.currentRoundTripTime = (0, k.getRTTRegistry)().getTransportRTT());
                    }
                    return b;
                }
            } ]), a;
        }();
        c.TransportsMonitor = m;
    }, {
        "../config/constants": 33,
        "../utility/rttregistry": 96,
        "../utility/timestamps": 99
    } ],
    83: [ function(a, b, c) {
        "use strict";
        function d(a) {
            return isNaN(a) ? null : a;
        }
        function e(a) {
            return null !== d(a) && 0 < a ? a : null;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.checkForNan = d, c.checkForNegativeValue = e;
    }, {} ],
    84: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a() {
                d(this, a), this.getWifiStatsMethod = null, this.wifiStats = null, this.interval = 1e4;
            }
            return e(a, [ {
                key: "setGetWifiStatsMethod",
                value: function(a) {
                    this.getWifiStatsMethod = a, this.wifiStatsHandler();
                }
            }, {
                key: "getWifiStats",
                value: function() {
                    return this.wifiStats;
                }
            }, {
                key: "wifiStatsHandler",
                value: function() {
                    var a = this;
                    a.getWifiStatsMethod && a.getWifiStatsMethod().then(function(b) {
                        a.wifiStats = JSON.parse(b), setTimeout(function() {
                            a.wifiStatsHandler();
                        }, a.interval);
                    }).catch(function() {
                        setTimeout(function() {
                            a.wifiStatsHandler();
                        }, a.interval);
                    });
                }
            } ]), a;
        }();
        c.WifiStatsExecutor = f;
    }, {} ],
    85: [ function(a, b, c) {
        "use strict";
        function d(a) {
            return window.btoa(a);
        }
        function e(a) {
            return window.atob(a);
        }
        function f(a) {
            return d(encodeURIComponent(a).replace(/%([0-9A-F]{2})/g, function(a, b) {
                return String.fromCharCode("0x" + b);
            }));
        }
        function g(a) {
            return d(a).replace(/\+/g, "-").replace(/\//g, "_").replace(/\=+$/, "");
        }
        function h(a) {
            return f(a).replace(/\+/g, "-").replace(/\//g, "_").replace(/\=+$/, "");
        }
        function i(a) {
            for (var b = e(a.replace(/[ \r\n]+$/, "")), c = [], d = 0; d < b.length; ++d) {
                var f = b.charCodeAt(d).toString(16);
                1 === f.length && (f = "0" + f), c.push(f);
            }
            return c.join("");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.encode = d, c.decode = e, c.urlencode = g, c.urlencodeUnicode = h, c.strtohex = i;
    }, {} ],
    86: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Callbacks = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../config/constants"), h = d(g), i = a("./registry"), j = a("./csiologger"), k = d(j), l = function() {
            function a() {
                e(this, a), this.callbacks = {};
            }
            return f(a, [ {
                key: "set",
                value: function(a, b) {
                    if ("function" == typeof b) return h.callbackFunctions.hasOwnProperty(a) ? (this.callbacks[a] = b, 
                    void (a === h.callbackFunctions.stats && i.Registry.getStatsCallbackBuilder().setCallback(b))) : void k.error("Couldn't set callback: " + a);
                }
            }, {
                key: "get",
                value: function(a) {
                    return this.callbacks.hasOwnProperty(a) ? this.callbacks[a] : null;
                }
            } ]), a;
        }();
        c.Callbacks = l;
    }, {
        "../config/constants": 33,
        "./csiologger": 88,
        "./registry": 95
    } ],
    87: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Credentials = void 0;
        var f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
            return typeof a;
        } : function(a) {
            return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
        }, g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = a("../config/constants"), i = d(h), j = a("./csiologger"), k = d(j), l = function() {
            function a() {
                e(this, a), this.appId = null, this.userId = null, this.userIdObject = null, this.deviceId = null, 
                this.statsSubmissionInterval = 15e3, this.collectSDP = !1, this.transportType = i.transportType.rest, 
                this.adaptiveInterval = !1;
            }
            return g(a, [ {
                key: "getAppId",
                value: function() {
                    return this.appId;
                }
            }, {
                key: "setAppId",
                value: function(a) {
                    this.appId = "string" == typeof a ? parseInt(a, 10) : a;
                }
            }, {
                key: "getUserId",
                value: function() {
                    return this.userId;
                }
            }, {
                key: "setUserId",
                value: function(a) {
                    "object" === (void 0 === a ? "undefined" : f(a)) ? (this.userId = a.aliasName, this.setUserIdObject(a)) : this.userId = a;
                }
            }, {
                key: "getUserIdObject",
                value: function() {
                    return this.userIdObject;
                }
            }, {
                key: "setUserIdObject",
                value: function(a) {
                    this.userIdObject = a;
                }
            }, {
                key: "getStatsSubmissionInterval",
                value: function() {
                    return this.statsSubmissionInterval;
                }
            }, {
                key: "setStatsSubmissionInterval",
                value: function(a) {
                    k.log("setStatsSubmissionInterval is ", a), this.statsSubmissionInterval = a;
                }
            }, {
                key: "getCollectSDP",
                value: function() {
                    return this.collectSDP;
                }
            }, {
                key: "setCollectSDP",
                value: function(a) {
                    this.collectSDP = a;
                }
            }, {
                key: "getTransportType",
                value: function() {
                    return this.transportType;
                }
            }, {
                key: "setTransportType",
                value: function(a) {
                    this.transportType = a;
                }
            }, {
                key: "getAdaptiveInterval",
                value: function() {
                    return this.adaptiveInterval;
                }
            }, {
                key: "setAdaptiveInterval",
                value: function(a) {
                    this.adaptiveInterval = a;
                }
            } ]), a;
        }();
        c.Credentials = l;
    }, {
        "../config/constants": 33,
        "./csiologger": 88
    } ],
    88: [ function(a, b, c) {
        "use strict";
        function d() {
            if ("true" === i.csioDebug) {
                var a;
                (a = console).info.apply(a, arguments);
            }
        }
        function e() {
            if ("true" === i.csioDebug) {
                var a;
                (a = console).log.apply(a, arguments);
            }
        }
        function f() {
            if ("true" === i.csioDebug) {
                var a;
                (a = console).warn.apply(a, arguments);
            }
        }
        function g() {
            var a;
            (a = console).warn.apply(a, arguments);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.info = d, c.log = e, c.warn = f, c.error = g;
        var h = a("../config/settings"), i = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(h);
    }, {
        "../config/settings": 34
    } ],
    89: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Endpoint = void 0;
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = a("../browserapi/localstorage"), h = d(g), i = a("../browserapi/detectbrowser"), j = d(i), k = a("../utility/timestamps"), l = d(k), m = a("../utility/hash"), n = d(m), o = function() {
            function a() {
                e(this, a), this.id = null, this.appversion = null, this.magicKey = Math.floor(4294967296 * Math.random()), 
                this.browserName = null, this.browserVersion = null, this.osName = null, this.osVersion = null, 
                this.codeBase = null, this.userAgent = null, this.retrieveId();
            }
            return f(a, [ {
                key: "setup",
                value: function() {
                    var a = j.detect();
                    this.browserName = a.browserName, this.browserVersion = a.browserVersion, this.osName = a.os, 
                    this.osVersion = a.osVersion, this.codeBase = a.codeBase, this.userAgent = a.userAgent;
                }
            }, {
                key: "retrieveId",
                value: function() {
                    var a = this, b = h.get("endpointID");
                    if (null === b) {
                        var c = l.getCurrent(), d = Math.random() * c;
                        n.generateSHA256(d.toString(), function(b) {
                            a.id = b, h.store("endpointID", b);
                        });
                    } else this.id = b;
                }
            }, {
                key: "getId",
                value: function() {
                    return this.id;
                }
            }, {
                key: "getAppVersion",
                value: function() {
                    return this.appversion;
                }
            }, {
                key: "setAppVersion",
                value: function(a) {
                    this.appversion = a;
                }
            }, {
                key: "getMagicKey",
                value: function() {
                    return this.magicKey;
                }
            }, {
                key: "getBrowserName",
                value: function() {
                    return this.browserName;
                }
            }, {
                key: "getBrowserVersion",
                value: function() {
                    return this.browserVersion;
                }
            }, {
                key: "getOsName",
                value: function() {
                    return this.osName;
                }
            }, {
                key: "getOsVersion",
                value: function() {
                    return this.osVersion;
                }
            }, {
                key: "getCodeBase",
                value: function() {
                    return this.codeBase;
                }
            }, {
                key: "getUserAgent",
                value: function() {
                    return this.userAgent;
                }
            }, {
                key: "serialize",
                value: function() {
                    return {
                        type: "browser",
                        buildName: this.browserName,
                        buildVersion: this.browserVersion,
                        appVersion: this.appversion,
                        os: this.osName,
                        osVersion: this.osVersion,
                        userAgent: this.userAgent
                    };
                }
            } ]), a;
        }();
        c.Endpoint = o;
    }, {
        "../browserapi/detectbrowser": 18,
        "../browserapi/localstorage": 20,
        "../utility/hash": 92,
        "../utility/timestamps": 99
    } ],
    90: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.EventMessage = void 0;
        var f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
            return typeof a;
        } : function(a) {
            return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
        }, g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = a("../config/constants"), i = d(h), j = a("../config/settings"), k = d(j), l = a("./registry"), m = a("./csiologger"), n = d(m), o = function() {
            function a(b, c, d, f) {
                e(this, a), this.eventType = b, this.customEntries = d, this.pcHandler = f, this.auth = l.Registry.getAuthenticator(), 
                this.clocksync = l.Registry.getClockSync(), this.timestamp = this.clocksync.getSynchronizedTimestamp(), 
                this.conferenceId = c, this.clockUnSynced = !this.clocksync.isCompleted();
            }
            return g(a, [ {
                key: "updateConferenceId",
                value: function(a) {
                    n.log("updating conferenceId to ", this.eventType, this.conferenceId, a), this.conferenceId = a;
                }
            }, {
                key: "toJson",
                value: function() {
                    if (!this.canBeSent()) return null;
                    var a = this.getCommonHeader();
                    return Object.assign(a, this.customEntries), this.eventType === i.internalFabricEvent.userJoined && delete a.connectionID, 
                    a;
                }
            }, {
                key: "getCallback",
                value: function() {
                    return this.pcHandler ? this.pcHandler.getCallback() : null;
                }
            }, {
                key: "canBeSent",
                value: function() {
                    var a = void 0, b = i.tmpConferenceId;
                    if (this.conferenceId === b) return !1;
                    if (this.pcHandler && !this.pcHandler.getRemoteId()) return !1;
                    if (this.eventType !== i.precalltestEvents.results) {
                        var c = l.Registry.getConferenceManager().get(this.conferenceId);
                        if (!c) return !1;
                        a = c.getUcId();
                    }
                    return !!this.auth.getToken() && (this.auth.isTokenValid() ? !!(this.isPriority() || this.clocksync.isCompleted() && a) && !(this.eventType === i.internalFabricEvent.userAlive && !a) : (this.auth.reAuthenticate(), 
                    !1));
                }
            }, {
                key: "isCachable",
                value: function() {
                    return -1 === [ i.internalFabricEvent.userAlive ].indexOf(this.eventType);
                }
            }, {
                key: "isPriority",
                value: function() {
                    var a = !1;
                    return this.eventType !== i.internalFabricEvent.userJoined && this.eventType !== i.precalltestEvents.results && this.eventType !== i.internalFabricEvent.userAlive || (a = !0), 
                    a;
                }
            }, {
                key: "getConferenceId",
                value: function() {
                    return this.conferenceId;
                }
            }, {
                key: "getCommonHeader",
                value: function() {
                    var a = {
                        version: k.version,
                        callstatsVersion: k.version,
                        channel: this.decideChannel(),
                        timestamp: this.timestamp,
                        action: this.eventType,
                        eventType: this.eventType,
                        localID: encodeURIComponent(l.Registry.getCredentials().getUserId()),
                        timeShift: 0,
                        appID: l.Registry.getCredentials().getAppId(),
                        deviceID: l.Registry.getEndpoint().getId(),
                        token: this.auth.getToken(),
                        confID: encodeURIComponent(this.conferenceId)
                    };
                    this.clockUnSynced && (a.timestamp += this.clocksync.getOffset());
                    var b = l.Registry.getConferenceManager().get(this.conferenceId);
                    return a.ucID = b ? b.getUcId() : null, this.pcHandler ? (a.remoteID = encodeURIComponent(this.pcHandler.getRemoteId()), 
                    a.connectionID = this.pcHandler.getPcHash()) : (a.remoteID = encodeURIComponent(l.Registry.getCredentials().getUserId()), 
                    a.connectionID = encodeURIComponent(l.Registry.getCredentials().getUserId())), a.remoteID || (a.remoteID = encodeURIComponent(l.Registry.getCredentials().getUserId())), 
                    a;
                }
            }, {
                key: "decideChannel",
                value: function() {
                    if (this.eventType == i.callstatsChannels.sdpSubmission) return i.callstatsChannels.sdpSubmission;
                    if (this.eventType == i.callstatsChannels.userFeedback) return i.callstatsChannels.userFeedback;
                    if (this.eventType == i.callstatsChannels.processedStats) return i.callstatsChannels.processedStats;
                    for (var a in i.precalltestEvents) if (this.eventType == i.precalltestEvents[a]) return i.callstatsChannels.preCallTest;
                    return i.callstatsChannels.callstatsEvent;
                }
            } ], [ {
                key: "checkCustomEntries",
                value: function(a, b) {
                    if (!p[a]) return n.error("eventType not recognized:", a), !1;
                    var c = p[a];
                    for (var d in c) if (!b.hasOwnProperty(d) || f(b[d]) !== c[d]) return n.error("customEntries for", a, "should have", d, "of type", c[d]), 
                    !1;
                    return !0;
                }
            } ]), a;
        }(), p = {};
        p[i.internalFabricEvent.userJoined] = {
            endpointInfo: "object"
        }, p[i.internalFabricEvent.userLeft] = {}, p[i.internalFabricEvent.userAlive] = {}, 
        p[i.internalFabricEvent.userDetails] = {
            userName: "string"
        }, p[i.internalFabricEvent.connectedDeviceList] = {
            mediaDeviceList: "object"
        }, p[i.fabricEvent.activeDeviceList] = {
            mediaDeviceList: "object"
        }, p[i.fabricEvent.audioMute] = {}, p[i.fabricEvent.audioUnmute] = {}, p[i.fabricEvent.videoPause] = {}, 
        p[i.fabricEvent.videoResume] = {}, p[i.fabricEvent.screenShareStart] = {}, p[i.fabricEvent.screenShareStop] = {}, 
        p[i.internalFabricEvent.mediaPlaybackStart] = {
            ssrc: "string"
        }, p[i.internalFabricEvent.mediaPlaybackSuspended] = {
            ssrc: "string"
        }, p[i.internalFabricEvent.mediaPlaybackStalled] = {
            ssrc: "string"
        }, p[i.internalFabricEvent.oneWayMedia] = {
            mediaType: "string",
            ssrc: "string"
        }, p[i.internalFabricEvent.fabricSetup] = {
            localIceCandidates: "object",
            remoteIceCandidates: "object",
            iceCandidatePairs: "object"
        }, p[i.fabricEvent.fabricSetupFailed] = {
            failureDelay: "number",
            reason: "string",
            function: "string",
            endpoint: "object"
        }, p[i.internalFabricEvent.fabricStateChange] = {
            changedState: "string",
            prevState: "string",
            newState: "string"
        }, p[i.internalFabricEvent.fabricDropped] = {
            prevIceConnectionState: "string",
            currIceConnectionState: "string",
            currIceCandidatePair: "object",
            failureDelay: "number"
        }, p[i.internalFabricEvent.iceConnectionDisruptionStart] = {
            prevIceConnectionState: "string",
            currIceConnectionState: "string",
            prevIceConnectionStateTs: "number",
            currIceCandidatePair: "object"
        }, p[i.internalFabricEvent.iceConnectionDisruptionEnd] = {
            prevIceConnectionState: "string",
            currIceConnectionState: "string",
            delay: "number"
        }, p[i.internalFabricEvent.iceDisruptionStart] = {
            prevIceConnectionState: "string",
            currIceConnectionState: "string",
            prevIceConnectionStateTs: "number",
            currIceCandidatePair: "object"
        }, p[i.internalFabricEvent.iceDisruptionEnd] = {
            prevIceConnectionState: "string",
            currIceConnectionState: "string",
            prevIceCandidatePair: "object"
        }, p[i.internalFabricEvent.iceFailed] = {
            localIceCandidates: "object",
            prevIceConnectionState: "string",
            currIceConnectionState: "string",
            currIceCandidatePair: "object",
            failureDelay: "number"
        }, p[i.internalFabricEvent.iceAborted] = {
            prevIceConnectionState: "string",
            currIceConnectionState: "string"
        }, p[i.internalFabricEvent.iceRestarted] = {
            prevIceConnectionState: "string",
            currIceConnectionState: "string",
            prevIceCandidatePair: "object"
        }, p[i.internalFabricEvent.fabricTransportSwitch] = {
            prevIceCandidatePair: "object",
            currIceCandidatePair: "object"
        }, p[i.internalFabricEvent.iceTerminated] = {
            prevIceConnectionState: "string",
            currIceConnectionState: "string"
        }, p[i.fabricEvent.fabricTerminated] = {}, p[i.fabricEvent.fabricHold] = {}, p[i.fabricEvent.fabricResume] = {}, 
        p[i.callstatsChannels.sdpSubmission] = {
            localSDP: "string",
            remoteSDP: "string"
        }, p[i.internalFabricEvent.ssrcMap] = {
            ssrcData: "object"
        }, p[i.callstatsChannels.userFeedback] = {
            feedback: "object"
        }, p[i.internalFabricEvent.sendingThroughputObservations] = {
            ssrc: "string",
            maxsendingKBitrate: "number",
            timeToMaxSendingKBitrate: "number",
            stablesendingKBitrate: "number",
            timeToStableSendingKBitrate: "number"
        }, p[i.fabricEvent.dominantSpeaker] = {}, p[i.fabricEvent.applicationErrorLog] = {
            message: "string",
            messageType: "string"
        }, p[i.callstatsChannels.processedStats] = {
            stats: "object"
        }, p[i.callstatsChannels.senderConfiguration] = {
            rtc_rtp_parameters: "object"
        }, p[i.internalFabricEvent.limitationObservations] = {
            reason: "string"
        }, p[i.qualityDisruptionTypes.qpchange] = {
            reason: "string"
        }, p[i.precalltestEvents.results] = {
            results: "object"
        }, p[i.precalltestEvents.associate] = {
            ids: "object"
        }, c.EventMessage = o;
    }, {
        "../config/constants": 33,
        "../config/settings": 34,
        "./csiologger": 88,
        "./registry": 95
    } ],
    91: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.EventMessageBuilder = void 0;
        var f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
            return typeof a;
        } : function(a) {
            return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
        }, g = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), h = a("./eventmessage"), i = a("../config/constants"), j = d(i), k = a("./registry"), l = a("./csiologger"), m = d(l), n = function() {
            function a() {
                e(this, a), this.transmissionmanager = k.Registry.getTransmissionManager();
            }
            return g(a, [ {
                key: "make",
                value: function(a, b, c) {
                    var d = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                    if ("string" != typeof a || null === d || "object" !== (void 0 === d ? "undefined" : f(d))) return m.error("failed typeof checks:", a, void 0 === a ? "undefined" : f(a), void 0 === d ? "undefined" : f(d), d), 
                    k.Registry.getGenericEventHandler().sendEvent(j.logEvents.error, {
                        msg: "failed typeof checks:" + a + ":" + (void 0 === d ? "undefined" : f(d)) + ":" + (void 0 === a ? "undefined" : f(a))
                    }), !1;
                    if (null === b && a !== j.precalltestEvents.results) return m.error("failed conferenceId checks:", a, b), 
                    k.Registry.getGenericEventHandler().sendEvent(j.logEvents.error, {
                        msg: "failed conferenceId checks:" + a
                    }), !1;
                    if (!c && a !== j.callstatsChannels.userFeedback && a !== j.fabricEvent.applicationErrorLog && a !== j.fabricEvent.fabricSetupFailed && a !== j.internalFabricEvent.userJoined && a !== j.precalltestEvents.results) return m.error("peerconnection cannot be null", a), 
                    k.Registry.getGenericEventHandler().sendEvent(j.logEvents.error, {
                        msg: "peerconnection cannot be null" + a
                    }), !1;
                    if (!h.EventMessage.checkCustomEntries(a, d)) return m.error("failed checks:", a, d), 
                    k.Registry.getGenericEventHandler().sendEvent(j.logEvents.error, {
                        msg: "failed customEntries checks:" + a
                    }), !1;
                    var e = void 0;
                    if (b) {
                        var g = k.Registry.getConferenceManager().get(b);
                        g && c && (e = g.getPeerConnectionManager().getPcHandler(c));
                    }
                    var i = new h.EventMessage(a, b, d, e);
                    return this.transmissionmanager.send(i), !0;
                }
            } ]), a;
        }();
        c.EventMessageBuilder = n;
    }, {
        "../config/constants": 33,
        "./csiologger": 88,
        "./eventmessage": 90,
        "./registry": 95
    } ],
    92: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            var c = {
                name: "SHA-256"
            };
            if (window.crypto) {
                var d = window.crypto.subtle || window.crypto.webkitSubtle;
                if (!d) return void e(a, b);
                d.digest(c, f(a)).then(function(a) {
                    b(g(a));
                }).catch(function() {
                    e(a, b);
                });
            } else if (window.msCrypto) {
                if (!window.msCrypto.subtle) return void e(a, b);
                var h = window.msCrypto.subtle.digest(c, f(a));
                h.oncomplete = function(a) {
                    a.target && b(g(a.target.result));
                }, h.onerror = function() {
                    e(a, b);
                };
            } else e(a, b);
        }
        function e(a) {
            var b = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, c = 0;
            if (!a) return c;
            for (var d = 0, e = a.length; d < e; d++) {
                c = (c << 5) - c + a.charCodeAt(d), c |= 0;
            }
            return b && b(c + ""), c + "";
        }
        function f(a) {
            for (var b = [], c = 0; c < a.length; ++c) {
                var d = a.charCodeAt(c);
                d < 128 ? b[b.length] = d : d > 127 && d < 2048 ? (b[b.length] = d >> 6 | 192, b[b.length] = 63 & d | 128) : (b[b.length] = d >> 12 | 224, 
                b[b.length] = d >> 6 & 63 | 128, b[b.length] = 63 & d | 128);
            }
            return new Uint8Array(b).buffer;
        }
        function g(a) {
            for (var b = new DataView(a), c = "", d = void 0, e = 0; e < b.byteLength; e++) d = b.getUint8(e).toString(16), 
            d.length < 2 && (d = "0" + d), c += d;
            return c;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.generateSHA256 = d, c.generateHash = e;
    }, {} ],
    93: [ function(a, b, c) {
        "use strict";
        function d(a) {
            return !!/^[\],:{}\s]*$/.test(a.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""));
        }
        function e(a) {
            var b = null;
            return null === a ? b : (d(a) && (b = JSON.parse(a)), b);
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.isValid = d, c.parse = e;
    }, {} ],
    94: [ function(a, b, c) {
        "use strict";
        function d(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }
        function e() {
            window && window.addEventListener && window.addEventListener("error", function(a) {
                var b = f.Registry.getGenericEventHandler();
                if (a && a.filename && a.filename.indexOf("callstats") > -1) {
                    for (var c = !1, d = {
                        fileName: a.filename,
                        line: a.lineno,
                        col: a.colno,
                        jsVersion: h.version,
                        eventType: "error",
                        message: a.message,
                        pageURL: window.location.href
                    }, e = f.Registry.getConferenceManager().getConferenceIds(), g = 0; g < e.length; g++) d.conferenceID = e[g], 
                    b.sendEvent(j.logEvents.error, d), c = !0;
                    c || b.sendEvent(j.logEvents.error, d);
                }
            });
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.setErrorEventListener = e;
        var f = a("./registry"), g = a("../config/settings"), h = d(g), i = a("../config/constants"), j = d(i);
    }, {
        "../config/constants": 33,
        "../config/settings": 34,
        "./registry": 95
    } ],
    95: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.Registry = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("../services/clocksync"), g = a("../services/configservice/configservicewrapper"), h = a("../services/authenticator"), i = a("../services/backendlog"), j = a("../services/transmissionmanager"), k = a("./eventmessagebuilder"), l = a("../conference/conferencemanager"), m = a("../utility/credentials"), n = a("../statspipeline/statsadapter"), o = a("../statspipeline/statsparser"), p = a("../statspipeline/statsmonitor"), q = a("../statspipeline/statstransmitter"), r = a("../statspipeline/statsassembler"), s = a("../utility/endpoint"), t = a("../browserapi/battery"), u = a("precalltest"), v = a("../statspipeline/wifistatsexecutor"), w = a("./callbacks"), x = a("../statspipeline/statscallbackbuilder"), y = a("../services/connectionmanager"), z = null, A = null, B = null, C = null, D = null, E = null, F = null, G = null, H = null, I = null, J = null, K = null, L = null, M = null, N = null, O = null, P = null, Q = null, R = null, S = null, T = function() {
            function a() {
                d(this, a);
            }
            return e(a, null, [ {
                key: "getConferenceManager",
                value: function() {
                    return O || (O = new l.ConferenceManager()), O;
                }
            }, {
                key: "getStatsCallbackBuilder",
                value: function() {
                    return R || (R = new x.StatsCallbackBuilder()), R;
                }
            }, {
                key: "getClockSync",
                value: function() {
                    return A || (A = new f.ClockSync()), A;
                }
            }, {
                key: "getWifiStatsExecutor",
                value: function() {
                    return P || (P = new v.WifiStatsExecutor()), P;
                }
            }, {
                key: "getAuthenticator",
                value: function() {
                    return B || (B = new h.Authenticator()), B;
                }
            }, {
                key: "getConfigServiceWrapper",
                value: function() {
                    return C || (C = new g.ConfigServiceWrapper()), C;
                }
            }, {
                key: "getGenericEventHandler",
                value: function() {
                    return D || (D = new i.GenericEventHandler(), D.enable()), D;
                }
            }, {
                key: "getConnectionManager",
                value: function() {
                    return S || (S = new y.ConnectionManager()), S;
                }
            }, {
                key: "getTransmissionManager",
                value: function() {
                    return E || (E = new j.TransmissionManager()), E;
                }
            }, {
                key: "getEventMessageBuilder",
                value: function() {
                    return F || (F = new k.EventMessageBuilder()), F;
                }
            }, {
                key: "getCredentials",
                value: function() {
                    return G || (G = new m.Credentials()), G;
                }
            }, {
                key: "getEndpoint",
                value: function() {
                    return H || (H = new s.Endpoint()), H;
                }
            }, {
                key: "getStatsAdapter",
                value: function() {
                    if (!I) {
                        var b = a.getEndpoint().getCodeBase(), c = a.getEndpoint().getBrowserName();
                        I = new n.StatsAdapter(b, c);
                    }
                    return I;
                }
            }, {
                key: "getPreCallTest",
                value: function() {
                    return z || (z = new u.PreCallTest()), z;
                }
            }, {
                key: "getStatsParser",
                value: function() {
                    return J || (J = new o.StatsParser()), J;
                }
            }, {
                key: "getStatsMonitor",
                value: function() {
                    if (!K) {
                        var b = a.getEndpoint().getCodeBase();
                        K = new p.StatsMonitor(b);
                    }
                    return K;
                }
            }, {
                key: "getStatsTransmitter",
                value: function() {
                    return L || (L = new q.StatsTransmitter()), L;
                }
            }, {
                key: "getStatsAssembler",
                value: function() {
                    return M || (M = new r.StatsAssembler()), M;
                }
            }, {
                key: "getBattery",
                value: function() {
                    return N || (N = new t.Battery()), N;
                }
            }, {
                key: "getCallbacks",
                value: function() {
                    return Q || (Q = new w.Callbacks()), Q;
                }
            } ]), a;
        }();
        c.Registry = T;
    }, {
        "../browserapi/battery": 17,
        "../conference/conferencemanager": 31,
        "../services/authenticator": 44,
        "../services/backendlog": 45,
        "../services/clocksync": 46,
        "../services/configservice/configservicewrapper": 50,
        "../services/connectionmanager": 51,
        "../services/transmissionmanager": 56,
        "../statspipeline/statsadapter": 69,
        "../statspipeline/statsassembler": 70,
        "../statspipeline/statscallbackbuilder": 71,
        "../statspipeline/statsmonitor": 72,
        "../statspipeline/statsparser": 73,
        "../statspipeline/statstransmitter": 74,
        "../statspipeline/wifistatsexecutor": 84,
        "../utility/credentials": 87,
        "../utility/endpoint": 89,
        "./callbacks": 86,
        "./eventmessagebuilder": 91,
        precalltest: 2
    } ],
    96: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        function e() {
            return null === i && (i = new j()), i;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }();
        c.getRTTRegistry = e;
        var g = a("../statspipeline/validator"), h = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(g), i = null, j = function() {
            function a() {
                d(this, a), this.rtts = new Map(), this.frameRates = new Map(), this.transportRTT = null;
            }
            return f(a, [ {
                key: "getFrameRateReceived",
                value: function(a) {
                    for (var b = null, c = [ "googFrameRateOutput", "googFrameRateDecoded", "googFrameRateReceived", "googFrameRateSent", "framerateMean", "framesPerSecond" ], d = 0, e = c.length; d < e; d++) {
                        var f = c[d];
                        if (void 0 !== (b = a.stat(f))) break;
                    }
                    return b;
                }
            }, {
                key: "update",
                value: function(a) {
                    var b = this;
                    a.getStats(function(a) {
                        for (var c = [], d = a.result(), e = 0; e < d.length; ++e) {
                            var f = d[e];
                            if ("googCandidatePair" !== f.type) {
                                if ("ssrc" === f.type) {
                                    var g = b.getFrameRateReceived(f), i = f.stat("googRtt"), j = f.stat("ssrc");
                                    i && b.rtts.set(h.checkForNan(parseInt(j, 10)), h.checkForNan(parseInt(i, 10))), 
                                    g && b.frameRates.set(h.checkForNan(parseInt(j, 10)), h.checkForNan(parseInt(g, 10)));
                                }
                            } else {
                                var k = f.stat("googRtt");
                                c.push(k);
                            }
                        }
                        b.transportRTT = Math.max.apply(Math, c);
                    });
                }
            }, {
                key: "getTransportRTT",
                value: function() {
                    return this.transportRTT;
                }
            }, {
                key: "getRTT",
                value: function(a) {
                    var b = h.checkForNan(parseInt(a, 10));
                    return this.rtts.has(b) ? this.rtts.get(b) : null;
                }
            }, {
                key: "getFrameRate",
                value: function(a) {
                    var b = h.checkForNan(parseInt(a, 10));
                    return this.frameRates.has(b) ? this.frameRates.get(b) : null;
                }
            } ]), a;
        }();
    }, {
        "../statspipeline/validator": 83
    } ],
    97: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = function() {
            function a(b, c, e) {
                d(this, a), this.max = b, this.midpoint = c, this.stepness = e, this.actualStep = 0, 
                this.reset();
            }
            return e(a, [ {
                key: "reset",
                value: function() {
                    this.actualStep = 0;
                }
            }, {
                key: "setMidpoint",
                value: function(a) {
                    this.midpoint = a;
                }
            }, {
                key: "setMax",
                value: function(a) {
                    this.max = a;
                }
            }, {
                key: "setStepness",
                value: function(a) {
                    this.stepness = a;
                }
            }, {
                key: "increaseActualStep",
                value: function(a) {
                    this.actualStep += a;
                }
            }, {
                key: "getActual",
                value: function() {
                    var a = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                    return this.actualStep += a, this.max / (1 + Math.exp(-1 * this.stepness * (this.actualStep - this.midpoint)));
                }
            } ]), a;
        }();
        c.Sigmoid = f;
    }, {} ],
    98: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.TimeoutProcess = void 0;
        var e = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), f = a("./csiologger"), g = function(a) {
            if (a && a.__esModule) return a;
            var b = {};
            if (null != a) for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && (b[c] = a[c]);
            return b.default = a, b;
        }(f), h = function() {
            function a(b) {
                d(this, a), this.interval = b, this.timerId = null, this.callback = function() {
                    g.warn("no callback function set", this);
                };
            }
            return e(a, [ {
                key: "setCallback",
                value: function(a) {
                    this.callback = a;
                }
            }, {
                key: "start",
                value: function() {
                    var a = this;
                    this.timerId = setInterval(function() {
                        a.callback();
                    }, this.interval);
                }
            }, {
                key: "stop",
                value: function() {
                    clearInterval(this.timerId), this.timerId = null;
                }
            }, {
                key: "isStarted",
                value: function() {
                    return null !== this.timerId;
                }
            } ]), a;
        }();
        c.TimeoutProcess = h;
    }, {
        "./csiologger": 88
    } ],
    99: [ function(a, b, c) {
        "use strict";
        function d() {
            return window && window.performance && window.performance.now && window.performance.timing && window.performance.timing.navigationStart ? window.performance.now() + window.performance.timing.navigationStart : Date.now();
        }
        function e() {
            return window && window.performance && window.performance.now ? window.performance.now() : null;
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.getCurrent = d, c.getSinceOrigin = e;
    }, {} ],
    100: [ function(a, b, c) {
        "use strict";
        function d(a, b) {
            if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        });
        var e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
            return typeof a;
        } : function(a) {
            return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
        }, f = function() {
            function a(a, b) {
                for (var c = 0; c < b.length; c++) {
                    var d = b[c];
                    d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), 
                    Object.defineProperty(a, d.key, d);
                }
            }
            return function(b, c, d) {
                return c && a(b.prototype, c), d && a(b, d), b;
            };
        }(), g = function() {
            function a(b) {
                d(this, a), this.base = b;
                for (var c = arguments.length, e = Array(c > 1 ? c - 1 : 0), f = 1; f < c; f++) e[f - 1] = arguments[f];
                this.appendixes = e;
            }
            return f(a, null, [ {
                key: "concat",
                value: function(a, b) {
                    if (!b) return a;
                    if (!a) return b;
                    var c = "/" === a.substr(a.length - 1), d = "/" === b.substring(0, 1);
                    return c || d ? c && d ? a + b.substring(1) : a + b : a + "/" + b;
                }
            } ]), f(a, [ {
                key: "append",
                value: function(a) {
                    this.appendixes.push(a);
                }
            }, {
                key: "toString",
                value: function() {
                    var b = this.getString(this.base), c = this;
                    return this.appendixes.forEach(function(d) {
                        if (null !== d && void 0 !== d) {
                            var e = c.getString(d);
                            b = a.concat(b, e);
                        }
                    }), b;
                }
            }, {
                key: "getString",
                value: function(a) {
                    switch (void 0 === a ? "undefined" : e(a)) {
                      case "function":
                        return this.getString(a());

                      case "number":
                        return a + "";

                      case "string":
                      default:
                        return a;
                    }
                }
            } ]), a;
        }();
        c.Url = g;
    }, {} ],
    101: [ function(a, b, c) {
        "use strict";
        function d(a) {
            var b = [];
            if (!a) return b;
            for (var c = 0; c < a.length; c++) {
                var d = {};
                d.mediaDeviceID = a[c].deviceId, d.groupID = a[c].groupId, d.kind = a[c].kind, d.label = a[c].label, 
                b.push(d);
            }
            return b;
        }
        function e() {
            Number.isInteger || (Number.isInteger = Number.isInteger || function(a) {
                return "number" == typeof a && isFinite(a) && Math.floor(a) === a;
            });
        }
        function f() {
            "function" != typeof Object.assign && Object.defineProperty(Object, "assign", {
                value: function(a, b) {
                    if (null == a) throw new TypeError("Cannot convert undefined or null to object");
                    for (var c = Object(a), d = 1; d < arguments.length; d++) {
                        var e = arguments[d];
                        if (null != e) for (var f in e) Object.prototype.hasOwnProperty.call(e, f) && (c[f] = e[f]);
                    }
                    return c;
                },
                writable: !0,
                configurable: !0
            });
        }
        Object.defineProperty(c, "__esModule", {
            value: !0
        }), c.normalizeMediaDeviceList = d, c.isIntegerPollyfill = e, c.assignPollyfill = f;
    }, {} ]
}, {}, [ 22 ]);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./lib/util/validateOptions.js":
/*!*************************************!*\
  !*** ./lib/util/validateOptions.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Logger = __webpack_require__(/*! ../util/logger */ "./lib/util/logger.js");

// this local variable is created as a replacement of the older global Plivo.
const Plivo = { log: Logger };

var codecs = function (codecs, defaultCodecs){
	if(Object.prototype.toString.call(codecs) == "[object Array]"){
	  var isCheckPassed=true;
	  codecs.forEach(function(codec){
	    if(defaultCodecs.indexOf(codec) == -1){
	      isCheckPassed = false;
	      Plivo.log.warn('Ignoring invalid codec - ',codec);
	      Plivo.log.debug('Allowed list: ',defaultCodecs);
	    }
	  });
	  if(isCheckPassed){
	    return true;
	  }else{
	  	return false;
	  }
	}else{ 
	  Plivo.log.error('Please send codecs in Array. Eg:',defaultCodecs);
	  return false;
	}
}

var isBoolean = function (key, val){
	if(typeof val == "boolean"){
		return true;
	}else{
		Plivo.log.error(key +' has to be boolean. '+ val + ' is not accepted')
		return false;
	}
}

var debug = function (mode, defaultModes) {
	if(defaultModes.indexOf(mode) == -1){
		Plivo.log.error('debug method '+mode+' is not allowed');
		Plivo.log.debug('Allowed list for debug: ',defaultModes);
		return false;
	}else{
		return true;
	}
}

var region = function (name, defaultRegions){
	if(defaultRegions.indexOf(name) == -1){
		Plivo.log.error('region name '+ name + ' is not allowed');
		Plivo.log.debug('Allowed list for regions: ',defaultRegions);
		return false;
	}else{
		return true;
	}
}

module.exports = {
	codecs: codecs,
	isBoolean : isBoolean,
	debug: debug,
	region: region
}


/***/ }),

/***/ "./node_modules/compare-versions/index.js":
/*!************************************************!*\
  !*** ./node_modules/compare-versions/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define */
(function (root, factory) {
  /* istanbul ignore next */
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
}(this, function () {

  var semver = /^v?(?:\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+))?(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;

  function indexOrEnd(str, q) {
    return str.indexOf(q) === -1 ? str.length : str.indexOf(q);
  }

  function split(v) {
    var c = v.replace(/^v/, '').replace(/\+.*$/, '');
    var patchIndex = indexOrEnd(c, '-');
    var arr = c.substring(0, patchIndex).split('.');
    arr.push(c.substring(patchIndex + 1));
    return arr;
  }

  function tryParse(v) {
    return isNaN(Number(v)) ? v : Number(v);
  }

  function validate(version) {
    if (typeof version !== 'string') {
      throw new TypeError('Invalid argument expected string');
    }
    if (!semver.test(version)) {
      throw new Error('Invalid argument not valid semver');
    }
  }

  return function compareVersions(v1, v2) {
    [v1, v2].forEach(validate);

    var s1 = split(v1);
    var s2 = split(v2);

    for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {
      var n1 = parseInt(s1[i] || 0, 10);
      var n2 = parseInt(s2[i] || 0, 10);

      if (n1 > n2) return 1;
      if (n2 > n1) return -1;
    }

    var sp1 = s1[s1.length - 1];
    var sp2 = s2[s2.length - 1];

    if (sp1 && sp2) {
      var p1 = sp1.split('.').map(tryParse);
      var p2 = sp2.split('.').map(tryParse);

      for (i = 0; i < Math.max(p1.length, p2.length); i++) {
        if (p1[i] === undefined || typeof p2[i] === 'string' && typeof p1[i] === 'number') return -1;
        if (p2[i] === undefined || typeof p1[i] === 'string' && typeof p2[i] === 'number') return 1;

        if (p1[i] > p2[i]) return 1;
        if (p2[i] > p1[i]) return -1;
      }
    } else if (sp1 || sp2) {
      return sp1 ? -1 : 1;
    }

    return 0;
  };

}));


/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = window._PlivoUseColorLog;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/debug/src/debug.js":
/*!*****************************************!*\
  !*** ./node_modules/debug/src/debug.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/events/events.js":
/*!**********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/events/events.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js":
/*!******************************************************************!*\
  !*** ./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var SDPUtils = __webpack_require__(/*! sdp */ "./node_modules/sdp/sdp.js");

function fixStatsType(stat) {
  return {
    inboundrtp: 'inbound-rtp',
    outboundrtp: 'outbound-rtp',
    candidatepair: 'candidate-pair',
    localcandidate: 'local-candidate',
    remotecandidate: 'remote-candidate'
  }[stat.type] || stat.type;
}

function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : dtlsRole || 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    var trackId = transceiver.rtpSender._initialTrackId ||
        transceiver.rtpSender.track.id;
    transceiver.rtpSender._initialTrackId = trackId;
    // spec.
    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +
        trackId + '\r\n';
    sdp += 'a=' + msid;
    // for Chrome. Legacy should no longer be required.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;

    // RTX
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
}

// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
function filterIceServers(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        console.warn('RTCIceServer.url is deprecated! Use urls instead.');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
}

// Determines the intersection of local and remote capabilities.
function getCommonCapabilities(localCapabilities, remoteCapabilities) {
  var commonCapabilities = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: []
  };

  var findCodecByPayloadType = function(pt, codecs) {
    pt = parseInt(pt, 10);
    for (var i = 0; i < codecs.length; i++) {
      if (codecs[i].payloadType === pt ||
          codecs[i].preferredPayloadType === pt) {
        return codecs[i];
      }
    }
  };

  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {
    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
    return lCodec && rCodec &&
        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
  };

  localCapabilities.codecs.forEach(function(lCodec) {
    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
      var rCodec = remoteCapabilities.codecs[i];
      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
          lCodec.clockRate === rCodec.clockRate) {
        if (lCodec.name.toLowerCase() === 'rtx' &&
            lCodec.parameters && rCodec.parameters.apt) {
          // for RTX we need to find the local rtx that has a apt
          // which points to the same local codec as the remote one.
          if (!rtxCapabilityMatches(lCodec, rCodec,
              localCapabilities.codecs, remoteCapabilities.codecs)) {
            continue;
          }
        }
        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
        // number of channels is the highest common number of channels
        rCodec.numChannels = Math.min(lCodec.numChannels,
            rCodec.numChannels);
        // push rCodec so we reply with offerer payload type
        commonCapabilities.codecs.push(rCodec);

        // determine common feedback mechanisms
        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
            if (lCodec.rtcpFeedback[j].type === fb.type &&
                lCodec.rtcpFeedback[j].parameter === fb.parameter) {
              return true;
            }
          }
          return false;
        });
        // FIXME: also need to determine .parameters
        //  see https://github.com/openpeer/ortc/issues/569
        break;
      }
    }
  });

  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
    for (var i = 0; i < remoteCapabilities.headerExtensions.length;
         i++) {
      var rHeaderExtension = remoteCapabilities.headerExtensions[i];
      if (lHeaderExtension.uri === rHeaderExtension.uri) {
        commonCapabilities.headerExtensions.push(rHeaderExtension);
        break;
      }
    }
  });

  // FIXME: fecMechanisms
  return commonCapabilities;
}

// is action=setLocalDescription with type allowed in signalingState
function isActionAllowedInSignalingState(action, type, signalingState) {
  return {
    offer: {
      setLocalDescription: ['stable', 'have-local-offer'],
      setRemoteDescription: ['stable', 'have-remote-offer']
    },
    answer: {
      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']
    }
  }[type][action].indexOf(signalingState) !== -1;
}

function maybeAddCandidate(iceTransport, candidate) {
  // Edge's internal representation adds some fields therefore
  // not all fieldѕ are taken into account.
  var alreadyAdded = iceTransport.getRemoteCandidates()
      .find(function(remoteCandidate) {
        return candidate.foundation === remoteCandidate.foundation &&
            candidate.ip === remoteCandidate.ip &&
            candidate.port === remoteCandidate.port &&
            candidate.priority === remoteCandidate.priority &&
            candidate.protocol === remoteCandidate.protocol &&
            candidate.type === remoteCandidate.type;
      });
  if (!alreadyAdded) {
    iceTransport.addRemoteCandidate(candidate);
  }
  return !alreadyAdded;
}


function makeError(name, description) {
  var e = new Error(description);
  e.name = name;
  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names
  e.code = {
    NotSupportedError: 9,
    InvalidStateError: 11,
    InvalidAccessError: 15,
    TypeError: undefined,
    OperationError: undefined
  }[name];
  return e;
}

module.exports = function(window, edgeVersion) {
  // https://w3c.github.io/mediacapture-main/#mediastream
  // Helper function to add the track to the stream and
  // dispatch the event ourselves.
  function addTrackToStreamAndFireEvent(track, stream) {
    stream.addTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',
        {track: track}));
  }

  function removeTrackFromStreamAndFireEvent(track, stream) {
    stream.removeTrack(track);
    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',
        {track: track}));
  }

  function fireAddTrack(pc, track, receiver, streams) {
    var trackEvent = new Event('track');
    trackEvent.track = track;
    trackEvent.receiver = receiver;
    trackEvent.transceiver = {receiver: receiver};
    trackEvent.streams = streams;
    window.setTimeout(function() {
      pc._dispatchEvent('track', trackEvent);
    });
  }

  var RTCPeerConnection = function(config) {
    var pc = this;

    var _eventTarget = document.createDocumentFragment();
    ['addEventListener', 'removeEventListener', 'dispatchEvent']
        .forEach(function(method) {
          pc[method] = _eventTarget[method].bind(_eventTarget);
        });

    this.canTrickleIceCandidates = null;

    this.needNegotiation = false;

    this.localStreams = [];
    this.remoteStreams = [];

    this._localDescription = null;
    this._remoteDescription = null;

    this.signalingState = 'stable';
    this.iceConnectionState = 'new';
    this.connectionState = 'new';
    this.iceGatheringState = 'new';

    config = JSON.parse(JSON.stringify(config || {}));

    this.usingBundle = config.bundlePolicy === 'max-bundle';
    if (config.rtcpMuxPolicy === 'negotiate') {
      throw(makeError('NotSupportedError',
          'rtcpMuxPolicy \'negotiate\' is not supported'));
    } else if (!config.rtcpMuxPolicy) {
      config.rtcpMuxPolicy = 'require';
    }

    switch (config.iceTransportPolicy) {
      case 'all':
      case 'relay':
        break;
      default:
        config.iceTransportPolicy = 'all';
        break;
    }

    switch (config.bundlePolicy) {
      case 'balanced':
      case 'max-compat':
      case 'max-bundle':
        break;
      default:
        config.bundlePolicy = 'balanced';
        break;
    }

    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);

    this._iceGatherers = [];
    if (config.iceCandidatePoolSize) {
      for (var i = config.iceCandidatePoolSize; i > 0; i--) {
        this._iceGatherers.push(new window.RTCIceGatherer({
          iceServers: config.iceServers,
          gatherPolicy: config.iceTransportPolicy
        }));
      }
    } else {
      config.iceCandidatePoolSize = 0;
    }

    this._config = config;

    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
    // everything that is needed to describe a SDP m-line.
    this.transceivers = [];

    this._sdpSessionId = SDPUtils.generateSessionId();
    this._sdpSessionVersion = 0;

    this._dtlsRole = undefined; // role for a=setup to use in answers.

    this._isClosed = false;
  };

  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {
    configurable: true,
    get: function() {
      return this._localDescription;
    }
  });
  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {
    configurable: true,
    get: function() {
      return this._remoteDescription;
    }
  });

  // set up event handlers on prototype
  RTCPeerConnection.prototype.onicecandidate = null;
  RTCPeerConnection.prototype.onaddstream = null;
  RTCPeerConnection.prototype.ontrack = null;
  RTCPeerConnection.prototype.onremovestream = null;
  RTCPeerConnection.prototype.onsignalingstatechange = null;
  RTCPeerConnection.prototype.oniceconnectionstatechange = null;
  RTCPeerConnection.prototype.onconnectionstatechange = null;
  RTCPeerConnection.prototype.onicegatheringstatechange = null;
  RTCPeerConnection.prototype.onnegotiationneeded = null;
  RTCPeerConnection.prototype.ondatachannel = null;

  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {
    if (this._isClosed) {
      return;
    }
    this.dispatchEvent(event);
    if (typeof this['on' + name] === 'function') {
      this['on' + name](event);
    }
  };

  RTCPeerConnection.prototype._emitGatheringStateChange = function() {
    var event = new Event('icegatheringstatechange');
    this._dispatchEvent('icegatheringstatechange', event);
  };

  RTCPeerConnection.prototype.getConfiguration = function() {
    return this._config;
  };

  RTCPeerConnection.prototype.getLocalStreams = function() {
    return this.localStreams;
  };

  RTCPeerConnection.prototype.getRemoteStreams = function() {
    return this.remoteStreams;
  };

  // internal helper to create a transceiver object.
  // (which is not yet the same as the WebRTC 1.0 transceiver)
  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {
    var hasBundleTransport = this.transceivers.length > 0;
    var transceiver = {
      track: null,
      iceGatherer: null,
      iceTransport: null,
      dtlsTransport: null,
      localCapabilities: null,
      remoteCapabilities: null,
      rtpSender: null,
      rtpReceiver: null,
      kind: kind,
      mid: null,
      sendEncodingParameters: null,
      recvEncodingParameters: null,
      stream: null,
      associatedRemoteMediaStreams: [],
      wantReceive: true
    };
    if (this.usingBundle && hasBundleTransport) {
      transceiver.iceTransport = this.transceivers[0].iceTransport;
      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
    } else {
      var transports = this._createIceAndDtlsTransports();
      transceiver.iceTransport = transports.iceTransport;
      transceiver.dtlsTransport = transports.dtlsTransport;
    }
    if (!doNotAdd) {
      this.transceivers.push(transceiver);
    }
    return transceiver;
  };

  RTCPeerConnection.prototype.addTrack = function(track, stream) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call addTrack on a closed peerconnection.');
    }

    var alreadyExists = this.transceivers.find(function(s) {
      return s.track === track;
    });

    if (alreadyExists) {
      throw makeError('InvalidAccessError', 'Track already exists.');
    }

    var transceiver;
    for (var i = 0; i < this.transceivers.length; i++) {
      if (!this.transceivers[i].track &&
          this.transceivers[i].kind === track.kind) {
        transceiver = this.transceivers[i];
      }
    }
    if (!transceiver) {
      transceiver = this._createTransceiver(track.kind);
    }

    this._maybeFireNegotiationNeeded();

    if (this.localStreams.indexOf(stream) === -1) {
      this.localStreams.push(stream);
    }

    transceiver.track = track;
    transceiver.stream = stream;
    transceiver.rtpSender = new window.RTCRtpSender(track,
        transceiver.dtlsTransport);
    return transceiver.rtpSender;
  };

  RTCPeerConnection.prototype.addStream = function(stream) {
    var pc = this;
    if (edgeVersion >= 15025) {
      stream.getTracks().forEach(function(track) {
        pc.addTrack(track, stream);
      });
    } else {
      // Clone is necessary for local demos mostly, attaching directly
      // to two different senders does not work (build 10547).
      // Fixed in 15025 (or earlier)
      var clonedStream = stream.clone();
      stream.getTracks().forEach(function(track, idx) {
        var clonedTrack = clonedStream.getTracks()[idx];
        track.addEventListener('enabled', function(event) {
          clonedTrack.enabled = event.enabled;
        });
      });
      clonedStream.getTracks().forEach(function(track) {
        pc.addTrack(track, clonedStream);
      });
    }
  };

  RTCPeerConnection.prototype.removeTrack = function(sender) {
    if (this._isClosed) {
      throw makeError('InvalidStateError',
          'Attempted to call removeTrack on a closed peerconnection.');
    }

    if (!(sender instanceof window.RTCRtpSender)) {
      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +
          'does not implement interface RTCRtpSender.');
    }

    var transceiver = this.transceivers.find(function(t) {
      return t.rtpSender === sender;
    });

    if (!transceiver) {
      throw makeError('InvalidAccessError',
          'Sender was not created by this connection.');
    }
    var stream = transceiver.stream;

    transceiver.rtpSender.stop();
    transceiver.rtpSender = null;
    transceiver.track = null;
    transceiver.stream = null;

    // remove the stream from the set of local streams
    var localStreams = this.transceivers.map(function(t) {
      return t.stream;
    });
    if (localStreams.indexOf(stream) === -1 &&
        this.localStreams.indexOf(stream) > -1) {
      this.localStreams.splice(this.localStreams.indexOf(stream), 1);
    }

    this._maybeFireNegotiationNeeded();
  };

  RTCPeerConnection.prototype.removeStream = function(stream) {
    var pc = this;
    stream.getTracks().forEach(function(track) {
      var sender = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (sender) {
        pc.removeTrack(sender);
      }
    });
  };

  RTCPeerConnection.prototype.getSenders = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpSender;
    })
    .map(function(transceiver) {
      return transceiver.rtpSender;
    });
  };

  RTCPeerConnection.prototype.getReceivers = function() {
    return this.transceivers.filter(function(transceiver) {
      return !!transceiver.rtpReceiver;
    })
    .map(function(transceiver) {
      return transceiver.rtpReceiver;
    });
  };


  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,
      usingBundle) {
    var pc = this;
    if (usingBundle && sdpMLineIndex > 0) {
      return this.transceivers[0].iceGatherer;
    } else if (this._iceGatherers.length) {
      return this._iceGatherers.shift();
    }
    var iceGatherer = new window.RTCIceGatherer({
      iceServers: this._config.iceServers,
      gatherPolicy: this._config.iceTransportPolicy
    });
    Object.defineProperty(iceGatherer, 'state',
        {value: 'new', writable: true}
    );

    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];
    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {
      var end = !event.candidate || Object.keys(event.candidate).length === 0;
      // polyfill since RTCIceGatherer.state is not implemented in
      // Edge 10547 yet.
      iceGatherer.state = end ? 'completed' : 'gathering';
      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {
        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);
      }
    };
    iceGatherer.addEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    return iceGatherer;
  };

  // start gathering from an RTCIceGatherer.
  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {
    var pc = this;
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer.onlocalcandidate) {
      return;
    }
    var bufferedCandidateEvents =
      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;
    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;
    iceGatherer.removeEventListener('localcandidate',
      this.transceivers[sdpMLineIndex].bufferCandidates);
    iceGatherer.onlocalcandidate = function(evt) {
      if (pc.usingBundle && sdpMLineIndex > 0) {
        // if we know that we use bundle we can drop candidates with
        // ѕdpMLineIndex > 0. If we don't do this then our state gets
        // confused since we dispose the extra ice gatherer.
        return;
      }
      var event = new Event('icecandidate');
      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

      var cand = evt.candidate;
      // Edge emits an empty object for RTCIceCandidateComplete‥
      var end = !cand || Object.keys(cand).length === 0;
      if (end) {
        // polyfill since RTCIceGatherer.state is not implemented in
        // Edge 10547 yet.
        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {
          iceGatherer.state = 'completed';
        }
      } else {
        if (iceGatherer.state === 'new') {
          iceGatherer.state = 'gathering';
        }
        // RTCIceCandidate doesn't have a component, needs to be added
        cand.component = 1;
        // also the usernameFragment. TODO: update SDP to take both variants.
        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;

        var serializedCandidate = SDPUtils.writeCandidate(cand);
        event.candidate = Object.assign(event.candidate,
            SDPUtils.parseCandidate(serializedCandidate));

        event.candidate.candidate = serializedCandidate;
        event.candidate.toJSON = function() {
          return {
            candidate: event.candidate.candidate,
            sdpMid: event.candidate.sdpMid,
            sdpMLineIndex: event.candidate.sdpMLineIndex,
            usernameFragment: event.candidate.usernameFragment
          };
        };
      }

      // update local description.
      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);
      if (!end) {
        sections[event.candidate.sdpMLineIndex] +=
            'a=' + event.candidate.candidate + '\r\n';
      } else {
        sections[event.candidate.sdpMLineIndex] +=
            'a=end-of-candidates\r\n';
      }
      pc._localDescription.sdp =
          SDPUtils.getDescription(pc._localDescription.sdp) +
          sections.join('');
      var complete = pc.transceivers.every(function(transceiver) {
        return transceiver.iceGatherer &&
            transceiver.iceGatherer.state === 'completed';
      });

      if (pc.iceGatheringState !== 'gathering') {
        pc.iceGatheringState = 'gathering';
        pc._emitGatheringStateChange();
      }

      // Emit candidate. Also emit null candidate when all gatherers are
      // complete.
      if (!end) {
        pc._dispatchEvent('icecandidate', event);
      }
      if (complete) {
        pc._dispatchEvent('icecandidate', new Event('icecandidate'));
        pc.iceGatheringState = 'complete';
        pc._emitGatheringStateChange();
      }
    };

    // emit already gathered candidates.
    window.setTimeout(function() {
      bufferedCandidateEvents.forEach(function(e) {
        iceGatherer.onlocalcandidate(e);
      });
    }, 0);
  };

  // Create ICE transport and DTLS transport.
  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {
    var pc = this;
    var iceTransport = new window.RTCIceTransport(null);
    iceTransport.onicestatechange = function() {
      pc._updateIceConnectionState();
      pc._updateConnectionState();
    };

    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);
    dtlsTransport.ondtlsstatechange = function() {
      pc._updateConnectionState();
    };
    dtlsTransport.onerror = function() {
      // onerror does not set state to failed by itself.
      Object.defineProperty(dtlsTransport, 'state',
          {value: 'failed', writable: true});
      pc._updateConnectionState();
    };

    return {
      iceTransport: iceTransport,
      dtlsTransport: dtlsTransport
    };
  };

  // Destroy ICE gatherer, ICE transport and DTLS transport.
  // Without triggering the callbacks.
  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(
      sdpMLineIndex) {
    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
    if (iceGatherer) {
      delete iceGatherer.onlocalcandidate;
      delete this.transceivers[sdpMLineIndex].iceGatherer;
    }
    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;
    if (iceTransport) {
      delete iceTransport.onicestatechange;
      delete this.transceivers[sdpMLineIndex].iceTransport;
    }
    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;
    if (dtlsTransport) {
      delete dtlsTransport.ondtlsstatechange;
      delete dtlsTransport.onerror;
      delete this.transceivers[sdpMLineIndex].dtlsTransport;
    }
  };

  // Start the RTP Sender and Receiver for a transceiver.
  RTCPeerConnection.prototype._transceive = function(transceiver,
      send, recv) {
    var params = getCommonCapabilities(transceiver.localCapabilities,
        transceiver.remoteCapabilities);
    if (send && transceiver.rtpSender) {
      params.encodings = transceiver.sendEncodingParameters;
      params.rtcp = {
        cname: SDPUtils.localCName,
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.recvEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
      }
      transceiver.rtpSender.send(params);
    }
    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {
      // remove RTX field in Edge 14942
      if (transceiver.kind === 'video'
          && transceiver.recvEncodingParameters
          && edgeVersion < 15019) {
        transceiver.recvEncodingParameters.forEach(function(p) {
          delete p.rtx;
        });
      }
      if (transceiver.recvEncodingParameters.length) {
        params.encodings = transceiver.recvEncodingParameters;
      } else {
        params.encodings = [{}];
      }
      params.rtcp = {
        compound: transceiver.rtcpParameters.compound
      };
      if (transceiver.rtcpParameters.cname) {
        params.rtcp.cname = transceiver.rtcpParameters.cname;
      }
      if (transceiver.sendEncodingParameters.length) {
        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
      }
      transceiver.rtpReceiver.receive(params);
    }
  };

  RTCPeerConnection.prototype.setLocalDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setLocalDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set local ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var sections;
    var sessionpart;
    if (description.type === 'offer') {
      // VERY limited support for SDP munging. Limited to:
      // * changing the order of codecs
      sections = SDPUtils.splitSections(description.sdp);
      sessionpart = sections.shift();
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var caps = SDPUtils.parseRtpParameters(mediaSection);
        pc.transceivers[sdpMLineIndex].localCapabilities = caps;
      });

      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
        pc._gather(transceiver.mid, sdpMLineIndex);
      });
    } else if (description.type === 'answer') {
      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);
      sessionpart = sections.shift();
      var isIceLite = SDPUtils.matchPrefix(sessionpart,
          'a=ice-lite').length > 0;
      sections.forEach(function(mediaSection, sdpMLineIndex) {
        var transceiver = pc.transceivers[sdpMLineIndex];
        var iceGatherer = transceiver.iceGatherer;
        var iceTransport = transceiver.iceTransport;
        var dtlsTransport = transceiver.dtlsTransport;
        var localCapabilities = transceiver.localCapabilities;
        var remoteCapabilities = transceiver.remoteCapabilities;

        // treat bundle-only as not-rejected.
        var rejected = SDPUtils.isRejected(mediaSection) &&
            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;

        if (!rejected && !transceiver.rejected) {
          var remoteIceParameters = SDPUtils.getIceParameters(
              mediaSection, sessionpart);
          var remoteDtlsParameters = SDPUtils.getDtlsParameters(
              mediaSection, sessionpart);
          if (isIceLite) {
            remoteDtlsParameters.role = 'server';
          }

          if (!pc.usingBundle || sdpMLineIndex === 0) {
            pc._gather(transceiver.mid, sdpMLineIndex);
            if (iceTransport.state === 'new') {
              iceTransport.start(iceGatherer, remoteIceParameters,
                  isIceLite ? 'controlling' : 'controlled');
            }
            if (dtlsTransport.state === 'new') {
              dtlsTransport.start(remoteDtlsParameters);
            }
          }

          // Calculate intersection of capabilities.
          var params = getCommonCapabilities(localCapabilities,
              remoteCapabilities);

          // Start the RTCRtpSender. The RTCRtpReceiver for this
          // transceiver has already been started in setRemoteDescription.
          pc._transceive(transceiver,
              params.codecs.length > 0,
              false);
        }
      });
    }

    pc._localDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-local-offer');
    } else {
      pc._updateSignalingState('stable');
    }

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.setRemoteDescription = function(description) {
    var pc = this;

    // Note: pranswer is not supported.
    if (['offer', 'answer'].indexOf(description.type) === -1) {
      return Promise.reject(makeError('TypeError',
          'Unsupported type "' + description.type + '"'));
    }

    if (!isActionAllowedInSignalingState('setRemoteDescription',
        description.type, pc.signalingState) || pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not set remote ' + description.type +
          ' in state ' + pc.signalingState));
    }

    var streams = {};
    pc.remoteStreams.forEach(function(stream) {
      streams[stream.id] = stream;
    });
    var receiverList = [];
    var sections = SDPUtils.splitSections(description.sdp);
    var sessionpart = sections.shift();
    var isIceLite = SDPUtils.matchPrefix(sessionpart,
        'a=ice-lite').length > 0;
    var usingBundle = SDPUtils.matchPrefix(sessionpart,
        'a=group:BUNDLE ').length > 0;
    pc.usingBundle = usingBundle;
    var iceOptions = SDPUtils.matchPrefix(sessionpart,
        'a=ice-options:')[0];
    if (iceOptions) {
      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')
          .indexOf('trickle') >= 0;
    } else {
      pc.canTrickleIceCandidates = false;
    }

    sections.forEach(function(mediaSection, sdpMLineIndex) {
      var lines = SDPUtils.splitLines(mediaSection);
      var kind = SDPUtils.getKind(mediaSection);
      // treat bundle-only as not-rejected.
      var rejected = SDPUtils.isRejected(mediaSection) &&
          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;
      var protocol = lines[0].substr(2).split(' ')[2];

      var direction = SDPUtils.getDirection(mediaSection, sessionpart);
      var remoteMsid = SDPUtils.parseMsid(mediaSection);

      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();

      // Reject datachannels which are not implemented yet.
      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||
          protocol === 'UDP/DTLS/SCTP'))) {
        // TODO: this is dangerous in the case where a non-rejected m-line
        //     becomes rejected.
        pc.transceivers[sdpMLineIndex] = {
          mid: mid,
          kind: kind,
          protocol: protocol,
          rejected: true
        };
        return;
      }

      if (!rejected && pc.transceivers[sdpMLineIndex] &&
          pc.transceivers[sdpMLineIndex].rejected) {
        // recycle a rejected transceiver.
        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);
      }

      var transceiver;
      var iceGatherer;
      var iceTransport;
      var dtlsTransport;
      var rtpReceiver;
      var sendEncodingParameters;
      var recvEncodingParameters;
      var localCapabilities;

      var track;
      // FIXME: ensure the mediaSection has rtcp-mux set.
      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
      var remoteIceParameters;
      var remoteDtlsParameters;
      if (!rejected) {
        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
            sessionpart);
        remoteDtlsParameters.role = 'client';
      }
      recvEncodingParameters =
          SDPUtils.parseRtpEncodingParameters(mediaSection);

      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);

      var isComplete = SDPUtils.matchPrefix(mediaSection,
          'a=end-of-candidates', sessionpart).length > 0;
      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
          .map(function(cand) {
            return SDPUtils.parseCandidate(cand);
          })
          .filter(function(cand) {
            return cand.component === 1;
          });

      // Check if we can use BUNDLE and dispose transports.
      if ((description.type === 'offer' || description.type === 'answer') &&
          !rejected && usingBundle && sdpMLineIndex > 0 &&
          pc.transceivers[sdpMLineIndex]) {
        pc._disposeIceAndDtlsTransports(sdpMLineIndex);
        pc.transceivers[sdpMLineIndex].iceGatherer =
            pc.transceivers[0].iceGatherer;
        pc.transceivers[sdpMLineIndex].iceTransport =
            pc.transceivers[0].iceTransport;
        pc.transceivers[sdpMLineIndex].dtlsTransport =
            pc.transceivers[0].dtlsTransport;
        if (pc.transceivers[sdpMLineIndex].rtpSender) {
          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {
          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
              pc.transceivers[0].dtlsTransport);
        }
      }
      if (description.type === 'offer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex] ||
            pc._createTransceiver(kind);
        transceiver.mid = mid;

        if (!transceiver.iceGatherer) {
          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
              usingBundle);
        }

        if (cands.length && transceiver.iceTransport.state === 'new') {
          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {
            transceiver.iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);

        // filter RTX until additional stuff needed for RTX is implemented
        // in adapter.js
        if (edgeVersion < 15019) {
          localCapabilities.codecs = localCapabilities.codecs.filter(
              function(codec) {
                return codec.name !== 'rtx';
              });
        }

        sendEncodingParameters = transceiver.sendEncodingParameters || [{
          ssrc: (2 * sdpMLineIndex + 2) * 1001
        }];

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        var isNewTrack = false;
        if (direction === 'sendrecv' || direction === 'sendonly') {
          isNewTrack = !transceiver.rtpReceiver;
          rtpReceiver = transceiver.rtpReceiver ||
              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);

          if (isNewTrack) {
            var stream;
            track = rtpReceiver.track;
            // FIXME: does not work with Plan B.
            if (remoteMsid && remoteMsid.stream === '-') {
              // no-op. a stream id of '-' means: no associated stream.
            } else if (remoteMsid) {
              if (!streams[remoteMsid.stream]) {
                streams[remoteMsid.stream] = new window.MediaStream();
                Object.defineProperty(streams[remoteMsid.stream], 'id', {
                  get: function() {
                    return remoteMsid.stream;
                  }
                });
              }
              Object.defineProperty(track, 'id', {
                get: function() {
                  return remoteMsid.track;
                }
              });
              stream = streams[remoteMsid.stream];
            } else {
              if (!streams.default) {
                streams.default = new window.MediaStream();
              }
              stream = streams.default;
            }
            if (stream) {
              addTrackToStreamAndFireEvent(track, stream);
              transceiver.associatedRemoteMediaStreams.push(stream);
            }
            receiverList.push([track, rtpReceiver, stream]);
          }
        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {
          transceiver.associatedRemoteMediaStreams.forEach(function(s) {
            var nativeTrack = s.getTracks().find(function(t) {
              return t.id === transceiver.rtpReceiver.track.id;
            });
            if (nativeTrack) {
              removeTrackFromStreamAndFireEvent(nativeTrack, s);
            }
          });
          transceiver.associatedRemoteMediaStreams = [];
        }

        transceiver.localCapabilities = localCapabilities;
        transceiver.remoteCapabilities = remoteCapabilities;
        transceiver.rtpReceiver = rtpReceiver;
        transceiver.rtcpParameters = rtcpParameters;
        transceiver.sendEncodingParameters = sendEncodingParameters;
        transceiver.recvEncodingParameters = recvEncodingParameters;

        // Start the RTCRtpReceiver now. The RTPSender is started in
        // setLocalDescription.
        pc._transceive(pc.transceivers[sdpMLineIndex],
            false,
            isNewTrack);
      } else if (description.type === 'answer' && !rejected) {
        transceiver = pc.transceivers[sdpMLineIndex];
        iceGatherer = transceiver.iceGatherer;
        iceTransport = transceiver.iceTransport;
        dtlsTransport = transceiver.dtlsTransport;
        rtpReceiver = transceiver.rtpReceiver;
        sendEncodingParameters = transceiver.sendEncodingParameters;
        localCapabilities = transceiver.localCapabilities;

        pc.transceivers[sdpMLineIndex].recvEncodingParameters =
            recvEncodingParameters;
        pc.transceivers[sdpMLineIndex].remoteCapabilities =
            remoteCapabilities;
        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;

        if (cands.length && iceTransport.state === 'new') {
          if ((isIceLite || isComplete) &&
              (!usingBundle || sdpMLineIndex === 0)) {
            iceTransport.setRemoteCandidates(cands);
          } else {
            cands.forEach(function(candidate) {
              maybeAddCandidate(transceiver.iceTransport, candidate);
            });
          }
        }

        if (!usingBundle || sdpMLineIndex === 0) {
          if (iceTransport.state === 'new') {
            iceTransport.start(iceGatherer, remoteIceParameters,
                'controlling');
          }
          if (dtlsTransport.state === 'new') {
            dtlsTransport.start(remoteDtlsParameters);
          }
        }

        pc._transceive(transceiver,
            direction === 'sendrecv' || direction === 'recvonly',
            direction === 'sendrecv' || direction === 'sendonly');

        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams
        if (rtpReceiver &&
            (direction === 'sendrecv' || direction === 'sendonly')) {
          track = rtpReceiver.track;
          if (remoteMsid) {
            if (!streams[remoteMsid.stream]) {
              streams[remoteMsid.stream] = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);
            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
          } else {
            if (!streams.default) {
              streams.default = new window.MediaStream();
            }
            addTrackToStreamAndFireEvent(track, streams.default);
            receiverList.push([track, rtpReceiver, streams.default]);
          }
        } else {
          // FIXME: actually the receiver should be created later.
          delete transceiver.rtpReceiver;
        }
      }
    });

    if (pc._dtlsRole === undefined) {
      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';
    }

    pc._remoteDescription = {
      type: description.type,
      sdp: description.sdp
    };
    if (description.type === 'offer') {
      pc._updateSignalingState('have-remote-offer');
    } else {
      pc._updateSignalingState('stable');
    }
    Object.keys(streams).forEach(function(sid) {
      var stream = streams[sid];
      if (stream.getTracks().length) {
        if (pc.remoteStreams.indexOf(stream) === -1) {
          pc.remoteStreams.push(stream);
          var event = new Event('addstream');
          event.stream = stream;
          window.setTimeout(function() {
            pc._dispatchEvent('addstream', event);
          });
        }

        receiverList.forEach(function(item) {
          var track = item[0];
          var receiver = item[1];
          if (stream.id !== item[2].id) {
            return;
          }
          fireAddTrack(pc, track, receiver, [stream]);
        });
      }
    });
    receiverList.forEach(function(item) {
      if (item[2]) {
        return;
      }
      fireAddTrack(pc, item[0], item[1], []);
    });

    // check whether addIceCandidate({}) was called within four seconds after
    // setRemoteDescription.
    window.setTimeout(function() {
      if (!(pc && pc.transceivers)) {
        return;
      }
      pc.transceivers.forEach(function(transceiver) {
        if (transceiver.iceTransport &&
            transceiver.iceTransport.state === 'new' &&
            transceiver.iceTransport.getRemoteCandidates().length > 0) {
          console.warn('Timeout for addRemoteCandidate. Consider sending ' +
              'an end-of-candidates notification');
          transceiver.iceTransport.addRemoteCandidate({});
        }
      });
    }, 4000);

    return Promise.resolve();
  };

  RTCPeerConnection.prototype.close = function() {
    this.transceivers.forEach(function(transceiver) {
      /* not yet
      if (transceiver.iceGatherer) {
        transceiver.iceGatherer.close();
      }
      */
      if (transceiver.iceTransport) {
        transceiver.iceTransport.stop();
      }
      if (transceiver.dtlsTransport) {
        transceiver.dtlsTransport.stop();
      }
      if (transceiver.rtpSender) {
        transceiver.rtpSender.stop();
      }
      if (transceiver.rtpReceiver) {
        transceiver.rtpReceiver.stop();
      }
    });
    // FIXME: clean up tracks, local streams, remote streams, etc
    this._isClosed = true;
    this._updateSignalingState('closed');
  };

  // Update the signaling state.
  RTCPeerConnection.prototype._updateSignalingState = function(newState) {
    this.signalingState = newState;
    var event = new Event('signalingstatechange');
    this._dispatchEvent('signalingstatechange', event);
  };

  // Determine whether to fire the negotiationneeded event.
  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {
    var pc = this;
    if (this.signalingState !== 'stable' || this.needNegotiation === true) {
      return;
    }
    this.needNegotiation = true;
    window.setTimeout(function() {
      if (pc.needNegotiation) {
        pc.needNegotiation = false;
        var event = new Event('negotiationneeded');
        pc._dispatchEvent('negotiationneeded', event);
      }
    }, 0);
  };

  // Update the ice connection state.
  RTCPeerConnection.prototype._updateIceConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      checking: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      states[transceiver.iceTransport.state]++;
    });

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.checking > 0) {
      newState = 'checking';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    } else if (states.completed > 0) {
      newState = 'completed';
    }

    if (newState !== this.iceConnectionState) {
      this.iceConnectionState = newState;
      var event = new Event('iceconnectionstatechange');
      this._dispatchEvent('iceconnectionstatechange', event);
    }
  };

  // Update the connection state.
  RTCPeerConnection.prototype._updateConnectionState = function() {
    var newState;
    var states = {
      'new': 0,
      closed: 0,
      connecting: 0,
      connected: 0,
      completed: 0,
      disconnected: 0,
      failed: 0
    };
    this.transceivers.forEach(function(transceiver) {
      states[transceiver.iceTransport.state]++;
      states[transceiver.dtlsTransport.state]++;
    });
    // ICETransport.completed and connected are the same for this purpose.
    states.connected += states.completed;

    newState = 'new';
    if (states.failed > 0) {
      newState = 'failed';
    } else if (states.connecting > 0) {
      newState = 'connecting';
    } else if (states.disconnected > 0) {
      newState = 'disconnected';
    } else if (states.new > 0) {
      newState = 'new';
    } else if (states.connected > 0) {
      newState = 'connected';
    }

    if (newState !== this.connectionState) {
      this.connectionState = newState;
      var event = new Event('connectionstatechange');
      this._dispatchEvent('connectionstatechange', event);
    }
  };

  RTCPeerConnection.prototype.createOffer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createOffer after close'));
    }

    var numAudioTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'audio';
    }).length;
    var numVideoTracks = pc.transceivers.filter(function(t) {
      return t.kind === 'video';
    }).length;

    // Determine number of audio and video tracks we need to send/recv.
    var offerOptions = arguments[0];
    if (offerOptions) {
      // Reject Chrome legacy constraints.
      if (offerOptions.mandatory || offerOptions.optional) {
        throw new TypeError(
            'Legacy mandatory/optional constraints not supported.');
      }
      if (offerOptions.offerToReceiveAudio !== undefined) {
        if (offerOptions.offerToReceiveAudio === true) {
          numAudioTracks = 1;
        } else if (offerOptions.offerToReceiveAudio === false) {
          numAudioTracks = 0;
        } else {
          numAudioTracks = offerOptions.offerToReceiveAudio;
        }
      }
      if (offerOptions.offerToReceiveVideo !== undefined) {
        if (offerOptions.offerToReceiveVideo === true) {
          numVideoTracks = 1;
        } else if (offerOptions.offerToReceiveVideo === false) {
          numVideoTracks = 0;
        } else {
          numVideoTracks = offerOptions.offerToReceiveVideo;
        }
      }
    }

    pc.transceivers.forEach(function(transceiver) {
      if (transceiver.kind === 'audio') {
        numAudioTracks--;
        if (numAudioTracks < 0) {
          transceiver.wantReceive = false;
        }
      } else if (transceiver.kind === 'video') {
        numVideoTracks--;
        if (numVideoTracks < 0) {
          transceiver.wantReceive = false;
        }
      }
    });

    // Create M-lines for recvonly streams.
    while (numAudioTracks > 0 || numVideoTracks > 0) {
      if (numAudioTracks > 0) {
        pc._createTransceiver('audio');
        numAudioTracks--;
      }
      if (numVideoTracks > 0) {
        pc._createTransceiver('video');
        numVideoTracks--;
      }
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      // For each track, create an ice gatherer, ice transport,
      // dtls transport, potentially rtpsender and rtpreceiver.
      var track = transceiver.track;
      var kind = transceiver.kind;
      var mid = transceiver.mid || SDPUtils.generateIdentifier();
      transceiver.mid = mid;

      if (!transceiver.iceGatherer) {
        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,
            pc.usingBundle);
      }

      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);
      // filter RTX until additional stuff needed for RTX is implemented
      // in adapter.js
      if (edgeVersion < 15019) {
        localCapabilities.codecs = localCapabilities.codecs.filter(
            function(codec) {
              return codec.name !== 'rtx';
            });
      }
      localCapabilities.codecs.forEach(function(codec) {
        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
        // by adding level-asymmetry-allowed=1
        if (codec.name === 'H264' &&
            codec.parameters['level-asymmetry-allowed'] === undefined) {
          codec.parameters['level-asymmetry-allowed'] = '1';
        }

        // for subsequent offers, we might have to re-use the payload
        // type of the last offer.
        if (transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.codecs) {
          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {
            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&
                codec.clockRate === remoteCodec.clockRate) {
              codec.preferredPayloadType = remoteCodec.payloadType;
            }
          });
        }
      });
      localCapabilities.headerExtensions.forEach(function(hdrExt) {
        var remoteExtensions = transceiver.remoteCapabilities &&
            transceiver.remoteCapabilities.headerExtensions || [];
        remoteExtensions.forEach(function(rHdrExt) {
          if (hdrExt.uri === rHdrExt.uri) {
            hdrExt.id = rHdrExt.id;
          }
        });
      });

      // generate an ssrc now, to be used later in rtpSender.send
      var sendEncodingParameters = transceiver.sendEncodingParameters || [{
        ssrc: (2 * sdpMLineIndex + 1) * 1001
      }];
      if (track) {
        // add RTX
        if (edgeVersion >= 15019 && kind === 'video' &&
            !sendEncodingParameters[0].rtx) {
          sendEncodingParameters[0].rtx = {
            ssrc: sendEncodingParameters[0].ssrc + 1
          };
        }
      }

      if (transceiver.wantReceive) {
        transceiver.rtpReceiver = new window.RTCRtpReceiver(
            transceiver.dtlsTransport, kind);
      }

      transceiver.localCapabilities = localCapabilities;
      transceiver.sendEncodingParameters = sendEncodingParameters;
    });

    // always offer BUNDLE and dispose on return if not supported.
    if (pc._config.bundlePolicy !== 'max-compat') {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    sdp += 'a=ice-options:trickle\r\n';

    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,
          'offer', transceiver.stream, pc._dtlsRole);
      sdp += 'a=rtcp-rsize\r\n';

      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&
          (sdpMLineIndex === 0 || !pc.usingBundle)) {
        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {
          cand.component = 1;
          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\r\n';
        });

        if (transceiver.iceGatherer.state === 'completed') {
          sdp += 'a=end-of-candidates\r\n';
        }
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'offer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.createAnswer = function() {
    var pc = this;

    if (pc._isClosed) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer after close'));
    }

    if (!(pc.signalingState === 'have-remote-offer' ||
        pc.signalingState === 'have-local-pranswer')) {
      return Promise.reject(makeError('InvalidStateError',
          'Can not call createAnswer in signalingState ' + pc.signalingState));
    }

    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,
        pc._sdpSessionVersion++);
    if (pc.usingBundle) {
      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {
        return t.mid;
      }).join(' ') + '\r\n';
    }
    var mediaSectionsInOffer = SDPUtils.getMediaSections(
        pc._remoteDescription.sdp).length;
    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {
      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {
        return;
      }
      if (transceiver.rejected) {
        if (transceiver.kind === 'application') {
          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt
            sdp += 'm=application 0 DTLS/SCTP 5000\r\n';
          } else {
            sdp += 'm=application 0 ' + transceiver.protocol +
                ' webrtc-datachannel\r\n';
          }
        } else if (transceiver.kind === 'audio') {
          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\r\n' +
              'a=rtpmap:0 PCMU/8000\r\n';
        } else if (transceiver.kind === 'video') {
          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\r\n' +
              'a=rtpmap:120 VP8/90000\r\n';
        }
        sdp += 'c=IN IP4 0.0.0.0\r\n' +
            'a=inactive\r\n' +
            'a=mid:' + transceiver.mid + '\r\n';
        return;
      }

      // FIXME: look at direction.
      if (transceiver.stream) {
        var localTrack;
        if (transceiver.kind === 'audio') {
          localTrack = transceiver.stream.getAudioTracks()[0];
        } else if (transceiver.kind === 'video') {
          localTrack = transceiver.stream.getVideoTracks()[0];
        }
        if (localTrack) {
          // add RTX
          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&
              !transceiver.sendEncodingParameters[0].rtx) {
            transceiver.sendEncodingParameters[0].rtx = {
              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1
            };
          }
        }
      }

      // Calculate intersection of capabilities.
      var commonCapabilities = getCommonCapabilities(
          transceiver.localCapabilities,
          transceiver.remoteCapabilities);

      var hasRtx = commonCapabilities.codecs.filter(function(c) {
        return c.name.toLowerCase() === 'rtx';
      }).length;
      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
        delete transceiver.sendEncodingParameters[0].rtx;
      }

      sdp += writeMediaSection(transceiver, commonCapabilities,
          'answer', transceiver.stream, pc._dtlsRole);
      if (transceiver.rtcpParameters &&
          transceiver.rtcpParameters.reducedSize) {
        sdp += 'a=rtcp-rsize\r\n';
      }
    });

    var desc = new window.RTCSessionDescription({
      type: 'answer',
      sdp: sdp
    });
    return Promise.resolve(desc);
  };

  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
    var pc = this;
    var sections;
    if (candidate && !(candidate.sdpMLineIndex !== undefined ||
        candidate.sdpMid)) {
      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));
    }

    // TODO: needs to go into ops queue.
    return new Promise(function(resolve, reject) {
      if (!pc._remoteDescription) {
        return reject(makeError('InvalidStateError',
            'Can not add ICE candidate without a remote description'));
      } else if (!candidate || candidate.candidate === '') {
        for (var j = 0; j < pc.transceivers.length; j++) {
          if (pc.transceivers[j].rejected) {
            continue;
          }
          pc.transceivers[j].iceTransport.addRemoteCandidate({});
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[j] += 'a=end-of-candidates\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
          if (pc.usingBundle) {
            break;
          }
        }
      } else {
        var sdpMLineIndex = candidate.sdpMLineIndex;
        if (candidate.sdpMid) {
          for (var i = 0; i < pc.transceivers.length; i++) {
            if (pc.transceivers[i].mid === candidate.sdpMid) {
              sdpMLineIndex = i;
              break;
            }
          }
        }
        var transceiver = pc.transceivers[sdpMLineIndex];
        if (transceiver) {
          if (transceiver.rejected) {
            return resolve();
          }
          var cand = Object.keys(candidate.candidate).length > 0 ?
              SDPUtils.parseCandidate(candidate.candidate) : {};
          // Ignore Chrome's invalid candidates since Edge does not like them.
          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
            return resolve();
          }
          // Ignore RTCP candidates, we assume RTCP-MUX.
          if (cand.component && cand.component !== 1) {
            return resolve();
          }
          // when using bundle, avoid adding candidates to the wrong
          // ice transport. And avoid adding candidates added in the SDP.
          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&
              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {
            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {
              return reject(makeError('OperationError',
                  'Can not add ICE candidate'));
            }
          }

          // update the remoteDescription.
          var candidateString = candidate.candidate.trim();
          if (candidateString.indexOf('a=') === 0) {
            candidateString = candidateString.substr(2);
          }
          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);
          sections[sdpMLineIndex] += 'a=' +
              (cand.type ? candidateString : 'end-of-candidates')
              + '\r\n';
          pc._remoteDescription.sdp =
              SDPUtils.getDescription(pc._remoteDescription.sdp) +
              sections.join('');
        } else {
          return reject(makeError('OperationError',
              'Can not add ICE candidate'));
        }
      }
      resolve();
    });
  };

  RTCPeerConnection.prototype.getStats = function(selector) {
    if (selector && selector instanceof window.MediaStreamTrack) {
      var senderOrReceiver = null;
      this.transceivers.forEach(function(transceiver) {
        if (transceiver.rtpSender &&
            transceiver.rtpSender.track === selector) {
          senderOrReceiver = transceiver.rtpSender;
        } else if (transceiver.rtpReceiver &&
            transceiver.rtpReceiver.track === selector) {
          senderOrReceiver = transceiver.rtpReceiver;
        }
      });
      if (!senderOrReceiver) {
        throw makeError('InvalidAccessError', 'Invalid selector.');
      }
      return senderOrReceiver.getStats();
    }

    var promises = [];
    this.transceivers.forEach(function(transceiver) {
      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
          'dtlsTransport'].forEach(function(method) {
            if (transceiver[method]) {
              promises.push(transceiver[method].getStats());
            }
          });
    });
    return Promise.all(promises).then(function(allStats) {
      var results = new Map();
      allStats.forEach(function(stats) {
        stats.forEach(function(stat) {
          results.set(stat.id, stat);
        });
      });
      return results;
    });
  };

  // fix low-level stat names and return Map instead of object.
  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',
    'RTCIceTransport', 'RTCDtlsTransport'];
  ortcObjects.forEach(function(ortcObjectName) {
    var obj = window[ortcObjectName];
    if (obj && obj.prototype && obj.prototype.getStats) {
      var nativeGetstats = obj.prototype.getStats;
      obj.prototype.getStats = function() {
        return nativeGetstats.apply(this)
        .then(function(nativeStats) {
          var mapStats = new Map();
          Object.keys(nativeStats).forEach(function(id) {
            nativeStats[id].type = fixStatsType(nativeStats[id]);
            mapStats.set(id, nativeStats[id]);
          });
          return mapStats;
        });
      };
    }
  });

  // legacy callback shims. Should be moved to adapter.js some days.
  var methods = ['createOffer', 'createAnswer'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[0] === 'function' ||
          typeof args[1] === 'function') { // legacy
        return nativeMethod.apply(this, [arguments[2]])
        .then(function(description) {
          if (typeof args[0] === 'function') {
            args[0].apply(null, [description]);
          }
        }, function(error) {
          if (typeof args[1] === 'function') {
            args[1].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];
  methods.forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function' ||
          typeof args[2] === 'function') { // legacy
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        }, function(error) {
          if (typeof args[2] === 'function') {
            args[2].apply(null, [error]);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  // getStats is special. It doesn't have a spec legacy method yet we support
  // getStats(something, cb) without error callbacks.
  ['getStats'].forEach(function(method) {
    var nativeMethod = RTCPeerConnection.prototype[method];
    RTCPeerConnection.prototype[method] = function() {
      var args = arguments;
      if (typeof args[1] === 'function') {
        return nativeMethod.apply(this, arguments)
        .then(function() {
          if (typeof args[1] === 'function') {
            args[1].apply(null);
          }
        });
      }
      return nativeMethod.apply(this, arguments);
    };
  });

  return RTCPeerConnection;
};


/***/ }),

/***/ "./node_modules/sdp-transform/lib/grammar.js":
/*!***************************************************!*\
  !*** ./node_modules/sdp-transform/lib/grammar.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var grammar = module.exports = {
  v: [{
    name: 'version',
    reg: /^(\d*)$/
  }],
  o: [{ //o=- 20518 0 IN IP4 203.0.113.1
    // NB: sessionId will be a String in most cases because it is huge
    name: 'origin',
    reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],
    format: '%s %s %d %s IP%d %s'
  }],
  // default parsing of these only (though some of these feel outdated)
  s: [{ name: 'name' }],
  i: [{ name: 'description' }],
  u: [{ name: 'uri' }],
  e: [{ name: 'email' }],
  p: [{ name: 'phone' }],
  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..
  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly
  //k: [{}], // outdated thing ignored
  t: [{ //t=0 0
    name: 'timing',
    reg: /^(\d*) (\d*)/,
    names: ['start', 'stop'],
    format: '%d %d'
  }],
  c: [{ //c=IN IP4 10.47.197.26
    name: 'connection',
    reg: /^IN IP(\d) (\S*)/,
    names: ['version', 'ip'],
    format: 'IN IP%d %s'
  }],
  b: [{ //b=AS:4000
    push: 'bandwidth',
    reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
    names: ['type', 'limit'],
    format: '%s:%s'
  }],
  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31
    // NB: special - pushes to session
    // TODO: rtp/fmtp should be filtered by the payloads found here?
    reg: /^(\w*) (\d*) ([\w\/]*)(?: (.*))?/,
    names: ['type', 'port', 'protocol', 'payloads'],
    format: '%s %d %s %s'
  }],
  a: [
    { //a=rtpmap:110 opus/48000/2
      push: 'rtp',
      reg: /^rtpmap:(\d*) ([\w\-\.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
      names: ['payload', 'codec', 'rate', 'encoding'],
      format: function (o) {
        return (o.encoding) ?
          'rtpmap:%d %s/%s/%s':
          o.rate ?
          'rtpmap:%d %s/%s':
          'rtpmap:%d %s';
      }
    },
    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000
      //a=fmtp:111 minptime=10; useinbandfec=1
      push: 'fmtp',
      reg: /^fmtp:(\d*) ([\S| ]*)/,
      names: ['payload', 'config'],
      format: 'fmtp:%d %s'
    },
    { //a=control:streamid=0
      name: 'control',
      reg: /^control:(.*)/,
      format: 'control:%s'
    },
    { //a=rtcp:65179 IN IP4 193.84.77.194
      name: 'rtcp',
      reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
      names: ['port', 'netType', 'ipVer', 'address'],
      format: function (o) {
        return (o.address != null) ?
          'rtcp:%d %s IP%d %s':
          'rtcp:%d';
      }
    },
    { //a=rtcp-fb:98 trr-int 100
      push: 'rtcpFbTrrInt',
      reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
      names: ['payload', 'value'],
      format: 'rtcp-fb:%d trr-int %d'
    },
    { //a=rtcp-fb:98 nack rpsi
      push: 'rtcpFb',
      reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
      names: ['payload', 'type', 'subtype'],
      format: function (o) {
        return (o.subtype != null) ?
          'rtcp-fb:%s %s %s':
          'rtcp-fb:%s %s';
      }
    },
    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
      //a=extmap:1/recvonly URI-gps-string
      push: 'ext',
      reg: /^extmap:(\d+)(?:\/(\w+))? (\S*)(?: (\S*))?/,
      names: ['value', 'direction', 'uri', 'config'],
      format: function (o) {
        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');
      }
    },
    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32
      push: 'crypto',
      reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
      names: ['id', 'suite', 'config', 'sessionConfig'],
      format: function (o) {
        return (o.sessionConfig != null) ?
          'crypto:%d %s %s %s':
          'crypto:%d %s %s';
      }
    },
    { //a=setup:actpass
      name: 'setup',
      reg: /^setup:(\w*)/,
      format: 'setup:%s'
    },
    { //a=mid:1
      name: 'mid',
      reg: /^mid:([^\s]*)/,
      format: 'mid:%s'
    },
    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a
      name: 'msid',
      reg: /^msid:(.*)/,
      format: 'msid:%s'
    },
    { //a=ptime:20
      name: 'ptime',
      reg: /^ptime:(\d*)/,
      format: 'ptime:%d'
    },
    { //a=maxptime:60
      name: 'maxptime',
      reg: /^maxptime:(\d*)/,
      format: 'maxptime:%d'
    },
    { //a=sendrecv
      name: 'direction',
      reg: /^(sendrecv|recvonly|sendonly|inactive)/
    },
    { //a=ice-lite
      name: 'icelite',
      reg: /^(ice-lite)/
    },
    { //a=ice-ufrag:F7gI
      name: 'iceUfrag',
      reg: /^ice-ufrag:(\S*)/,
      format: 'ice-ufrag:%s'
    },
    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g
      name: 'icePwd',
      reg: /^ice-pwd:(\S*)/,
      format: 'ice-pwd:%s'
    },
    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33
      name: 'fingerprint',
      reg: /^fingerprint:(\S*) (\S*)/,
      names: ['type', 'hash'],
      format: 'fingerprint:%s %s'
    },
    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host
      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10
      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10
      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10
      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10
      push:'candidates',
      reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],
      format: function (o) {
        var str = 'candidate:%s %d %s %d %s %d typ %s';

        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';

        // NB: candidate has three optional chunks, so %void middles one if it's missing
        str += (o.tcptype != null) ? ' tcptype %s' : '%v';

        if (o.generation != null) {
          str += ' generation %d';
        }

        str += (o['network-id'] != null) ? ' network-id %d' : '%v';
        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';
        return str;
      }
    },
    { //a=end-of-candidates (keep after the candidates line for readability)
      name: 'endOfCandidates',
      reg: /^(end-of-candidates)/
    },
    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...
      name: 'remoteCandidates',
      reg: /^remote-candidates:(.*)/,
      format: 'remote-candidates:%s'
    },
    { //a=ice-options:google-ice
      name: 'iceOptions',
      reg: /^ice-options:(\S*)/,
      format: 'ice-options:%s'
    },
    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1
      push: 'ssrcs',
      reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
      names: ['id', 'attribute', 'value'],
      format: function (o) {
        var str = 'ssrc:%d';
        if (o.attribute != null) {
          str += ' %s';
          if (o.value != null) {
            str += ':%s';
          }
        }
        return str;
      }
    },
    { //a=ssrc-group:FEC 1 2
      //a=ssrc-group:FEC-FR 3004364195 1080772241
      push: 'ssrcGroups',
      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E
      reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
      names: ['semantics', 'ssrcs'],
      format: 'ssrc-group:%s %s'
    },
    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV
      name: 'msidSemantic',
      reg: /^msid-semantic:\s?(\w*) (\S*)/,
      names: ['semantic', 'token'],
      format: 'msid-semantic: %s %s' // space after ':' is not accidental
    },
    { //a=group:BUNDLE audio video
      push: 'groups',
      reg: /^group:(\w*) (.*)/,
      names: ['type', 'mids'],
      format: 'group:%s %s'
    },
    { //a=rtcp-mux
      name: 'rtcpMux',
      reg: /^(rtcp-mux)/
    },
    { //a=rtcp-rsize
      name: 'rtcpRsize',
      reg: /^(rtcp-rsize)/
    },
    { //a=sctpmap:5000 webrtc-datachannel 1024
      name: 'sctpmap',
      reg: /^sctpmap:([\w_\/]*) (\S*)(?: (\S*))?/,
      names: ['sctpmapNumber', 'app', 'maxMessageSize'],
      format: function (o) {
        return (o.maxMessageSize != null) ?
          'sctpmap:%s %s %s' :
          'sctpmap:%s %s';
      }
    },
    { //a=x-google-flag:conference
      name: 'xGoogleFlag',
      reg: /^x-google-flag:([^\s]*)/,
      format: 'x-google-flag:%s'
    },
    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0
      push: 'rids',
      reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
      names: ['id', 'direction', 'params'],
      format: function (o) {
        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';
      }
    },
    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]
      //a=imageattr:* send [x=800,y=640] recv *
      //a=imageattr:100 recv [x=320,y=240]
      push: 'imageattrs',
      reg: new RegExp(
        //a=imageattr:97
        '^imageattr:(\\d+|\\*)' +
        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]
        '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
        //recv [x=330,y=250]
        '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?'
      ),
      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
      format: function (o) {
        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
      }
    },
    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8
      //a=simulcast:recv 1;4,5 send 6;7
      name: 'simulcast',
      reg: new RegExp(
        //a=simulcast:
        '^simulcast:' +
        //send 1,2,3;~4,~5
        '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
        //space + recv 6;~7,~8
        '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
        //end
        '$'
      ),
      names: ['dir1', 'list1', 'dir2', 'list2'],
      format: function (o) {
        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
      }
    },
    { //Old simulcast draft 03 (implemented by Firefox)
      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03
      //a=simulcast: recv pt=97;98 send pt=97
      //a=simulcast: send rid=5;6;7 paused=6,7
      name: 'simulcast_03',
      reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
      names: ['value'],
      format: 'simulcast: %s'
    },
    {
      //a=framerate:25
      //a=framerate:29.97
      name: 'framerate',
      reg: /^framerate:(\d+(?:$|\.\d+))/,
      format: 'framerate:%s'
    },
    { // RFC4570
      //a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5
      name: 'sourceFilter',
      reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],
      format: 'source-filter: %s %s %s %s %s'
    },
    { // any a= that we don't understand is kepts verbatim on media.invalid
      push: 'invalid',
      names: ['value']
    }
  ]
};

// set sensible defaults to avoid polluting the grammar with boring details
Object.keys(grammar).forEach(function (key) {
  var objs = grammar[key];
  objs.forEach(function (obj) {
    if (!obj.reg) {
      obj.reg = /(.*)/;
    }
    if (!obj.format) {
      obj.format = '%s';
    }
  });
});


/***/ }),

/***/ "./node_modules/sdp-transform/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/sdp-transform/lib/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var parser = __webpack_require__(/*! ./parser */ "./node_modules/sdp-transform/lib/parser.js");
var writer = __webpack_require__(/*! ./writer */ "./node_modules/sdp-transform/lib/writer.js");

exports.write = writer;
exports.parse = parser.parse;
exports.parseFmtpConfig = parser.parseFmtpConfig;
exports.parseParams = parser.parseParams;
exports.parsePayloads = parser.parsePayloads;
exports.parseRemoteCandidates = parser.parseRemoteCandidates;
exports.parseImageAttributes = parser.parseImageAttributes;
exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;


/***/ }),

/***/ "./node_modules/sdp-transform/lib/parser.js":
/*!**************************************************!*\
  !*** ./node_modules/sdp-transform/lib/parser.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toIntIfInt = function (v) {
  return String(Number(v)) === v ? Number(v) : v;
};

var attachProperties = function (match, location, names, rawName) {
  if (rawName && !names) {
    location[rawName] = toIntIfInt(match[1]);
  }
  else {
    for (var i = 0; i < names.length; i += 1) {
      if (match[i+1] != null) {
        location[names[i]] = toIntIfInt(match[i+1]);
      }
    }
  }
};

var parseReg = function (obj, location, content) {
  var needsBlank = obj.name && obj.names;
  if (obj.push && !location[obj.push]) {
    location[obj.push] = [];
  }
  else if (needsBlank && !location[obj.name]) {
    location[obj.name] = {};
  }
  var keyLocation = obj.push ?
    {} :  // blank object that will be pushed
    needsBlank ? location[obj.name] : location; // otherwise, named location or root

  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

  if (obj.push) {
    location[obj.push].push(keyLocation);
  }
};

var grammar = __webpack_require__(/*! ./grammar */ "./node_modules/sdp-transform/lib/grammar.js");
var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

exports.parse = function (sdp) {
  var session = {}
    , media = []
    , location = session; // points at where properties go under (one of the above)

  // parse lines we understand
  sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function (l) {
    var type = l[0];
    var content = l.slice(2);
    if (type === 'm') {
      media.push({rtp: [], fmtp: []});
      location = media[media.length-1]; // point at latest media line
    }

    for (var j = 0; j < (grammar[type] || []).length; j += 1) {
      var obj = grammar[type][j];
      if (obj.reg.test(content)) {
        return parseReg(obj, location, content);
      }
    }
  });

  session.media = media; // link it up
  return session;
};

var paramReducer = function (acc, expr) {
  var s = expr.split(/=(.+)/, 2);
  if (s.length === 2) {
    acc[s[0]] = toIntIfInt(s[1]);
  } else if (s.length === 1 && expr.length > 1) {
    acc[s[0]] = undefined;
  }
  return acc;
};

exports.parseParams = function (str) {
  return str.split(/\;\s?/).reduce(paramReducer, {});
};

// For backward compatibility - alias will be removed in 3.0.0
exports.parseFmtpConfig = exports.parseParams;

exports.parsePayloads = function (str) {
  return str.split(' ').map(Number);
};

exports.parseRemoteCandidates = function (str) {
  var candidates = [];
  var parts = str.split(' ').map(toIntIfInt);
  for (var i = 0; i < parts.length; i += 3) {
    candidates.push({
      component: parts[i],
      ip: parts[i + 1],
      port: parts[i + 2]
    });
  }
  return candidates;
};

exports.parseImageAttributes = function (str) {
  return str.split(' ').map(function (item) {
    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});
  });
};

exports.parseSimulcastStreamList = function (str) {
  return str.split(';').map(function (stream) {
    return stream.split(',').map(function (format) {
      var scid, paused = false;

      if (format[0] !== '~') {
        scid = toIntIfInt(format);
      } else {
        scid = toIntIfInt(format.substring(1, format.length));
        paused = true;
      }

      return {
        scid: scid,
        paused: paused
      };
    });
  });
};


/***/ }),

/***/ "./node_modules/sdp-transform/lib/writer.js":
/*!**************************************************!*\
  !*** ./node_modules/sdp-transform/lib/writer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var grammar = __webpack_require__(/*! ./grammar */ "./node_modules/sdp-transform/lib/grammar.js");

// customized util.format - discards excess arguments and can void middle ones
var formatRegExp = /%[sdv%]/g;
var format = function (formatStr) {
  var i = 1;
  var args = arguments;
  var len = args.length;
  return formatStr.replace(formatRegExp, function (x) {
    if (i >= len) {
      return x; // missing argument
    }
    var arg = args[i];
    i += 1;
    switch (x) {
    case '%%':
      return '%';
    case '%s':
      return String(arg);
    case '%d':
      return Number(arg);
    case '%v':
      return '';
    }
  });
  // NB: we discard excess arguments - they are typically undefined from makeLine
};

var makeLine = function (type, obj, location) {
  var str = obj.format instanceof Function ?
    (obj.format(obj.push ? location : location[obj.name])) :
    obj.format;

  var args = [type + '=' + str];
  if (obj.names) {
    for (var i = 0; i < obj.names.length; i += 1) {
      var n = obj.names[i];
      if (obj.name) {
        args.push(location[obj.name][n]);
      }
      else { // for mLine and push attributes
        args.push(location[obj.names[i]]);
      }
    }
  }
  else {
    args.push(location[obj.name]);
  }
  return format.apply(null, args);
};

// RFC specified order
// TODO: extend this with all the rest
var defaultOuterOrder = [
  'v', 'o', 's', 'i',
  'u', 'e', 'p', 'c',
  'b', 't', 'r', 'z', 'a'
];
var defaultInnerOrder = ['i', 'c', 'b', 'a'];


module.exports = function (session, opts) {
  opts = opts || {};
  // ensure certain properties exist
  if (session.version == null) {
    session.version = 0; // 'v=0' must be there (only defined version atm)
  }
  if (session.name == null) {
    session.name = ' '; // 's= ' must be there if no meaningful name set
  }
  session.media.forEach(function (mLine) {
    if (mLine.payloads == null) {
      mLine.payloads = '';
    }
  });

  var outerOrder = opts.outerOrder || defaultOuterOrder;
  var innerOrder = opts.innerOrder || defaultInnerOrder;
  var sdp = [];

  // loop through outerOrder for matching properties on session
  outerOrder.forEach(function (type) {
    grammar[type].forEach(function (obj) {
      if (obj.name in session && session[obj.name] != null) {
        sdp.push(makeLine(type, obj, session));
      }
      else if (obj.push in session && session[obj.push] != null) {
        session[obj.push].forEach(function (el) {
          sdp.push(makeLine(type, obj, el));
        });
      }
    });
  });

  // then for each media line, follow the innerOrder
  session.media.forEach(function (mLine) {
    sdp.push(makeLine('m', grammar.m[0], mLine));

    innerOrder.forEach(function (type) {
      grammar[type].forEach(function (obj) {
        if (obj.name in mLine && mLine[obj.name] != null) {
          sdp.push(makeLine(type, obj, mLine));
        }
        else if (obj.push in mLine && mLine[obj.push] != null) {
          mLine[obj.push].forEach(function (el) {
            sdp.push(makeLine(type, obj, el));
          });
        }
      });
    });
  });

  return sdp.join('\r\n') + '\r\n';
};


/***/ }),

/***/ "./node_modules/sdp/sdp.js":
/*!*********************************!*\
  !*** ./node_modules/sdp/sdp.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* eslint-env node */


// SDP helpers.
var SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substr(2, 10);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(function(line) {
    return line.trim();
  });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  var parts = blob.split('\nm=');
  return parts.map(function(part, index) {
    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
  });
};

// returns the session description.
SDPUtils.getDescription = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  var sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(function(line) {
    return line.indexOf(prefix) === 0;
  });
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
SDPUtils.parseCandidate = function(line) {
  var parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  var candidate = {
    foundation: parts[0],
    component: parseInt(parts[1], 10),
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7]
  };

  for (var i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compability.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag
        candidate[parts[i]] = parts[i + 1];
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
SDPUtils.writeCandidate = function(candidate) {
  var sdp = [];
  sdp.push(candidate.foundation);
  sdp.push(candidate.component);
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.ip);
  sdp.push(candidate.port);

  var type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substr(14).split(' ');
};

// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  var parts = line.substr(9).split(' ');
  var parsed = {
    payloadType: parseInt(parts.shift(), 10) // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generate an a=rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  var channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  var parts = line.substr(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1]
  };
};

// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
          ? '/' + headerExtension.direction
          : '') +
      ' ' + headerExtension.uri + '\r\n';
};

// Parses an ftmp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  var parsed = {};
  var kv;
  var parts = line.substr(line.indexOf(' ') + 1).split(';');
  for (var j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  var line = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    var params = [];
    Object.keys(codec.parameters).forEach(function(param) {
      if (codec.parameters[param]) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' ')
  };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  var lines = '';
  var pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses an RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  var sp = line.indexOf(' ');
  var parts = {
    ssrc: parseInt(line.substr(7, sp - 7), 10)
  };
  var colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substr(sp + 1, colon - sp - 1);
    parts.value = line.substr(colon + 1);
  } else {
    parts.attribute = line.substr(sp + 1);
  }
  return parts;
};

SDPUtils.parseSsrcGroup = function(line) {
  var parts = line.substr(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(function(ssrc) {
      return parseInt(ssrc, 10);
    })
  };
};

// Extracts the MID (RFC 5888) from a media section.
// returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substr(6);
  }
};

SDPUtils.parseFingerprint = function(line) {
  var parts = line.substr(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1]
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
      'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role.
  // Note2: 'algorithm' is not case sensitive except in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint)
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  var sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(function(fp) {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};
// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  var lines = SDPUtils.splitLines(mediaSection);
  // Search in session part, too.
  lines = lines.concat(SDPUtils.splitLines(sessionpart));
  var iceParameters = {
    usernameFragment: lines.filter(function(line) {
      return line.indexOf('a=ice-ufrag:') === 0;
    })[0].substr(12),
    password: lines.filter(function(line) {
      return line.indexOf('a=ice-pwd:') === 0;
    })[0].substr(10)
  };
  return iceParameters;
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  var description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: []
  };
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    var pt = mline[i];
    var rtpmapline = SDPUtils.matchPrefix(
        mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      var codec = SDPUtils.parseRtpMap(rtpmapline);
      var fmtps = SDPUtils.matchPrefix(
          mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
          mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  var sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(function(codec) {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(function(codec) {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  var maxptime = 0;
  caps.codecs.forEach(function(codec) {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }
  sdp += 'a=rtcp-mux\r\n';

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(function(extension) {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  var encodingParameters = [];
  var description = SDPUtils.parseRtpParameters(mediaSection);
  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
  .map(function(line) {
    return SDPUtils.parseSsrcMedia(line);
  })
  .filter(function(parts) {
    return parts.attribute === 'cname';
  });
  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  var secondarySsrc;

  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
  .map(function(line) {
    var parts = line.substr(17).split(' ');
    return parts.map(function(part) {
      return parseInt(part, 10);
    });
  });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(function(codec) {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      var encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10)
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: secondarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substr(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(function(params) {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  var rtcpParameters = {};

  // Gets the first SSRC. Note tha with RTX there might be multiple
  // SSRCs.
  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
      .map(function(line) {
        return SDPUtils.parseSsrcMedia(line);
      })
      .filter(function(obj) {
        return obj.attribute === 'cname';
      })[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  var parts;
  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substr(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
  .map(function(line) {
    return SDPUtils.parseSsrcMedia(line);
  })
  .filter(function(msidParts) {
    return msidParts.attribute === 'msid';
  });
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 21);
};

// Write boilder plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer) {
  var sessionId;
  var version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=thisisadapterortc ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

  // Map ICE parameters (ufrag, pwd) to SDP.
  sdp += SDPUtils.writeIceParameters(
      transceiver.iceGatherer.getLocalParameters());

  // Map DTLS parameters to SDP.
  sdp += SDPUtils.writeDtlsParameters(
      transceiver.dtlsTransport.getLocalParameters(),
      type === 'offer' ? 'actpass' : 'active');

  sdp += 'a=mid:' + transceiver.mid + '\r\n';

  if (transceiver.direction) {
    sdp += 'a=' + transceiver.direction + '\r\n';
  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
    sdp += 'a=sendrecv\r\n';
  } else if (transceiver.rtpSender) {
    sdp += 'a=sendonly\r\n';
  } else if (transceiver.rtpReceiver) {
    sdp += 'a=recvonly\r\n';
  } else {
    sdp += 'a=inactive\r\n';
  }

  if (transceiver.rtpSender) {
    // spec.
    var msid = 'msid:' + stream.id + ' ' +
        transceiver.rtpSender.track.id + '\r\n';
    sdp += 'a=' + msid;

    // for Chrome.
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
        ' ' + msid;
    if (transceiver.sendEncodingParameters[0].rtx) {
      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
          ' ' + msid;
      sdp += 'a=ssrc-group:FID ' +
          transceiver.sendEncodingParameters[0].ssrc + ' ' +
          transceiver.sendEncodingParameters[0].rtx.ssrc +
          '\r\n';
    }
  }
  // FIXME: this should be written by writeRtpDescription.
  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
      ' cname:' + SDPUtils.localCName + '\r\n';
  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
        ' cname:' + SDPUtils.localCName + '\r\n';
  }
  return sdp;
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  var lines = SDPUtils.splitLines(mediaSection);
  for (var i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substr(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var mline = lines[0].split(' ');
  return mline[0].substr(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  var lines = SDPUtils.splitLines(mediaSection);
  var parts = lines[0].substr(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' ')
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  var parts = line.substr(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5]
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  var lines = SDPUtils.splitLines(blob);
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ }),

/***/ "./node_modules/semver-parser/index.js":
/*!*********************************************!*\
  !*** ./node_modules/semver-parser/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * index.js
 * @see {@link http://semver.org/|Semantic Versioning}
 * @see {@link https://github.com/mojombo/semver/|mojombo/semver}
 */

/* api */
const {getType, isString} = __webpack_require__(/*! ./modules/common */ "./node_modules/semver-parser/modules/common.js");

/* constants */
const BASE = 10;
const INT = "(?:0|[1-9]\\d*)";
const ALPHA_NUM = "\\d*[A-z-][A-z\\d-]*";
const PRE_PART = `(?:${ALPHA_NUM}|${INT})`;
const PRE = `${PRE_PART}(?:\\.${PRE_PART})*`;
const BUILD_PART = `(?:${ALPHA_NUM}|\\d+)`;
const BUILD = `${BUILD_PART}(?:\\.${BUILD_PART})*`;
const SEMVER = `(${INT}(?:\\.${INT}){2})(?:-(${PRE}))?(?:\\+(${BUILD}))?`;
const REGEXP_INT = new RegExp(`^${INT}$`);
const REGEXP_SEMVER = new RegExp(`^v?${SEMVER}$`);
const REGEXP_SEMVER_STRICT = new RegExp(`^${SEMVER}$`);

/**
 * is valid SemVer string
 * @param {string} version - version string
 * @param {boolean} [strict] - reject "v" prefixed
 * @returns {boolean} - result
 */
const isValidSemVer = (version, strict = false) => {
  if (!isString(version)) {
    throw new TypeError(`Expected String but got ${getType(version)}`);
  }
  const reg = strict && REGEXP_SEMVER_STRICT || REGEXP_SEMVER;
  return reg.test(version);
};

/**
 * parse version part
 * @param {string} part - version part
 * @param {boolean} [nonPosInt] - accept non positive integer
 * @returns {string|number} - parsed version part
 */
const parseVersionPart = (part, nonPosInt = false) => {
  if (!isString(part)) {
    throw new TypeError(`Expected String but got ${getType(part)}.`);
  }
  if (!(nonPosInt || REGEXP_INT.test(part))) {
    throw new Error(`${part} is not a stringified positive integer.`);
  }
  if (REGEXP_INT.test(part)) {
    part = parseInt(part, BASE);
    if (Number.isNaN(part)) {
      throw new TypeError(`${part} is not a Number.`);
    }
    if (!Number.isSafeInteger(part)) {
      throw new RangeError(`${part} exceeds ${Number.MAX_SAFE_INTEGER}.`);
    }
  }
  return part;
};

/**
 * compare SemVer
 * @param {string} version - version string
 * @param {string} base - base version string to compare from
 * @param {boolean} [strict] - reject "v" prefixed
 * @returns {number}
 *   - -1 or negative number, if version is less than base version
 *     0, if version is equal to base version
 *     1 or positive number, if version is greater than base version
 */
const compareSemVer = (version, base, strict = false) => {
  if (!isString(version)) {
    throw new TypeError(`Expected String but got ${getType(version)}`);
  }
  if (!isString(base)) {
    throw new TypeError(`Expected String but got ${getType(base)}`);
  }
  if (!isValidSemVer(version, !!strict)) {
    throw new Error(`${version} is not valid version string.`);
  }
  if (!isValidSemVer(base, !!strict)) {
    throw new Error(`${base} is not valid version string.`);
  }
  let result;
  if (version === base) {
    result = 0;
  } else {
    const reg = strict && REGEXP_SEMVER_STRICT || REGEXP_SEMVER;
    const [, vRel, vPre] = version.match(reg);
    const [, bRel, bPre] = base.match(reg);
    const [vMajor, vMinor, vPatch] = vRel.split(".").map(parseVersionPart);
    const [bMajor, bMinor, bPatch] = bRel.split(".").map(parseVersionPart);
    if (vMajor > bMajor) {
      result = 1;
    } else if (vMajor < bMajor) {
      result = -1;
    } else if (vMinor > bMinor) {
      result = 1;
    } else if (vMinor < bMinor) {
      result = -1;
    } else if (vPatch > bPatch) {
      result = 1;
    } else if (vPatch < bPatch) {
      result = -1;
    } else if (vPre === bPre) {
      result = 0;
    } else if (!vPre && bPre) {
      result = 1;
    } else if (vPre && !bPre) {
      result = -1;
    } else {
      const vPreParts = vPre.split(".").map(part =>
        parseVersionPart(part, true)
      );
      const bPreParts = bPre.split(".").map(part =>
        parseVersionPart(part, true)
      );
      const l = Math.max(vPreParts.length, bPreParts.length);
      let i = 0;
      while (i < l) {
        const vPart = vPreParts[i];
        const bPart = bPreParts[i];
        if (vPart && !bPart || isString(vPart) && Number.isInteger(bPart)) {
          result = 1;
        } else if (!vPart && bPart ||
                   Number.isInteger(vPart) && isString(bPart)) {
          result = -1;
        } else if (vPart !== bPart && isString(vPart) && isString(bPart)) {
          result = vPart.localeCompare(bPart);
        } else if (Number.isInteger(vPart) && Number.isInteger(bPart)) {
          if (vPart > bPart) {
            result = 1;
          } else if (vPart < bPart) {
            result = -1;
          }
        }
        if (Number.isInteger(result)) {
          break;
        }
        i++;
      }
    }
  }
  if (!Number.isInteger(result)) {
    throw new Error(`Failed to compare ${version} with ${base}.`);
  }
  return result;
};

/**
 * parse SemVer string
 * @param {string} version - version string
 * @param {boolean} [strict] - reject "v" prefixed
 * @returns {Object}
 *   - result which contains properties below
 *     version {string} - given version string
 *     matches {boolean} - matches SemVer format
 *     major {number|undefined} - major version
 *     minor {number|undefined} - minor version
 *     patch {number|undefined} - patch version
 *     pre {Array<string|number>|undefined} - pre release version in array
 *     build {Array<string|number>|undefined} - build ID in array
 */
const parseSemVer = (version, strict = false) => {
  if (!isString(version)) {
    throw new TypeError(`Expected String but got ${getType(version)}`);
  }
  const matches = isValidSemVer(version, !!strict);
  let major, minor, patch, pre, build;
  if (matches) {
    const reg = strict && REGEXP_SEMVER_STRICT || REGEXP_SEMVER;
    const [, vRel, vPre, vBuild] = version.match(reg);
    [major, minor, patch] = vRel.split(".").map(parseVersionPart);
    if (vPre) {
      pre = vPre.split(".").map(part => parseVersionPart(part, true));
    }
    if (vBuild) {
      build = vBuild.split(".").map(part => parseVersionPart(part, true));
    }
  }
  return {
    version, matches, major, minor, patch, pre, build,
  };
};

module.exports = {
  compareSemVer,
  isValidSemVer,
  parseSemVer,
  parseVersionPart,
};


/***/ }),

/***/ "./node_modules/semver-parser/modules/common.js":
/*!******************************************************!*\
  !*** ./node_modules/semver-parser/modules/common.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * common.js
 */

/* constants */
const TYPE_FROM = 8;
const TYPE_TO = -1;

/**
 * throw error
 * @param {!Object} e - Error
 * @throws - Error
 */
const throwErr = e => {
  throw e;
};

/**
 * log error
 * @param {!Object} e - Error
 * @returns {boolean} - false
 */
const logErr = e => {
  console.error(e);
  return false;
};

/**
 * log warn
 * @param {*} msg - message
 * @returns {boolean} - false
 */
const logWarn = msg => {
  msg && console.warn(msg);
  return false;
};

/**
 * log message
 * @param {*} msg - message
 * @returns {*} - message
 */
const logMsg = msg => {
  msg && console.log(msg);
  return msg;
};

/**
 * get type
 * @param {*} o - object to check
 * @returns {string} - type of object
 */
const getType = o =>
  Object.prototype.toString.call(o).slice(TYPE_FROM, TYPE_TO);

/**
 * is string
 * @param {*} o - object to check
 * @returns {boolean} - result
 */
const isString = o => typeof o === "string" || o instanceof String;

/**
 * stringify positive integer
 * @param {number} i - integer
 * @param {boolean} [zero] - treat 0 as a positive integer
 * @returns {?string} - stringified integer
 */
const stringifyPositiveInt = (i, zero = false) =>
  Number.isSafeInteger(i) && (zero && i >= 0 || i > 0) && `${i}` || null;

/**
 * parse stringified integer
 * @param {string} i - stringified integer
 * @param {boolean} [zero] - accept leading zero
 * @returns {number} - integer
 */
const parseStringifiedInt = (i, zero = false) => {
  if (!isString(i)) {
    throw new TypeError(`Expexted String but got ${getType(i)}`);
  }
  if (!zero && !/^-?(?:0|[1-9]\d*)$/.test(i)) {
    throw new Error(`${i} is not a stringified integer.`);
  }
  return parseInt(i);
};

/**
 * escape matching char
 * @param {string} str - argument
 * @param {RegExp} re - RegExp
 * @returns {?string} - string
 */
const escapeChar = (str, re) =>
  isString(str) && re && re.global &&
  str.replace(re, (m, c) => `\\${c}`) || null;

/**
 * strip HTML tags and decode HTML entities
 * @param {string} v - value
 * @returns {string} - converted value
 */
const stripHtmlTags = v => {
  while (/^\n*<(?:[^>]+:)?[^>]+?>|<\/(?:[^>]+:)?[^>]+>\n*$/.test(v)) {
    v = v.replace(/^\n*<(?:[^>]+:)?[^>]+?>/, "")
      .replace(/<\/(?:[^>]+:)?[^>]+>\n*$/, "\n");
  }
  return v.replace(/<\/(?:[^>]+:)?[^>]+>\n*<!--.*-->\n*<(?:[^>]+:)?[^>]+>/g, "\n\n")
    .replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, "\"")
    .replace(/&amp;/g, "&");
};

module.exports = {
  escapeChar, getType, isString, logErr, logMsg, logWarn, parseStringifiedInt,
  stringifyPositiveInt, stripHtmlTags, throwErr,
};


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/adapter_core.js":
/*!************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_core.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */



var adapterFactory = __webpack_require__(/*! ./adapter_factory.js */ "./node_modules/webrtc-adapter/src/js/adapter_factory.js");
module.exports = adapterFactory({window: global.window});

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/adapter_factory.js":
/*!***************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/adapter_factory.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */



var utils = __webpack_require__(/*! ./utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
// Shimming starts here.
module.exports = function(dependencies, opts) {
  var window = dependencies && dependencies.window;

  var options = {
    shimChrome: true,
    shimFirefox: true,
    shimEdge: true,
    shimSafari: true,
  };

  for (var key in opts) {
    if (hasOwnProperty.call(opts, key)) {
      options[key] = opts[key];
    }
  }

  // Utils.
  var logging = utils.log;
  var browserDetails = utils.detectBrowser(window);

  // Uncomment the line below if you want logging to occur, including logging
  // for the switch statement below. Can also be turned on in the browser via
  // adapter.disableLog(false), but then logging from the switch statement below
  // will not appear.
  // require('./utils').disableLog(false);

  // Browser shims.
  var chromeShim = __webpack_require__(/*! ./chrome/chrome_shim */ "./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js") || null;
  var edgeShim = __webpack_require__(/*! ./edge/edge_shim */ "./node_modules/webrtc-adapter/src/js/edge/edge_shim.js") || null;
  var firefoxShim = __webpack_require__(/*! ./firefox/firefox_shim */ "./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js") || null;
  var safariShim = __webpack_require__(/*! ./safari/safari_shim */ "./node_modules/webrtc-adapter/src/js/safari/safari_shim.js") || null;
  var commonShim = __webpack_require__(/*! ./common_shim */ "./node_modules/webrtc-adapter/src/js/common_shim.js") || null;

  // Export to the adapter global object visible in the browser.
  var adapter = {
    browserDetails: browserDetails,
    commonShim: commonShim,
    extractVersion: utils.extractVersion,
    disableLog: utils.disableLog,
    disableWarnings: utils.disableWarnings
  };

  // Shim browser if found.
  switch (browserDetails.browser) {
    case 'chrome':
      if (!chromeShim || !chromeShim.shimPeerConnection ||
          !options.shimChrome) {
        logging('Chrome shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming chrome.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = chromeShim;
      commonShim.shimCreateObjectURL(window);

      chromeShim.shimGetUserMedia(window);
      chromeShim.shimMediaStream(window);
      chromeShim.shimSourceObject(window);
      chromeShim.shimPeerConnection(window);
      chromeShim.shimOnTrack(window);
      chromeShim.shimAddTrackRemoveTrack(window);
      chromeShim.shimGetSendersWithDtmf(window);
      chromeShim.shimSenderReceiverGetStats(window);
      chromeShim.fixNegotiationNeeded(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'firefox':
      if (!firefoxShim || !firefoxShim.shimPeerConnection ||
          !options.shimFirefox) {
        logging('Firefox shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming firefox.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = firefoxShim;
      commonShim.shimCreateObjectURL(window);

      firefoxShim.shimGetUserMedia(window);
      firefoxShim.shimSourceObject(window);
      firefoxShim.shimPeerConnection(window);
      firefoxShim.shimOnTrack(window);
      firefoxShim.shimRemoveStream(window);
      firefoxShim.shimSenderGetStats(window);
      firefoxShim.shimReceiverGetStats(window);
      firefoxShim.shimRTCDataChannel(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'edge':
      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {
        logging('MS edge shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming edge.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = edgeShim;
      commonShim.shimCreateObjectURL(window);

      edgeShim.shimGetUserMedia(window);
      edgeShim.shimPeerConnection(window);
      edgeShim.shimReplaceTrack(window);

      // the edge shim implements the full RTCIceCandidate object.

      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    case 'safari':
      if (!safariShim || !options.shimSafari) {
        logging('Safari shim is not included in this adapter release.');
        return adapter;
      }
      logging('adapter.js shimming safari.');
      // Export to the adapter global object visible in the browser.
      adapter.browserShim = safariShim;
      commonShim.shimCreateObjectURL(window);

      safariShim.shimRTCIceServerUrls(window);
      safariShim.shimCreateOfferLegacy(window);
      safariShim.shimCallbacksAPI(window);
      safariShim.shimLocalStreamsAPI(window);
      safariShim.shimRemoteStreamsAPI(window);
      safariShim.shimTrackEventTransceiver(window);
      safariShim.shimGetUserMedia(window);

      commonShim.shimRTCIceCandidate(window);
      commonShim.shimMaxMessageSize(window);
      commonShim.shimSendThrowTypeError(window);
      break;
    default:
      logging('Unsupported browser!');
      break;
  }

  return adapter;
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */

var utils = __webpack_require__(/*! ../utils.js */ "./node_modules/webrtc-adapter/src/js/utils.js");
var logging = utils.log;

/* iterates the stats graph recursively. */
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach(function(name) {
    if (name.endsWith('Id')) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith('Ids')) {
      base[name].forEach(function(id) {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}

/* filter getStats for a sender/receiver track. */
function filterStats(result, track, outbound) {
  var streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';
  var filteredResult = new Map();
  if (track === null) {
    return filteredResult;
  }
  var trackStats = [];
  result.forEach(function(value) {
    if (value.type === 'track' &&
        value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach(function(trackStat) {
    result.forEach(function(stats) {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

module.exports = {
  shimGetUserMedia: __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js"),
  shimMediaStream: function(window) {
    window.MediaStream = window.MediaStream || window.webkitMediaStream;
  },

  shimOnTrack: function(window) {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
          }
          this.addEventListener('track', this._ontrack = f);
        },
        enumerable: true,
        configurable: true
      });
      var origSetRemoteDescription =
          window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function() {
        var pc = this;
        if (!pc._ontrackpoly) {
          pc._ontrackpoly = function(e) {
            // onaddstream does not fire when a track is added to an existing
            // stream. But stream.onaddtrack is implemented so we use that.
            e.stream.addEventListener('addtrack', function(te) {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = pc.getReceivers().find(function(r) {
                  return r.track && r.track.id === te.track.id;
                });
              } else {
                receiver = {track: te.track};
              }

              var event = new Event('track');
              event.track = te.track;
              event.receiver = receiver;
              event.transceiver = {receiver: receiver};
              event.streams = [e.stream];
              pc.dispatchEvent(event);
            });
            e.stream.getTracks().forEach(function(track) {
              var receiver;
              if (window.RTCPeerConnection.prototype.getReceivers) {
                receiver = pc.getReceivers().find(function(r) {
                  return r.track && r.track.id === track.id;
                });
              } else {
                receiver = {track: track};
              }
              var event = new Event('track');
              event.track = track;
              event.receiver = receiver;
              event.transceiver = {receiver: receiver};
              event.streams = [e.stream];
              pc.dispatchEvent(event);
            });
          };
          pc.addEventListener('addstream', pc._ontrackpoly);
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
    } else if (!('RTCRtpTransceiver' in window)) {
      utils.wrapPeerConnectionEvent(window, 'track', function(e) {
        if (!e.transceiver) {
          e.transceiver = {receiver: e.receiver};
        }
        return e;
      });
    }
  },

  shimGetSendersWithDtmf: function(window) {
    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
    if (typeof window === 'object' && window.RTCPeerConnection &&
        !('getSenders' in window.RTCPeerConnection.prototype) &&
        'createDTMFSender' in window.RTCPeerConnection.prototype) {
      var shimSenderWithDtmf = function(pc, track) {
        return {
          track: track,
          get dtmf() {
            if (this._dtmf === undefined) {
              if (track.kind === 'audio') {
                this._dtmf = pc.createDTMFSender(track);
              } else {
                this._dtmf = null;
              }
            }
            return this._dtmf;
          },
          _pc: pc
        };
      };

      // augment addTrack when getSenders is not available.
      if (!window.RTCPeerConnection.prototype.getSenders) {
        window.RTCPeerConnection.prototype.getSenders = function() {
          this._senders = this._senders || [];
          return this._senders.slice(); // return a copy of the internal state.
        };
        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
          var pc = this;
          var sender = origAddTrack.apply(pc, arguments);
          if (!sender) {
            sender = shimSenderWithDtmf(pc, track);
            pc._senders.push(sender);
          }
          return sender;
        };

        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
        window.RTCPeerConnection.prototype.removeTrack = function(sender) {
          var pc = this;
          origRemoveTrack.apply(pc, arguments);
          var idx = pc._senders.indexOf(sender);
          if (idx !== -1) {
            pc._senders.splice(idx, 1);
          }
        };
      }
      var origAddStream = window.RTCPeerConnection.prototype.addStream;
      window.RTCPeerConnection.prototype.addStream = function(stream) {
        var pc = this;
        pc._senders = pc._senders || [];
        origAddStream.apply(pc, [stream]);
        stream.getTracks().forEach(function(track) {
          pc._senders.push(shimSenderWithDtmf(pc, track));
        });
      };

      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
      window.RTCPeerConnection.prototype.removeStream = function(stream) {
        var pc = this;
        pc._senders = pc._senders || [];
        origRemoveStream.apply(pc, [stream]);

        stream.getTracks().forEach(function(track) {
          var sender = pc._senders.find(function(s) {
            return s.track === track;
          });
          if (sender) {
            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender
          }
        });
      };
    } else if (typeof window === 'object' && window.RTCPeerConnection &&
               'getSenders' in window.RTCPeerConnection.prototype &&
               'createDTMFSender' in window.RTCPeerConnection.prototype &&
               window.RTCRtpSender &&
               !('dtmf' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      window.RTCPeerConnection.prototype.getSenders = function() {
        var pc = this;
        var senders = origGetSenders.apply(pc, []);
        senders.forEach(function(sender) {
          sender._pc = pc;
        });
        return senders;
      };

      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
        get: function() {
          if (this._dtmf === undefined) {
            if (this.track.kind === 'audio') {
              this._dtmf = this._pc.createDTMFSender(this.track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        }
      });
    }
  },

  shimSenderReceiverGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender && window.RTCRtpReceiver)) {
      return;
    }

    // shim sender stats.
    if (!('getStats' in window.RTCRtpSender.prototype)) {
      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
      if (origGetSenders) {
        window.RTCPeerConnection.prototype.getSenders = function() {
          var pc = this;
          var senders = origGetSenders.apply(pc, []);
          senders.forEach(function(sender) {
            sender._pc = pc;
          });
          return senders;
        };
      }

      var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
      if (origAddTrack) {
        window.RTCPeerConnection.prototype.addTrack = function() {
          var sender = origAddTrack.apply(this, arguments);
          sender._pc = this;
          return sender;
        };
      }
      window.RTCRtpSender.prototype.getStats = function() {
        var sender = this;
        return this._pc.getStats().then(function(result) {
          /* Note: this will include stats of all senders that
           *   send a track with the same id as sender.track as
           *   it is not possible to identify the RTCRtpSender.
           */
          return filterStats(result, sender.track, true);
        });
      };
    }

    // shim receiver stats.
    if (!('getStats' in window.RTCRtpReceiver.prototype)) {
      var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
      if (origGetReceivers) {
        window.RTCPeerConnection.prototype.getReceivers = function() {
          var pc = this;
          var receivers = origGetReceivers.apply(pc, []);
          receivers.forEach(function(receiver) {
            receiver._pc = pc;
          });
          return receivers;
        };
      }
      utils.wrapPeerConnectionEvent(window, 'track', function(e) {
        e.receiver._pc = e.srcElement;
        return e;
      });
      window.RTCRtpReceiver.prototype.getStats = function() {
        var receiver = this;
        return this._pc.getStats().then(function(result) {
          return filterStats(result, receiver.track, false);
        });
      };
    }

    if (!('getStats' in window.RTCRtpSender.prototype &&
        'getStats' in window.RTCRtpReceiver.prototype)) {
      return;
    }

    // shim RTCPeerConnection.getStats(track).
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function() {
      var pc = this;
      if (arguments.length > 0 &&
          arguments[0] instanceof window.MediaStreamTrack) {
        var track = arguments[0];
        var sender;
        var receiver;
        var err;
        pc.getSenders().forEach(function(s) {
          if (s.track === track) {
            if (sender) {
              err = true;
            } else {
              sender = s;
            }
          }
        });
        pc.getReceivers().forEach(function(r) {
          if (r.track === track) {
            if (receiver) {
              err = true;
            } else {
              receiver = r;
            }
          }
          return r.track === track;
        });
        if (err || (sender && receiver)) {
          return Promise.reject(new DOMException(
            'There are more than one sender or receiver for the track.',
            'InvalidAccessError'));
        } else if (sender) {
          return sender.getStats();
        } else if (receiver) {
          return receiver.getStats();
        }
        return Promise.reject(new DOMException(
          'There is no sender or receiver for the track.',
          'InvalidAccessError'));
      }
      return origGetStats.apply(pc, arguments);
    };
  },

  shimSourceObject: function(window) {
    var URL = window && window.URL;

    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this._srcObject;
          },
          set: function(stream) {
            var self = this;
            // Use _srcObject as a private property for this shim
            this._srcObject = stream;
            if (this.src) {
              URL.revokeObjectURL(this.src);
            }

            if (!stream) {
              this.src = '';
              return undefined;
            }
            this.src = URL.createObjectURL(stream);
            // We need to recreate the blob url when a track is added or
            // removed. Doing it manually since we want to avoid a recursion.
            stream.addEventListener('addtrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
            stream.addEventListener('removetrack', function() {
              if (self.src) {
                URL.revokeObjectURL(self.src);
              }
              self.src = URL.createObjectURL(stream);
            });
          }
        });
      }
    }
  },

  shimAddTrackRemoveTrackWithNative: function(window) {
    // shim addTrack/removeTrack with native variants in order to make
    // the interactions with legacy getLocalStreams behave as in other browsers.
    // Keeps a mapping stream.id => [stream, rtpsenders...]
    window.RTCPeerConnection.prototype.getLocalStreams = function() {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      return Object.keys(this._shimmedLocalStreams).map(function(streamId) {
        return pc._shimmedLocalStreams[streamId][0];
      });
    };

    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
      if (!stream) {
        return origAddTrack.apply(this, arguments);
      }
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      var sender = origAddTrack.apply(this, arguments);
      if (!this._shimmedLocalStreams[stream.id]) {
        this._shimmedLocalStreams[stream.id] = [stream, sender];
      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
        this._shimmedLocalStreams[stream.id].push(sender);
      }
      return sender;
    };

    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function(stream) {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};

      stream.getTracks().forEach(function(track) {
        var alreadyExists = pc.getSenders().find(function(s) {
          return s.track === track;
        });
        if (alreadyExists) {
          throw new DOMException('Track already exists.',
              'InvalidAccessError');
        }
      });
      var existingSenders = pc.getSenders();
      origAddStream.apply(this, arguments);
      var newSenders = pc.getSenders().filter(function(newSender) {
        return existingSenders.indexOf(newSender) === -1;
      });
      this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
    };

    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      delete this._shimmedLocalStreams[stream.id];
      return origRemoveStream.apply(this, arguments);
    };

    var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
    window.RTCPeerConnection.prototype.removeTrack = function(sender) {
      var pc = this;
      this._shimmedLocalStreams = this._shimmedLocalStreams || {};
      if (sender) {
        Object.keys(this._shimmedLocalStreams).forEach(function(streamId) {
          var idx = pc._shimmedLocalStreams[streamId].indexOf(sender);
          if (idx !== -1) {
            pc._shimmedLocalStreams[streamId].splice(idx, 1);
          }
          if (pc._shimmedLocalStreams[streamId].length === 1) {
            delete pc._shimmedLocalStreams[streamId];
          }
        });
      }
      return origRemoveTrack.apply(this, arguments);
    };
  },

  shimAddTrackRemoveTrack: function(window) {
    var browserDetails = utils.detectBrowser(window);
    // shim addTrack and removeTrack.
    if (window.RTCPeerConnection.prototype.addTrack &&
        browserDetails.version >= 65) {
      return this.shimAddTrackRemoveTrackWithNative(window);
    }

    // also shim pc.getLocalStreams when addTrack is shimmed
    // to return the original streams.
    var origGetLocalStreams = window.RTCPeerConnection.prototype
        .getLocalStreams;
    window.RTCPeerConnection.prototype.getLocalStreams = function() {
      var pc = this;
      var nativeStreams = origGetLocalStreams.apply(this);
      pc._reverseStreams = pc._reverseStreams || {};
      return nativeStreams.map(function(stream) {
        return pc._reverseStreams[stream.id];
      });
    };

    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function(stream) {
      var pc = this;
      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};

      stream.getTracks().forEach(function(track) {
        var alreadyExists = pc.getSenders().find(function(s) {
          return s.track === track;
        });
        if (alreadyExists) {
          throw new DOMException('Track already exists.',
              'InvalidAccessError');
        }
      });
      // Add identity mapping for consistency with addTrack.
      // Unless this is being used with a stream from addTrack.
      if (!pc._reverseStreams[stream.id]) {
        var newStream = new window.MediaStream(stream.getTracks());
        pc._streams[stream.id] = newStream;
        pc._reverseStreams[newStream.id] = stream;
        stream = newStream;
      }
      origAddStream.apply(pc, [stream]);
    };

    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var pc = this;
      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};

      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);
      delete pc._reverseStreams[(pc._streams[stream.id] ?
          pc._streams[stream.id].id : stream.id)];
      delete pc._streams[stream.id];
    };

    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
      var pc = this;
      if (pc.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      var streams = [].slice.call(arguments, 1);
      if (streams.length !== 1 ||
          !streams[0].getTracks().find(function(t) {
            return t === track;
          })) {
        // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException(
          'The adapter.js addTrack polyfill only supports a single ' +
          ' stream which is associated with the specified track.',
          'NotSupportedError');
      }

      var alreadyExists = pc.getSenders().find(function(s) {
        return s.track === track;
      });
      if (alreadyExists) {
        throw new DOMException('Track already exists.',
            'InvalidAccessError');
      }

      pc._streams = pc._streams || {};
      pc._reverseStreams = pc._reverseStreams || {};
      var oldStream = pc._streams[stream.id];
      if (oldStream) {
        // this is using odd Chrome behaviour, use with caution:
        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
        // Note: we rely on the high-level addTrack/dtmf shim to
        // create the sender with a dtmf sender.
        oldStream.addTrack(track);

        // Trigger ONN async.
        Promise.resolve().then(function() {
          pc.dispatchEvent(new Event('negotiationneeded'));
        });
      } else {
        var newStream = new window.MediaStream([track]);
        pc._streams[stream.id] = newStream;
        pc._reverseStreams[newStream.id] = stream;
        pc.addStream(newStream);
      }
      return pc.getSenders().find(function(s) {
        return s.track === track;
      });
    };

    // replace the internal stream id with the external one and
    // vice versa.
    function replaceInternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(internalStream.id, 'g'),
            externalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp: sdp
      });
    }
    function replaceExternalStreamId(pc, description) {
      var sdp = description.sdp;
      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {
        var externalStream = pc._reverseStreams[internalId];
        var internalStream = pc._streams[externalStream.id];
        sdp = sdp.replace(new RegExp(externalStream.id, 'g'),
            internalStream.id);
      });
      return new RTCSessionDescription({
        type: description.type,
        sdp: sdp
      });
    }
    ['createOffer', 'createAnswer'].forEach(function(method) {
      var nativeMethod = window.RTCPeerConnection.prototype[method];
      window.RTCPeerConnection.prototype[method] = function() {
        var pc = this;
        var args = arguments;
        var isLegacyCall = arguments.length &&
            typeof arguments[0] === 'function';
        if (isLegacyCall) {
          return nativeMethod.apply(pc, [
            function(description) {
              var desc = replaceInternalStreamId(pc, description);
              args[0].apply(null, [desc]);
            },
            function(err) {
              if (args[1]) {
                args[1].apply(null, err);
              }
            }, arguments[2]
          ]);
        }
        return nativeMethod.apply(pc, arguments)
        .then(function(description) {
          return replaceInternalStreamId(pc, description);
        });
      };
    });

    var origSetLocalDescription =
        window.RTCPeerConnection.prototype.setLocalDescription;
    window.RTCPeerConnection.prototype.setLocalDescription = function() {
      var pc = this;
      if (!arguments.length || !arguments[0].type) {
        return origSetLocalDescription.apply(pc, arguments);
      }
      arguments[0] = replaceExternalStreamId(pc, arguments[0]);
      return origSetLocalDescription.apply(pc, arguments);
    };

    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier

    var origLocalDescription = Object.getOwnPropertyDescriptor(
        window.RTCPeerConnection.prototype, 'localDescription');
    Object.defineProperty(window.RTCPeerConnection.prototype,
        'localDescription', {
          get: function() {
            var pc = this;
            var description = origLocalDescription.get.apply(this);
            if (description.type === '') {
              return description;
            }
            return replaceInternalStreamId(pc, description);
          }
        });

    window.RTCPeerConnection.prototype.removeTrack = function(sender) {
      var pc = this;
      if (pc.signalingState === 'closed') {
        throw new DOMException(
          'The RTCPeerConnection\'s signalingState is \'closed\'.',
          'InvalidStateError');
      }
      // We can not yet check for sender instanceof RTCRtpSender
      // since we shim RTPSender. So we check if sender._pc is set.
      if (!sender._pc) {
        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +
            'does not implement interface RTCRtpSender.', 'TypeError');
      }
      var isLocal = sender._pc === pc;
      if (!isLocal) {
        throw new DOMException('Sender was not created by this connection.',
            'InvalidAccessError');
      }

      // Search for the native stream the senders track belongs to.
      pc._streams = pc._streams || {};
      var stream;
      Object.keys(pc._streams).forEach(function(streamid) {
        var hasTrack = pc._streams[streamid].getTracks().find(function(track) {
          return sender.track === track;
        });
        if (hasTrack) {
          stream = pc._streams[streamid];
        }
      });

      if (stream) {
        if (stream.getTracks().length === 1) {
          // if this is the last track of the stream, remove the stream. This
          // takes care of any shimmed _senders.
          pc.removeStream(pc._reverseStreams[stream.id]);
        } else {
          // relying on the same odd chrome behaviour as above.
          stream.removeTrack(sender.track);
        }
        pc.dispatchEvent(new Event('negotiationneeded'));
      }
    };
  },

  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    // The RTCPeerConnection object.
    if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        // Translate iceTransportPolicy to iceTransports,
        // see https://code.google.com/p/webrtc/issues/detail?id=4869
        // this was fixed in M56 along with unprefixing RTCPeerConnection.
        logging('PeerConnection');
        if (pcConfig && pcConfig.iceTransportPolicy) {
          pcConfig.iceTransports = pcConfig.iceTransportPolicy;
        }

        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype =
          window.webkitRTCPeerConnection.prototype;
      // wrap static methods. Currently just generateCertificate.
      if (window.webkitRTCPeerConnection.generateCertificate) {
        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
          get: function() {
            return window.webkitRTCPeerConnection.generateCertificate;
          }
        });
      }
    } else {
      // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
      var OrigPeerConnection = window.RTCPeerConnection;
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        if (pcConfig && pcConfig.iceServers) {
          var newIceServers = [];
          for (var i = 0; i < pcConfig.iceServers.length; i++) {
            var server = pcConfig.iceServers[i];
            if (!server.hasOwnProperty('urls') &&
                server.hasOwnProperty('url')) {
              utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
              server = JSON.parse(JSON.stringify(server));
              server.urls = server.url;
              newIceServers.push(server);
            } else {
              newIceServers.push(pcConfig.iceServers[i]);
            }
          }
          pcConfig.iceServers = newIceServers;
        }
        return new OrigPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
      // wrap static methods. Currently just generateCertificate.
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get: function() {
          return OrigPeerConnection.generateCertificate;
        }
      });
    }

    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function(selector,
        successCallback, errorCallback) {
      var pc = this;
      var args = arguments;

      // If selector is a function then we are in the old style stats so just
      // pass back the original getStats format to avoid breaking old users.
      if (arguments.length > 0 && typeof selector === 'function') {
        return origGetStats.apply(this, arguments);
      }

      // When spec-style getStats is supported, return those when called with
      // either no arguments or the selector argument is null.
      if (origGetStats.length === 0 && (arguments.length === 0 ||
          typeof arguments[0] !== 'function')) {
        return origGetStats.apply(this, []);
      }

      var fixChromeStats_ = function(response) {
        var standardReport = {};
        var reports = response.result();
        reports.forEach(function(report) {
          var standardStats = {
            id: report.id,
            timestamp: report.timestamp,
            type: {
              localcandidate: 'local-candidate',
              remotecandidate: 'remote-candidate'
            }[report.type] || report.type
          };
          report.names().forEach(function(name) {
            standardStats[name] = report.stat(name);
          });
          standardReport[standardStats.id] = standardStats;
        });

        return standardReport;
      };

      // shim getStats with maplike support
      var makeMapStats = function(stats) {
        return new Map(Object.keys(stats).map(function(key) {
          return [key, stats[key]];
        }));
      };

      if (arguments.length >= 2) {
        var successCallbackWrapper_ = function(response) {
          args[1](makeMapStats(fixChromeStats_(response)));
        };

        return origGetStats.apply(this, [successCallbackWrapper_,
          arguments[0]]);
      }

      // promise-support
      return new Promise(function(resolve, reject) {
        origGetStats.apply(pc, [
          function(response) {
            resolve(makeMapStats(fixChromeStats_(response)));
          }, reject]);
      }).then(successCallback, errorCallback);
    };

    // add promise support -- natively available in Chrome 51
    if (browserDetails.version < 51) {
      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
          .forEach(function(method) {
            var nativeMethod = window.RTCPeerConnection.prototype[method];
            window.RTCPeerConnection.prototype[method] = function() {
              var args = arguments;
              var pc = this;
              var promise = new Promise(function(resolve, reject) {
                nativeMethod.apply(pc, [args[0], resolve, reject]);
              });
              if (args.length < 2) {
                return promise;
              }
              return promise.then(function() {
                args[1].apply(null, []);
              },
              function(err) {
                if (args.length >= 3) {
                  args[2].apply(null, [err]);
                }
              });
            };
          });
    }

    // promise support for createOffer and createAnswer. Available (without
    // bugs) since M52: crbug/619289
    if (browserDetails.version < 52) {
      ['createOffer', 'createAnswer'].forEach(function(method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        window.RTCPeerConnection.prototype[method] = function() {
          var pc = this;
          if (arguments.length < 1 || (arguments.length === 1 &&
              typeof arguments[0] === 'object')) {
            var opts = arguments.length === 1 ? arguments[0] : undefined;
            return new Promise(function(resolve, reject) {
              nativeMethod.apply(pc, [resolve, reject, opts]);
            });
          }
          return nativeMethod.apply(this, arguments);
        };
      });
    }

    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = window.RTCPeerConnection.prototype[method];
          window.RTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });

    // support for addIceCandidate(null or undefined)
    var nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate = function() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };
  },

  fixNegotiationNeeded: function(window) {
    utils.wrapPeerConnectionEvent(window, 'negotiationneeded', function(e) {
      var pc = e.target;
      if (pc.signalingState !== 'stable') {
        return;
      }
      return e;
    });
  },

  shimGetDisplayMedia: function(window, getSourceId) {
    if ('getDisplayMedia' in window.navigator) {
      return;
    }
    // getSourceId is a function that returns a promise resolving with
    // the sourceId of the screen/window/tab to be shared.
    if (typeof getSourceId !== 'function') {
      console.error('shimGetDisplayMedia: getSourceId argument is not ' +
          'a function');
      return;
    }
    navigator.getDisplayMedia = function(constraints) {
      return getSourceId(constraints)
        .then(function(sourceId) {
          constraints.video = {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: sourceId,
              maxFrameRate: constraints.video.frameRate || 3
            }
          };
          return navigator.mediaDevices.getUserMedia(constraints);
        });
    };
  }
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */

var utils = __webpack_require__(/*! ../utils.js */ "./node_modules/webrtc-adapter/src/js/utils.js");
var logging = utils.log;

// Expose public methods.
module.exports = function(window) {
  var browserDetails = utils.detectBrowser(window);
  var navigator = window && window.navigator;

  var constraintsToChrome_ = function(c) {
    if (typeof c !== 'object' || c.mandatory || c.optional) {
      return c;
    }
    var cc = {};
    Object.keys(c).forEach(function(key) {
      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
        return;
      }
      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
      if (r.exact !== undefined && typeof r.exact === 'number') {
        r.min = r.max = r.exact;
      }
      var oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return (name === 'deviceId') ? 'sourceId' : name;
      };
      if (r.ideal !== undefined) {
        cc.optional = cc.optional || [];
        var oc = {};
        if (typeof r.ideal === 'number') {
          oc[oldname_('min', key)] = r.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_('max', key)] = r.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_('', key)] = r.ideal;
          cc.optional.push(oc);
        }
      }
      if (r.exact !== undefined && typeof r.exact !== 'number') {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_('', key)] = r.exact;
      } else {
        ['min', 'max'].forEach(function(mix) {
          if (r[mix] !== undefined) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r[mix];
          }
        });
      }
    });
    if (c.advanced) {
      cc.optional = (cc.optional || []).concat(c.advanced);
    }
    return cc;
  };

  var shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === 'object') {
      var remap = function(obj, a, b) {
        if (a in obj && !(b in obj)) {
          obj[b] = obj[a];
          delete obj[a];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === 'object') {
      // Shim facingMode for mobile & surface pro.
      var face = constraints.video.facingMode;
      face = face && ((typeof face === 'object') ? face : {ideal: face});
      var getSupportedFacingModeLies = browserDetails.version < 66;

      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
                    face.ideal === 'user' || face.ideal === 'environment')) &&
          !(navigator.mediaDevices.getSupportedConstraints &&
            navigator.mediaDevices.getSupportedConstraints().facingMode &&
            !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        var matches;
        if (face.exact === 'environment' || face.ideal === 'environment') {
          matches = ['back', 'rear'];
        } else if (face.exact === 'user' || face.ideal === 'user') {
          matches = ['front'];
        }
        if (matches) {
          // Look for matches in label, or use last cam for back (typical).
          return navigator.mediaDevices.enumerateDevices()
          .then(function(devices) {
            devices = devices.filter(function(d) {
              return d.kind === 'videoinput';
            });
            var dev = devices.find(function(d) {
              return matches.some(function(match) {
                return d.label.toLowerCase().indexOf(match) !== -1;
              });
            });
            if (!dev && devices.length && matches.indexOf('back') !== -1) {
              dev = devices[devices.length - 1]; // more likely the back cam
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
                                                        {ideal: dev.deviceId};
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging('chrome: ' + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging('chrome: ' + JSON.stringify(constraints));
    return func(constraints);
  };

  var shimError_ = function(e) {
    if (browserDetails.version >= 64) {
      return e;
    }
    return {
      name: {
        PermissionDeniedError: 'NotAllowedError',
        PermissionDismissedError: 'NotAllowedError',
        InvalidStateError: 'NotAllowedError',
        DevicesNotFoundError: 'NotFoundError',
        ConstraintNotSatisfiedError: 'OverconstrainedError',
        TrackStartError: 'NotReadableError',
        MediaDeviceFailedDueToShutdown: 'NotAllowedError',
        MediaDeviceKillSwitchOn: 'NotAllowedError',
        TabCaptureError: 'AbortError',
        ScreenCaptureError: 'AbortError',
        DeviceCaptureError: 'AbortError'
      }[e.name] || e.name,
      message: e.message,
      constraint: e.constraint || e.constraintName,
      toString: function() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  var getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, function(c) {
      navigator.webkitGetUserMedia(c, onSuccess, function(e) {
        if (onError) {
          onError(shimError_(e));
        }
      });
    });
  };

  navigator.getUserMedia = getUserMedia_;

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      navigator.getUserMedia(constraints, resolve, reject);
    });
  };

  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {
      getUserMedia: getUserMediaPromise_,
      enumerateDevices: function() {
        return new Promise(function(resolve) {
          var kinds = {audio: 'audioinput', video: 'videoinput'};
          return window.MediaStreamTrack.getSources(function(devices) {
            resolve(devices.map(function(device) {
              return {label: device.label,
                kind: kinds[device.kind],
                deviceId: device.id,
                groupId: ''};
            }));
          });
        });
      },
      getSupportedConstraints: function() {
        return {
          deviceId: true, echoCancellation: true, facingMode: true,
          frameRate: true, height: true, width: true
        };
      }
    };
  }

  // A shim for getUserMedia method on the mediaDevices object.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (!navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia = function(constraints) {
      return getUserMediaPromise_(constraints);
    };
  } else {
    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(cs) {
      return shimConstraints_(cs, function(c) {
        return origGetUserMedia(c).then(function(stream) {
          if (c.audio && !stream.getAudioTracks().length ||
              c.video && !stream.getVideoTracks().length) {
            stream.getTracks().forEach(function(track) {
              track.stop();
            });
            throw new DOMException('', 'NotFoundError');
          }
          return stream;
        }, function(e) {
          return Promise.reject(shimError_(e));
        });
      });
    };
  }

  // Dummy devicechange event methods.
  // TODO(KaptenJansson) remove once implemented in Chrome stable.
  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
    navigator.mediaDevices.addEventListener = function() {
      logging('Dummy mediaDevices.addEventListener called.');
    };
  }
  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
    navigator.mediaDevices.removeEventListener = function() {
      logging('Dummy mediaDevices.removeEventListener called.');
    };
  }
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/common_shim.js":
/*!***********************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/common_shim.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var SDPUtils = __webpack_require__(/*! sdp */ "./node_modules/sdp/sdp.js");
var utils = __webpack_require__(/*! ./utils */ "./node_modules/webrtc-adapter/src/js/utils.js");

module.exports = {
  shimRTCIceCandidate: function(window) {
    // foundation is arbitrarily chosen as an indicator for full support for
    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
    if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in
        window.RTCIceCandidate.prototype)) {
      return;
    }

    var NativeRTCIceCandidate = window.RTCIceCandidate;
    window.RTCIceCandidate = function(args) {
      // Remove the a= which shouldn't be part of the candidate string.
      if (typeof args === 'object' && args.candidate &&
          args.candidate.indexOf('a=') === 0) {
        args = JSON.parse(JSON.stringify(args));
        args.candidate = args.candidate.substr(2);
      }

      if (args.candidate && args.candidate.length) {
        // Augment the native candidate with the parsed fields.
        var nativeCandidate = new NativeRTCIceCandidate(args);
        var parsedCandidate = SDPUtils.parseCandidate(args.candidate);
        var augmentedCandidate = Object.assign(nativeCandidate,
            parsedCandidate);

        // Add a serializer that does not serialize the extra attributes.
        augmentedCandidate.toJSON = function() {
          return {
            candidate: augmentedCandidate.candidate,
            sdpMid: augmentedCandidate.sdpMid,
            sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
            usernameFragment: augmentedCandidate.usernameFragment,
          };
        };
        return augmentedCandidate;
      }
      return new NativeRTCIceCandidate(args);
    };
    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;

    // Hook up the augmented candidate in onicecandidate and
    // addEventListener('icecandidate', ...)
    utils.wrapPeerConnectionEvent(window, 'icecandidate', function(e) {
      if (e.candidate) {
        Object.defineProperty(e, 'candidate', {
          value: new window.RTCIceCandidate(e.candidate),
          writable: 'false'
        });
      }
      return e;
    });
  },

  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.

  shimCreateObjectURL: function() { 
 if(true)return;
    var URL = window && window.URL;

    if (!(typeof window === 'object' && window.HTMLMediaElement &&
          'srcObject' in window.HTMLMediaElement.prototype &&
        URL.createObjectURL && URL.revokeObjectURL)) {
      // Only shim CreateObjectURL using srcObject if srcObject exists.
      return undefined;
    }

    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);
    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);
    var streams = new Map(), newId = 0;

    URL.createObjectURL = function(stream) {
      if ('getTracks' in stream) {
        var url = 'polyblob:' + (++newId);
        streams.set(url, stream);
        utils.deprecated('URL.createObjectURL(stream)',
            'elem.srcObject = stream');
        return url;
      }
      return nativeCreateObjectURL(stream);
    };
    URL.revokeObjectURL = function(url) {
      nativeRevokeObjectURL(url);
      streams.delete(url);
    };

    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,
                                              'src');
    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {
      get: function() {
        return dsc.get.apply(this);
      },
      set: function(url) {
        this.srcObject = streams.get(url) || null;
        return dsc.set.apply(this, [url]);
      }
    });

    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;
    window.HTMLMediaElement.prototype.setAttribute = function() {
      if (arguments.length === 2 &&
          ('' + arguments[0]).toLowerCase() === 'src') {
        this.srcObject = streams.get(arguments[1]) || null;
      }
      return nativeSetAttribute.apply(this, arguments);
    };
  },

  shimMaxMessageSize: function(window) {
    if (window.RTCSctpTransport || !window.RTCPeerConnection) {
      return;
    }
    var browserDetails = utils.detectBrowser(window);

    if (!('sctp' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {
        get: function() {
          return typeof this._sctp === 'undefined' ? null : this._sctp;
        }
      });
    }

    var sctpInDescription = function(description) {
      var sections = SDPUtils.splitSections(description.sdp);
      sections.shift();
      return sections.some(function(mediaSection) {
        var mLine = SDPUtils.parseMLine(mediaSection);
        return mLine && mLine.kind === 'application'
            && mLine.protocol.indexOf('SCTP') !== -1;
      });
    };

    var getRemoteFirefoxVersion = function(description) {
      // TODO: Is there a better solution for detecting Firefox?
      var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
      if (match === null || match.length < 2) {
        return -1;
      }
      var version = parseInt(match[1], 10);
      // Test for NaN (yes, this is ugly)
      return version !== version ? -1 : version;
    };

    var getCanSendMaxMessageSize = function(remoteIsFirefox) {
      // Every implementation we know can send at least 64 KiB.
      // Note: Although Chrome is technically able to send up to 256 KiB, the
      //       data does not reach the other peer reliably.
      //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
      var canSendMaxMessageSize = 65536;
      if (browserDetails.browser === 'firefox') {
        if (browserDetails.version < 57) {
          if (remoteIsFirefox === -1) {
            // FF < 57 will send in 16 KiB chunks using the deprecated PPID
            // fragmentation.
            canSendMaxMessageSize = 16384;
          } else {
            // However, other FF (and RAWRTC) can reassemble PPID-fragmented
            // messages. Thus, supporting ~2 GiB when sending.
            canSendMaxMessageSize = 2147483637;
          }
        } else if (browserDetails.version < 60) {
          // Currently, all FF >= 57 will reset the remote maximum message size
          // to the default value when a data channel is created at a later
          // stage. :(
          // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
          canSendMaxMessageSize =
            browserDetails.version === 57 ? 65535 : 65536;
        } else {
          // FF >= 60 supports sending ~2 GiB
          canSendMaxMessageSize = 2147483637;
        }
      }
      return canSendMaxMessageSize;
    };

    var getMaxMessageSize = function(description, remoteIsFirefox) {
      // Note: 65536 bytes is the default value from the SDP spec. Also,
      //       every implementation we know supports receiving 65536 bytes.
      var maxMessageSize = 65536;

      // FF 57 has a slightly incorrect default remote max message size, so
      // we need to adjust it here to avoid a failure when sending.
      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
      if (browserDetails.browser === 'firefox'
           && browserDetails.version === 57) {
        maxMessageSize = 65535;
      }

      var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');
      if (match.length > 0) {
        maxMessageSize = parseInt(match[0].substr(19), 10);
      } else if (browserDetails.browser === 'firefox' &&
                  remoteIsFirefox !== -1) {
        // If the maximum message size is not present in the remote SDP and
        // both local and remote are Firefox, the remote peer can receive
        // ~2 GiB.
        maxMessageSize = 2147483637;
      }
      return maxMessageSize;
    };

    var origSetRemoteDescription =
        window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function() {
      var pc = this;
      pc._sctp = null;

      if (sctpInDescription(arguments[0])) {
        // Check if the remote is FF.
        var isFirefox = getRemoteFirefoxVersion(arguments[0]);

        // Get the maximum message size the local peer is capable of sending
        var canSendMMS = getCanSendMaxMessageSize(isFirefox);

        // Get the maximum message size of the remote peer.
        var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);

        // Determine final maximum message size
        var maxMessageSize;
        if (canSendMMS === 0 && remoteMMS === 0) {
          maxMessageSize = Number.POSITIVE_INFINITY;
        } else if (canSendMMS === 0 || remoteMMS === 0) {
          maxMessageSize = Math.max(canSendMMS, remoteMMS);
        } else {
          maxMessageSize = Math.min(canSendMMS, remoteMMS);
        }

        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
        // attribute.
        var sctp = {};
        Object.defineProperty(sctp, 'maxMessageSize', {
          get: function() {
            return maxMessageSize;
          }
        });
        pc._sctp = sctp;
      }

      return origSetRemoteDescription.apply(pc, arguments);
    };
  },

  shimSendThrowTypeError: function(window) {
    if (!(window.RTCPeerConnection &&
        'createDataChannel' in window.RTCPeerConnection.prototype)) {
      return;
    }

    // Note: Although Firefox >= 57 has a native implementation, the maximum
    //       message size can be reset for all data channels at a later stage.
    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831

    function wrapDcSend(dc, pc) {
      var origDataChannelSend = dc.send;
      dc.send = function() {
        var data = arguments[0];
        var length = data.length || data.size || data.byteLength;
        if (dc.readyState === 'open' &&
            pc.sctp && length > pc.sctp.maxMessageSize) {
          throw new TypeError('Message too large (can send a maximum of ' +
            pc.sctp.maxMessageSize + ' bytes)');
        }
        return origDataChannelSend.apply(dc, arguments);
      };
    }
    var origCreateDataChannel =
      window.RTCPeerConnection.prototype.createDataChannel;
    window.RTCPeerConnection.prototype.createDataChannel = function() {
      var pc = this;
      var dataChannel = origCreateDataChannel.apply(pc, arguments);
      wrapDcSend(dataChannel, pc);
      return dataChannel;
    };
    utils.wrapPeerConnectionEvent(window, 'datachannel', function(e) {
      wrapDcSend(e.channel, e.target);
      return e;
    });
  }
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/edge_shim.js":
/*!**************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/edge_shim.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var utils = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
var filterIceServers = __webpack_require__(/*! ./filtericeservers */ "./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js");
var shimRTCPeerConnection = __webpack_require__(/*! rtcpeerconnection-shim */ "./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js");

module.exports = {
  shimGetUserMedia: __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/edge/getusermedia.js"),
  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    if (window.RTCIceGatherer) {
      if (!window.RTCIceCandidate) {
        window.RTCIceCandidate = function(args) {
          return args;
        };
      }
      if (!window.RTCSessionDescription) {
        window.RTCSessionDescription = function(args) {
          return args;
        };
      }
      // this adds an additional event listener to MediaStrackTrack that signals
      // when a tracks enabled property was changed. Workaround for a bug in
      // addStream, see below. No longer required in 15025+
      if (browserDetails.version < 15025) {
        var origMSTEnabled = Object.getOwnPropertyDescriptor(
            window.MediaStreamTrack.prototype, 'enabled');
        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
          set: function(value) {
            origMSTEnabled.set.call(this, value);
            var ev = new Event('enabled');
            ev.enabled = value;
            this.dispatchEvent(ev);
          }
        });
      }
    }

    // ORTC defines the DTMF sender a bit different.
    // https://github.com/w3c/ortc/issues/714
    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
        get: function() {
          if (this._dtmf === undefined) {
            if (this.track.kind === 'audio') {
              this._dtmf = new window.RTCDtmfSender(this);
            } else if (this.track.kind === 'video') {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        }
      });
    }
    // Edge currently only implements the RTCDtmfSender, not the
    // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*
    if (window.RTCDtmfSender && !window.RTCDTMFSender) {
      window.RTCDTMFSender = window.RTCDtmfSender;
    }

    var RTCPeerConnectionShim = shimRTCPeerConnection(window,
        browserDetails.version);
    window.RTCPeerConnection = function(config) {
      if (config && config.iceServers) {
        config.iceServers = filterIceServers(config.iceServers);
      }
      return new RTCPeerConnectionShim(config);
    };
    window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;
  },
  shimReplaceTrack: function(window) {
    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
    if (window.RTCRtpSender &&
        !('replaceTrack' in window.RTCRtpSender.prototype)) {
      window.RTCRtpSender.prototype.replaceTrack =
          window.RTCRtpSender.prototype.setTrack;
    }
  }
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var utils = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
// Edge does not like
// 1) stun: filtered after 14393 unless ?transport=udp is present
// 2) turn: that does not have all of turn:host:port?transport=udp
// 3) turn: with ipv6 addresses
// 4) turn: occurring muliple times
module.exports = function(iceServers, edgeVersion) {
  var hasTurn = false;
  iceServers = JSON.parse(JSON.stringify(iceServers));
  return iceServers.filter(function(server) {
    if (server && (server.urls || server.url)) {
      var urls = server.urls || server.url;
      if (server.url && !server.urls) {
        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
      }
      var isString = typeof urls === 'string';
      if (isString) {
        urls = [urls];
      }
      urls = urls.filter(function(url) {
        var validTurn = url.indexOf('turn:') === 0 &&
            url.indexOf('transport=udp') !== -1 &&
            url.indexOf('turn:[') === -1 &&
            !hasTurn;

        if (validTurn) {
          hasTurn = true;
          return true;
        }
        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&
            url.indexOf('?transport=udp') === -1;
      });

      delete server.url;
      server.urls = isString ? urls[0] : urls;
      return !!urls.length;
    }
  });
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/edge/getusermedia.js":
/*!*****************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/edge/getusermedia.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


// Expose public methods.
module.exports = function(window) {
  var navigator = window && window.navigator;

  var shimError_ = function(e) {
    return {
      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
      message: e.message,
      constraint: e.constraint,
      toString: function() {
        return this.name;
      }
    };
  };

  // getUserMedia error shim.
  var origGetUserMedia = navigator.mediaDevices.getUserMedia.
      bind(navigator.mediaDevices);
  navigator.mediaDevices.getUserMedia = function(c) {
    return origGetUserMedia(c).catch(function(e) {
      return Promise.reject(shimError_(e));
    });
  };
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var utils = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");

module.exports = {
  shimGetUserMedia: __webpack_require__(/*! ./getusermedia */ "./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js"),
  shimOnTrack: function(window) {
    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
        window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
        get: function() {
          return this._ontrack;
        },
        set: function(f) {
          if (this._ontrack) {
            this.removeEventListener('track', this._ontrack);
            this.removeEventListener('addstream', this._ontrackpoly);
          }
          this.addEventListener('track', this._ontrack = f);
          this.addEventListener('addstream', this._ontrackpoly = function(e) {
            e.stream.getTracks().forEach(function(track) {
              var event = new Event('track');
              event.track = track;
              event.receiver = {track: track};
              event.transceiver = {receiver: event.receiver};
              event.streams = [e.stream];
              this.dispatchEvent(event);
            }.bind(this));
          }.bind(this));
        },
        enumerable: true,
        configurable: true
      });
    }
    if (typeof window === 'object' && window.RTCTrackEvent &&
        ('receiver' in window.RTCTrackEvent.prototype) &&
        !('transceiver' in window.RTCTrackEvent.prototype)) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get: function() {
          return {receiver: this.receiver};
        }
      });
    }
  },

  shimSourceObject: function(window) {
    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.
    if (typeof window === 'object') {
      if (window.HTMLMediaElement &&
        !('srcObject' in window.HTMLMediaElement.prototype)) {
        // Shim the srcObject property, once, when HTMLMediaElement is found.
        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
          get: function() {
            return this.mozSrcObject;
          },
          set: function(stream) {
            this.mozSrcObject = stream;
          }
        });
      }
    }
  },

  shimPeerConnection: function(window) {
    var browserDetails = utils.detectBrowser(window);

    if (typeof window !== 'object' || !(window.RTCPeerConnection ||
        window.mozRTCPeerConnection)) {
      return; // probably media.peerconnection.enabled=false in about:config
    }
    // The RTCPeerConnection object.
    if (!window.RTCPeerConnection) {
      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
        if (browserDetails.version < 38) {
          // .urls is not supported in FF < 38.
          // create RTCIceServers with a single url.
          if (pcConfig && pcConfig.iceServers) {
            var newIceServers = [];
            for (var i = 0; i < pcConfig.iceServers.length; i++) {
              var server = pcConfig.iceServers[i];
              if (server.hasOwnProperty('urls')) {
                for (var j = 0; j < server.urls.length; j++) {
                  var newServer = {
                    url: server.urls[j]
                  };
                  if (server.urls[j].indexOf('turn') === 0) {
                    newServer.username = server.username;
                    newServer.credential = server.credential;
                  }
                  newIceServers.push(newServer);
                }
              } else {
                newIceServers.push(pcConfig.iceServers[i]);
              }
            }
            pcConfig.iceServers = newIceServers;
          }
        }
        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);
      };
      window.RTCPeerConnection.prototype =
          window.mozRTCPeerConnection.prototype;

      // wrap static methods. Currently just generateCertificate.
      if (window.mozRTCPeerConnection.generateCertificate) {
        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
          get: function() {
            return window.mozRTCPeerConnection.generateCertificate;
          }
        });
      }

      window.RTCSessionDescription = window.mozRTCSessionDescription;
      window.RTCIceCandidate = window.mozRTCIceCandidate;
    }

    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
        .forEach(function(method) {
          var nativeMethod = window.RTCPeerConnection.prototype[method];
          window.RTCPeerConnection.prototype[method] = function() {
            arguments[0] = new ((method === 'addIceCandidate') ?
                window.RTCIceCandidate :
                window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
          };
        });

    // support for addIceCandidate(null or undefined)
    var nativeAddIceCandidate =
        window.RTCPeerConnection.prototype.addIceCandidate;
    window.RTCPeerConnection.prototype.addIceCandidate = function() {
      if (!arguments[0]) {
        if (arguments[1]) {
          arguments[1].apply(null);
        }
        return Promise.resolve();
      }
      return nativeAddIceCandidate.apply(this, arguments);
    };

    // shim getStats with maplike support
    var makeMapStats = function(stats) {
      var map = new Map();
      Object.keys(stats).forEach(function(key) {
        map.set(key, stats[key]);
        map[key] = stats[key];
      });
      return map;
    };

    var modernStatsTypes = {
      inboundrtp: 'inbound-rtp',
      outboundrtp: 'outbound-rtp',
      candidatepair: 'candidate-pair',
      localcandidate: 'local-candidate',
      remotecandidate: 'remote-candidate'
    };

    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function(
      selector,
      onSucc,
      onErr
    ) {
      return nativeGetStats.apply(this, [selector || null])
        .then(function(stats) {
          if (browserDetails.version < 48) {
            stats = makeMapStats(stats);
          }
          if (browserDetails.version < 53 && !onSucc) {
            // Shim only promise getStats with spec-hyphens in type names
            // Leave callback version alone; misc old uses of forEach before Map
            try {
              stats.forEach(function(stat) {
                stat.type = modernStatsTypes[stat.type] || stat.type;
              });
            } catch (e) {
              if (e.name !== 'TypeError') {
                throw e;
              }
              // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
              stats.forEach(function(stat, i) {
                stats.set(i, Object.assign({}, stat, {
                  type: modernStatsTypes[stat.type] || stat.type
                }));
              });
            }
          }
          return stats;
        })
        .then(onSucc, onErr);
    };
  },

  shimSenderGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {
      return;
    }
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window.RTCPeerConnection.prototype.getSenders = function() {
        var pc = this;
        var senders = origGetSenders.apply(pc, []);
        senders.forEach(function(sender) {
          sender._pc = pc;
        });
        return senders;
      };
    }

    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window.RTCPeerConnection.prototype.addTrack = function() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window.RTCRtpSender.prototype.getStats = function() {
      return this.track ? this._pc.getStats(this.track) :
          Promise.resolve(new Map());
    };
  },

  shimReceiverGetStats: function(window) {
    if (!(typeof window === 'object' && window.RTCPeerConnection &&
        window.RTCRtpSender)) {
      return;
    }
    if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {
      return;
    }
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window.RTCPeerConnection.prototype.getReceivers = function() {
        var pc = this;
        var receivers = origGetReceivers.apply(pc, []);
        receivers.forEach(function(receiver) {
          receiver._pc = pc;
        });
        return receivers;
      };
    }
    utils.wrapPeerConnectionEvent(window, 'track', function(e) {
      e.receiver._pc = e.srcElement;
      return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function() {
      return this._pc.getStats(this.track);
    };
  },

  shimRemoveStream: function(window) {
    if (!window.RTCPeerConnection ||
        'removeStream' in window.RTCPeerConnection.prototype) {
      return;
    }
    window.RTCPeerConnection.prototype.removeStream = function(stream) {
      var pc = this;
      utils.deprecated('removeStream', 'removeTrack');
      this.getSenders().forEach(function(sender) {
        if (sender.track && stream.getTracks().indexOf(sender.track) !== -1) {
          pc.removeTrack(sender);
        }
      });
    };
  },

  shimRTCDataChannel: function(window) {
    // rename DataChannel to RTCDataChannel (native fix in FF60):
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
    if (window.DataChannel && !window.RTCDataChannel) {
      window.RTCDataChannel = window.DataChannel;
    }
  },

  shimGetDisplayMedia: function(window, preferredMediaSource) {
    if ('getDisplayMedia' in window.navigator) {
      return;
    }
    navigator.getDisplayMedia = function(constraints) {
      if (!(constraints && constraints.video)) {
        var err = new DOMException('getDisplayMedia without video ' +
            'constraints is undefined');
        err.name = 'NotFoundError';
        // from https://heycam.github.io/webidl/#idl-DOMException-error-names
        err.code = 8;
        return Promise.reject(err);
      }
      if (constraints.video === true) {
        constraints.video = {mediaSource: preferredMediaSource};
      } else {
        constraints.video.mediaSource = preferredMediaSource;
      }
      return navigator.mediaDevices.getUserMedia(constraints);
    };
  }
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js":
/*!********************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var utils = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");
var logging = utils.log;

// Expose public methods.
module.exports = function(window) {
  var browserDetails = utils.detectBrowser(window);
  var navigator = window && window.navigator;
  var MediaStreamTrack = window && window.MediaStreamTrack;

  var shimError_ = function(e) {
    return {
      name: {
        InternalError: 'NotReadableError',
        NotSupportedError: 'TypeError',
        PermissionDeniedError: 'NotAllowedError',
        SecurityError: 'NotAllowedError'
      }[e.name] || e.name,
      message: {
        'The operation is insecure.': 'The request is not allowed by the ' +
        'user agent or the platform in the current context.'
      }[e.message] || e.message,
      constraint: e.constraint,
      toString: function() {
        return this.name + (this.message && ': ') + this.message;
      }
    };
  };

  // getUserMedia constraints shim.
  var getUserMedia_ = function(constraints, onSuccess, onError) {
    var constraintsToFF37_ = function(c) {
      if (typeof c !== 'object' || c.require) {
        return c;
      }
      var require = [];
      Object.keys(c).forEach(function(key) {
        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
          return;
        }
        var r = c[key] = (typeof c[key] === 'object') ?
            c[key] : {ideal: c[key]};
        if (r.min !== undefined ||
            r.max !== undefined || r.exact !== undefined) {
          require.push(key);
        }
        if (r.exact !== undefined) {
          if (typeof r.exact === 'number') {
            r. min = r.max = r.exact;
          } else {
            c[key] = r.exact;
          }
          delete r.exact;
        }
        if (r.ideal !== undefined) {
          c.advanced = c.advanced || [];
          var oc = {};
          if (typeof r.ideal === 'number') {
            oc[key] = {min: r.ideal, max: r.ideal};
          } else {
            oc[key] = r.ideal;
          }
          c.advanced.push(oc);
          delete r.ideal;
          if (!Object.keys(r).length) {
            delete c[key];
          }
        }
      });
      if (require.length) {
        c.require = require;
      }
      return c;
    };
    constraints = JSON.parse(JSON.stringify(constraints));
    if (browserDetails.version < 38) {
      logging('spec: ' + JSON.stringify(constraints));
      if (constraints.audio) {
        constraints.audio = constraintsToFF37_(constraints.audio);
      }
      if (constraints.video) {
        constraints.video = constraintsToFF37_(constraints.video);
      }
      logging('ff37: ' + JSON.stringify(constraints));
    }
    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {
      onError(shimError_(e));
    });
  };

  // Returns the result of getUserMedia as a Promise.
  var getUserMediaPromise_ = function(constraints) {
    return new Promise(function(resolve, reject) {
      getUserMedia_(constraints, resolve, reject);
    });
  };

  // Shim for mediaDevices on older versions.
  if (!navigator.mediaDevices) {
    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
      addEventListener: function() { },
      removeEventListener: function() { }
    };
  }
  navigator.mediaDevices.enumerateDevices =
      navigator.mediaDevices.enumerateDevices || function() {
        return new Promise(function(resolve) {
          var infos = [
            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
          ];
          resolve(infos);
        });
      };

  if (browserDetails.version < 41) {
    // Work around http://bugzil.la/1169665
    var orgEnumerateDevices =
        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
    navigator.mediaDevices.enumerateDevices = function() {
      return orgEnumerateDevices().then(undefined, function(e) {
        if (e.name === 'NotFoundError') {
          return [];
        }
        throw e;
      });
    };
  }
  if (browserDetails.version < 49) {
    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      return origGetUserMedia(c).then(function(stream) {
        // Work around https://bugzil.la/802326
        if (c.audio && !stream.getAudioTracks().length ||
            c.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach(function(track) {
            track.stop();
          });
          throw new DOMException('The object can not be found here.',
                                 'NotFoundError');
        }
        return stream;
      }, function(e) {
        return Promise.reject(shimError_(e));
      });
    };
  }
  if (!(browserDetails.version > 55 &&
      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
    var remap = function(obj, a, b) {
      if (a in obj && !(b in obj)) {
        obj[b] = obj[a];
        delete obj[a];
      }
    };

    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
        bind(navigator.mediaDevices);
    navigator.mediaDevices.getUserMedia = function(c) {
      if (typeof c === 'object' && typeof c.audio === 'object') {
        c = JSON.parse(JSON.stringify(c));
        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
      }
      return nativeGetUserMedia(c);
    };

    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        var obj = nativeGetSettings.apply(this, arguments);
        remap(obj, 'mozAutoGainControl', 'autoGainControl');
        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
        return obj;
      };
    }

    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c) {
        if (this.kind === 'audio' && typeof c === 'object') {
          c = JSON.parse(JSON.stringify(c));
          remap(c, 'autoGainControl', 'mozAutoGainControl');
          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
        }
        return nativeApplyConstraints.apply(this, [c]);
      };
    }
  }
  navigator.getUserMedia = function(constraints, onSuccess, onError) {
    if (browserDetails.version < 44) {
      return getUserMedia_(constraints, onSuccess, onError);
    }
    // Replace Firefox 44+'s deprecation warning with unprefixed version.
    utils.deprecated('navigator.getUserMedia',
        'navigator.mediaDevices.getUserMedia');
    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/safari/safari_shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/safari/safari_shim.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */

var utils = __webpack_require__(/*! ../utils */ "./node_modules/webrtc-adapter/src/js/utils.js");

module.exports = {
  shimLocalStreamsAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getLocalStreams = function() {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        return this._localStreams;
      };
    }
    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getStreamById = function(id) {
        var result = null;
        if (this._localStreams) {
          this._localStreams.forEach(function(stream) {
            if (stream.id === id) {
              result = stream;
            }
          });
        }
        if (this._remoteStreams) {
          this._remoteStreams.forEach(function(stream) {
            if (stream.id === id) {
              result = stream;
            }
          });
        }
        return result;
      };
    }
    if (!('addStream' in window.RTCPeerConnection.prototype)) {
      var _addTrack = window.RTCPeerConnection.prototype.addTrack;
      window.RTCPeerConnection.prototype.addStream = function(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        if (this._localStreams.indexOf(stream) === -1) {
          this._localStreams.push(stream);
        }
        var pc = this;
        stream.getTracks().forEach(function(track) {
          _addTrack.call(pc, track, stream);
        });
      };

      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
        if (stream) {
          if (!this._localStreams) {
            this._localStreams = [stream];
          } else if (this._localStreams.indexOf(stream) === -1) {
            this._localStreams.push(stream);
          }
        }
        return _addTrack.call(this, track, stream);
      };
    }
    if (!('removeStream' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.removeStream = function(stream) {
        if (!this._localStreams) {
          this._localStreams = [];
        }
        var index = this._localStreams.indexOf(stream);
        if (index === -1) {
          return;
        }
        this._localStreams.splice(index, 1);
        var pc = this;
        var tracks = stream.getTracks();
        this.getSenders().forEach(function(sender) {
          if (tracks.indexOf(sender.track) !== -1) {
            pc.removeTrack(sender);
          }
        });
      };
    }
  },
  shimRemoteStreamsAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
      window.RTCPeerConnection.prototype.getRemoteStreams = function() {
        return this._remoteStreams ? this._remoteStreams : [];
      };
    }
    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
        get: function() {
          return this._onaddstream;
        },
        set: function(f) {
          if (this._onaddstream) {
            this.removeEventListener('addstream', this._onaddstream);
          }
          this.addEventListener('addstream', this._onaddstream = f);
        }
      });
      var origSetRemoteDescription =
          window.RTCPeerConnection.prototype.setRemoteDescription;
      window.RTCPeerConnection.prototype.setRemoteDescription = function() {
        var pc = this;
        if (!this._onaddstreampoly) {
          this.addEventListener('track', this._onaddstreampoly = function(e) {
            e.streams.forEach(function(stream) {
              if (!pc._remoteStreams) {
                pc._remoteStreams = [];
              }
              if (pc._remoteStreams.indexOf(stream) >= 0) {
                return;
              }
              pc._remoteStreams.push(stream);
              var event = new Event('addstream');
              event.stream = stream;
              pc.dispatchEvent(event);
            });
          });
        }
        return origSetRemoteDescription.apply(pc, arguments);
      };
    }
  },
  shimCallbacksAPI: function(window) {
    if (typeof window !== 'object' || !window.RTCPeerConnection) {
      return;
    }
    var prototype = window.RTCPeerConnection.prototype;
    var createOffer = prototype.createOffer;
    var createAnswer = prototype.createAnswer;
    var setLocalDescription = prototype.setLocalDescription;
    var setRemoteDescription = prototype.setRemoteDescription;
    var addIceCandidate = prototype.addIceCandidate;

    prototype.createOffer = function(successCallback, failureCallback) {
      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      var promise = createOffer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

    prototype.createAnswer = function(successCallback, failureCallback) {
      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];
      var promise = createAnswer.apply(this, [options]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };

    var withCallback = function(description, successCallback, failureCallback) {
      var promise = setLocalDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setLocalDescription = withCallback;

    withCallback = function(description, successCallback, failureCallback) {
      var promise = setRemoteDescription.apply(this, [description]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.setRemoteDescription = withCallback;

    withCallback = function(candidate, successCallback, failureCallback) {
      var promise = addIceCandidate.apply(this, [candidate]);
      if (!failureCallback) {
        return promise;
      }
      promise.then(successCallback, failureCallback);
      return Promise.resolve();
    };
    prototype.addIceCandidate = withCallback;
  },
  shimGetUserMedia: function(window) {
    var navigator = window && window.navigator;

    if (!navigator.getUserMedia) {
      if (navigator.webkitGetUserMedia) {
        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);
      } else if (navigator.mediaDevices &&
          navigator.mediaDevices.getUserMedia) {
        navigator.getUserMedia = function(constraints, cb, errcb) {
          navigator.mediaDevices.getUserMedia(constraints)
          .then(cb, errcb);
        }.bind(navigator);
      }
    }
  },
  shimRTCIceServerUrls: function(window) {
    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
    var OrigPeerConnection = window.RTCPeerConnection;
    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
      if (pcConfig && pcConfig.iceServers) {
        var newIceServers = [];
        for (var i = 0; i < pcConfig.iceServers.length; i++) {
          var server = pcConfig.iceServers[i];
          if (!server.hasOwnProperty('urls') &&
              server.hasOwnProperty('url')) {
            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
            server = JSON.parse(JSON.stringify(server));
            server.urls = server.url;
            delete server.url;
            newIceServers.push(server);
          } else {
            newIceServers.push(pcConfig.iceServers[i]);
          }
        }
        pcConfig.iceServers = newIceServers;
      }
      return new OrigPeerConnection(pcConfig, pcConstraints);
    };
    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
    // wrap static methods. Currently just generateCertificate.
    if ('generateCertificate' in window.RTCPeerConnection) {
      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
        get: function() {
          return OrigPeerConnection.generateCertificate;
        }
      });
    }
  },
  shimTrackEventTransceiver: function(window) {
    // Add event.transceiver member over deprecated event.receiver
    if (typeof window === 'object' && window.RTCPeerConnection &&
        ('receiver' in window.RTCTrackEvent.prototype) &&
        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is
        // defined for some reason even when window.RTCTransceiver is not.
        !window.RTCTransceiver) {
      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {
        get: function() {
          return {receiver: this.receiver};
        }
      });
    }
  },

  shimCreateOfferLegacy: function(window) {
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function(offerOptions) {
      var pc = this;
      if (offerOptions) {
        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
        }
        var audioTransceiver = pc.getTransceivers().find(function(transceiver) {
          return transceiver.sender.track &&
              transceiver.sender.track.kind === 'audio';
        });
        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
          if (audioTransceiver.direction === 'sendrecv') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('sendonly');
            } else {
              audioTransceiver.direction = 'sendonly';
            }
          } else if (audioTransceiver.direction === 'recvonly') {
            if (audioTransceiver.setDirection) {
              audioTransceiver.setDirection('inactive');
            } else {
              audioTransceiver.direction = 'inactive';
            }
          }
        } else if (offerOptions.offerToReceiveAudio === true &&
            !audioTransceiver) {
          pc.addTransceiver('audio');
        }


        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {
          // support bit values
          offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
        }
        var videoTransceiver = pc.getTransceivers().find(function(transceiver) {
          return transceiver.sender.track &&
              transceiver.sender.track.kind === 'video';
        });
        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
          if (videoTransceiver.direction === 'sendrecv') {
            videoTransceiver.setDirection('sendonly');
          } else if (videoTransceiver.direction === 'recvonly') {
            videoTransceiver.setDirection('inactive');
          }
        } else if (offerOptions.offerToReceiveVideo === true &&
            !videoTransceiver) {
          pc.addTransceiver('video');
        }
      }
      return origCreateOffer.apply(pc, arguments);
    };
  }
};


/***/ }),

/***/ "./node_modules/webrtc-adapter/src/js/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/webrtc-adapter/src/js/utils.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */
 /* eslint-env node */


var logDisabled_ = true;
var deprecationWarnings_ = true;

/**
 * Extract browser version out of the provided user agent string.
 *
 * @param {!string} uastring userAgent string.
 * @param {!string} expr Regular expression used as match criteria.
 * @param {!number} pos position in the version string to be returned.
 * @return {!number} browser version.
 */
function extractVersion(uastring, expr, pos) {
  var match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

// Wraps the peerconnection event eventNameToWrap in a function
// which returns the modified event object (or false to prevent
// the event).
function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {
  if (!window.RTCPeerConnection) {
    return;
  }
  var proto = window.RTCPeerConnection.prototype;
  var nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    var wrappedCallback = function(e) {
      var modifiedEvent = wrapper(e);
      if (modifiedEvent) {
        cb(modifiedEvent);
      }
    };
    this._eventMap = this._eventMap || {};
    this._eventMap[cb] = wrappedCallback;
    return nativeAddEventListener.apply(this, [nativeEventName,
      wrappedCallback]);
  };

  var nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap
        || !this._eventMap[cb]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    var unwrappedCb = this._eventMap[cb];
    delete this._eventMap[cb];
    return nativeRemoveEventListener.apply(this, [nativeEventName,
      unwrappedCb]);
  };

  Object.defineProperty(proto, 'on' + eventNameToWrap, {
    get: function() {
      return this['_on' + eventNameToWrap];
    },
    set: function(cb) {
      if (this['_on' + eventNameToWrap]) {
        this.removeEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap]);
        delete this['_on' + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(eventNameToWrap,
            this['_on' + eventNameToWrap] = cb);
      }
    },
    enumerable: true,
    configurable: true
  });
}

// Utility methods.
module.exports = {
  extractVersion: extractVersion,
  wrapPeerConnectionEvent: wrapPeerConnectionEvent,
  disableLog: function(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool +
          '. Please use a boolean.');
    }
    logDisabled_ = bool;
    return (bool) ? 'adapter.js logging disabled' :
        'adapter.js logging enabled';
  },

  /**
   * Disable or enable deprecation warnings
   * @param {!boolean} bool set to true to disable warnings.
   */
  disableWarnings: function(bool) {
    if (typeof bool !== 'boolean') {
      return new Error('Argument type: ' + typeof bool +
          '. Please use a boolean.');
    }
    deprecationWarnings_ = !bool;
    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
  },

  log: function() {
    if (typeof window === 'object') {
      if (logDisabled_) {
        return;
      }
      if (typeof console !== 'undefined' && typeof console.log === 'function') {
        console.log.apply(console, arguments);
      }
    }
  },

  /**
   * Shows a deprecation warning suggesting the modern and spec-compatible API.
   */
  deprecated: function(oldMethod, newMethod) {
    if (!deprecationWarnings_) {
      return;
    }
    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
        ' instead.');
  },

  /**
   * Browser detector.
   *
   * @return {object} result containing browser and version
   *     properties.
   */
  detectBrowser: function(window) {
    var navigator = window && window.navigator;

    // Returned result object.
    var result = {};
    result.browser = null;
    result.version = null;

    // Fail early if it's not a browser
    if (typeof window === 'undefined' || !window.navigator) {
      result.browser = 'Not a browser.';
      return result;
    }

    if (navigator.mozGetUserMedia) { // Firefox.
      result.browser = 'firefox';
      result.version = extractVersion(navigator.userAgent,
          /Firefox\/(\d+)\./, 1);
    } else if (navigator.webkitGetUserMedia) {
      // Chrome, Chromium, Webview, Opera.
      // Version matches Chrome/WebRTC version.
      result.browser = 'chrome';
      result.version = extractVersion(navigator.userAgent,
          /Chrom(e|ium)\/(\d+)\./, 2);
    } else if (navigator.mediaDevices &&
        navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) { // Edge.
      result.browser = 'edge';
      result.version = extractVersion(navigator.userAgent,
          /Edge\/(\d+).(\d+)$/, 2);
    } else if (window.RTCPeerConnection &&
        navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) { // Safari.
      result.browser = 'safari';
      result.version = extractVersion(navigator.userAgent,
          /AppleWebKit\/(\d+)\./, 1);
    } else { // Default fallthrough: not supported.
      result.browser = 'Not a supported browser.';
      return result;
    }

    return result;
  }
};


/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, title, version, description, main, scripts, author, license, bugs, homepage, dependencies, devDependencies, default */
/***/ (function(module) {

module.exports = {"name":"plivo-browser-sdk","title":"plivo-browser-sdk","version":"2.1.15","description":"This library allows you to connect with plivo's voice enviroment from browser","main":"./dist/plivo.js","scripts":{"start":"webpack-dev-server --env.development --env.PLIVO_ENV=production","start:staging":"webpack-dev-server --env.development --env.PLIVO_ENV=staging","build":"webpack  --env.production --env.PLIVO_ENV=production","build:staging":"webpack  --env.production --env.PLIVO_ENV=staging","build:npm":"webpack  --env.production --env.npm --env.PLIVO_ENV=production","build:nominify":"webpack  --env.production --env.nominify --env.PLIVO_ENV=production","build:nominify:staging":"webpack  --env.production --env.nominify --env.PLIVO_ENV=staging","publish:npm":"rm -rf dist && npm run build:npm && npm publish","test":"node test/server.js & karma start --single-run --browsers FirefoxHeadless,ChromeWebRTC karma.conf.js","beta-version-patch":"npm version $(semver $npm_package_version -i prerelease --preid beta)","beta-version-minor":"npm version $(semver $npm_package_version -i preminor --preid beta)","beta-version-major":"npm version $(semver $npm_package_version -i premajor --preid beta)","rc-version":"npm version $(semver $npm_package_version -i prerelease --preid rc)","final-release":"npm version $(semver $npm_package_version -i)","semver":"npm version $(semver $npm_package_version -i $release --preid $preid)"},"author":"Plivo","license":"Apache-2.0","bugs":{"url":"https://github.com/plivo/plivo-websdk-2.0-example/issues"},"homepage":"https://www.plivo.com/docs/sdk/web/","dependencies":{"debug":"^2.6.3","events":"^2.0.0","sdp-transform":"^2.4.1","semver-parser":"^2.0.4","uuid":"^2.0.3","webrtc-adapter":"^6.3.0","compare-versions":"^3.3.1"},"devDependencies":{"browserify":"^16.2.2","chai":"^4.1.2","karma":"^2.0.3","karma-browserify":"^5.3.0","karma-chai":"^0.1.0","karma-chrome-launcher":"^2.2.0","karma-firefox-launcher":"^1.1.0","karma-mocha":"^1.3.0","karma-mocha-reporter":"^2.2.5","mkdirp":"^0.5.1","mocha":"^5.2.0","replace-in-file-webpack-plugin":"^1.0.6","script-loader":"^0.7.2","string-replace-loader":"^2.1.1","string-replace-webpack-plugin":"^0.1.3","uglifyjs-webpack-plugin":"^1.2.7","webpack":"^4.16.3","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.5"}};

/***/ }),

/***/ "./sipLib/Config.js":
/*!**************************!*\
  !*** ./sipLib/Config.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");
const URI = __webpack_require__(/*! ./URI */ "./sipLib/URI.js");
const Socket = __webpack_require__(/*! ./Socket */ "./sipLib/Socket.js");
const Exceptions = __webpack_require__(/*! ./Exceptions */ "./sipLib/Exceptions.js");

// Default settings.
exports.settings = {
  // SIP authentication.
  authorization_user : null,
  password           : null,
  realm              : null,
  ha1                : null,

  // SIP account.
  display_name : null,
  uri          : null,
  contact_uri  : null,

  // SIP instance id (GRUU).
  instance_id : null,

  // Preloaded SIP Route header field.
  use_preloaded_route : false,

  // Session parameters.
  session_timers                : true,
  session_timers_refresh_method : JsSIP_C.UPDATE,
  no_answer_timeout             : 60,

  // Registration parameters.
  register         : true,
  register_expires : 600,
  registrar_server : null,

  // Connection options.
  sockets                          : null,
  connection_recovery_max_interval : null,
  connection_recovery_min_interval : null,

  /*
   * Host address.
   * Value to be set in Via sent_by and host part of Contact FQDN.
  */
  via_host : `${Utils.createRandomToken(12)}.invalid`
};

// Configuration checks.
const checks = {
  mandatory : {

    sockets(sockets)
    {
      /* Allow defining sockets parameter as:
       *  Socket: socket
       *  Array of Socket: [socket1, socket2]
       *  Array of Objects: [{socket: socket1, weight:1}, {socket: Socket2, weight:0}]
       *  Array of Objects and Socket: [{socket: socket1}, socket2]
       */
      const _sockets = [];

      if (Socket.isSocket(sockets))
      {
        _sockets.push({ socket: sockets });
      }
      else if (Array.isArray(sockets) && sockets.length)
      {
        for (const socket of sockets)
        {
          if (Object.prototype.hasOwnProperty.call(socket, 'socket') &&
              Socket.isSocket(socket.socket))
          {
            _sockets.push(socket);
          }
          else if (Socket.isSocket(socket))
          {
            _sockets.push({ socket: socket });
          }
        }
      }
      else
      {
        return;
      }

      return _sockets;
    },

    uri(uri)
    {
      if (!/^sip:/i.test(uri))
      {
        uri = `${JsSIP_C.SIP}:${uri}`;
      }
      const parsed = URI.parse(uri);

      if (!parsed)
      {
        return;
      }
      else if (!parsed.user)
      {
        return;
      }
      else
      {
        return parsed;
      }
    }
  },

  optional : {

    authorization_user(authorization_user)
    {
      if (Grammar.parse(`"${authorization_user}"`, 'quoted_string') === -1)
      {
        return;
      }
      else
      {
        return authorization_user;
      }
    },

    user_agent(user_agent)
    {
      if (typeof user_agent === 'string')
      {
        return user_agent;
      }
    },

    connection_recovery_max_interval(connection_recovery_max_interval)
    {
      if (Utils.isDecimal(connection_recovery_max_interval))
      {
        const value = Number(connection_recovery_max_interval);

        if (value > 0)
        {
          return value;
        }
      }
    },

    connection_recovery_min_interval(connection_recovery_min_interval)
    {
      if (Utils.isDecimal(connection_recovery_min_interval))
      {
        const value = Number(connection_recovery_min_interval);

        if (value > 0)
        {
          return value;
        }
      }
    },

    contact_uri(contact_uri)
    {
      if (typeof contact_uri === 'string')
      {
        const uri = Grammar.parse(contact_uri, 'SIP_URI');

        if (uri !== -1)
        {
          return uri;
        }
      }
    },

    display_name(display_name)
    {
      if (Grammar.parse(`"${display_name}"`, 'display_name') === -1)
      {
        return;
      }
      else
      {
        return display_name;
      }
    },

    instance_id(instance_id)
    {
      if ((/^uuid:/i.test(instance_id)))
      {
        instance_id = instance_id.substr(5);
      }

      if (Grammar.parse(instance_id, 'uuid') === -1)
      {
        return;
      }
      else
      {
        return instance_id;
      }
    },

    no_answer_timeout(no_answer_timeout)
    {
      if (Utils.isDecimal(no_answer_timeout))
      {
        const value = Number(no_answer_timeout);

        if (value > 0)
        {
          return value;
        }
      }
    },

    session_timers(session_timers)
    {
      if (typeof session_timers === 'boolean')
      {
        return session_timers;
      }
    },

    session_timers_refresh_method(method)
    {
      if (typeof method === 'string')
      {
        method = method.toUpperCase();

        if (method === JsSIP_C.INVITE || method === JsSIP_C.UPDATE)
        {
          return method;
        }
      }
    },

    password(password)
    {
      return String(password);
    },

    realm(realm)
    {
      return String(realm);
    },

    ha1(ha1)
    {
      return String(ha1);
    },

    register(register)
    {
      if (typeof register === 'boolean')
      {
        return register;
      }
    },

    register_expires(register_expires)
    {
      if (Utils.isDecimal(register_expires))
      {
        const value = Number(register_expires);

        if (value > 0)
        {
          return value;
        }
      }
    },

    registrar_server(registrar_server)
    {
      if (!/^sip:/i.test(registrar_server))
      {
        registrar_server = `${JsSIP_C.SIP}:${registrar_server}`;
      }

      const parsed = URI.parse(registrar_server);

      if (!parsed)
      {
        return;
      }
      else if (parsed.user)
      {
        return;
      }
      else
      {
        return parsed;
      }
    },

    use_preloaded_route(use_preloaded_route)
    {
      if (typeof use_preloaded_route === 'boolean')
      {
        return use_preloaded_route;
      }
    }
  }
};

exports.load = (dst, src) =>
{
  // Check Mandatory parameters.
  for (const parameter in checks.mandatory)
  {
    if (!src.hasOwnProperty(parameter))
    {
      throw new Exceptions.ConfigurationError(parameter);
    }
    else
    {
      const value = src[parameter];
      const checked_value = checks.mandatory[parameter](value);

      if (checked_value !== undefined)
      {
        dst[parameter] = checked_value;
      }
      else
      {
        throw new Exceptions.ConfigurationError(parameter, value);
      }
    }
  }

  // Check Optional parameters.
  for (const parameter in checks.optional)
  {
    if (src.hasOwnProperty(parameter))
    {
      const value = src[parameter];

      /* If the parameter value is null, empty string, undefined, empty array
       * or it's a number with NaN value, then apply its default value.
       */
      if (Utils.isEmpty(value))
      {
        continue;
      }

      const checked_value = checks.optional[parameter](value);

      if (checked_value !== undefined)
      {
        dst[parameter] = checked_value;
      }
      else
      {
        throw new Exceptions.ConfigurationError(parameter, value);
      }
    }
  }
};


/***/ }),

/***/ "./sipLib/Constants.js":
/*!*****************************!*\
  !*** ./sipLib/Constants.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const pkg = __webpack_require__(/*! ../package.json */ "./package.json");

module.exports = {
  USER_AGENT : `${pkg.title} ${pkg.version}`,

  // SIP scheme.
  SIP  : 'sip',
  SIPS : 'sips',

  // End and Failure causes.
  causes : {
    // Generic error causes.
    CONNECTION_ERROR : 'Connection Error',
    REQUEST_TIMEOUT  : 'Request Timeout',
    SIP_FAILURE_CODE : 'SIP Failure Code',
    INTERNAL_ERROR   : 'Internal Error',

    // SIP error causes.
    BUSY                 : 'Busy',
    REJECTED             : 'Rejected',
    REDIRECTED           : 'Redirected',
    UNAVAILABLE          : 'Unavailable',
    NOT_FOUND            : 'Not Found',
    ADDRESS_INCOMPLETE   : 'Address Incomplete',
    INCOMPATIBLE_SDP     : 'Incompatible SDP',
    MISSING_SDP          : 'Missing SDP',
    AUTHENTICATION_ERROR : 'Authentication Error',

    // Session error causes.
    BYE                      : 'Terminated',
    WEBRTC_ERROR             : 'WebRTC Error',
    CANCELED                 : 'Canceled',
    NO_ANSWER                : 'No Answer',
    EXPIRES                  : 'Expires',
    NO_ACK                   : 'No ACK',
    DIALOG_ERROR             : 'Dialog Error',
    USER_DENIED_MEDIA_ACCESS : 'User Denied Media Access',
    BAD_MEDIA_DESCRIPTION    : 'Bad Media Description',
    RTP_TIMEOUT              : 'RTP Timeout'
  },

  SIP_ERROR_CAUSES : {
    REDIRECTED           : [ 300, 301, 302, 305, 380 ],
    BUSY                 : [ 486, 600 ],
    REJECTED             : [ 403, 603 ],
    NOT_FOUND            : [ 404, 604 ],
    UNAVAILABLE          : [ 480, 410, 408, 430 ],
    ADDRESS_INCOMPLETE   : [ 484, 424 ],
    INCOMPATIBLE_SDP     : [ 488, 606 ],
    AUTHENTICATION_ERROR : [ 401, 407 ]
  },

  // SIP Methods.
  ACK       : 'ACK',
  BYE       : 'BYE',
  CANCEL    : 'CANCEL',
  INFO      : 'INFO',
  INVITE    : 'INVITE',
  MESSAGE   : 'MESSAGE',
  NOTIFY    : 'NOTIFY',
  OPTIONS   : 'OPTIONS',
  REGISTER  : 'REGISTER',
  REFER     : 'REFER',
  UPDATE    : 'UPDATE',
  SUBSCRIBE : 'SUBSCRIBE',

  /* SIP Response Reasons
   * DOC: http://www.iana.org/assignments/sip-parameters
   * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7
   */
  REASON_PHRASE : {
    100 : 'Trying',
    180 : 'Ringing',
    181 : 'Call Is Being Forwarded',
    182 : 'Queued',
    183 : 'Session Progress',
    199 : 'Early Dialog Terminated', // draft-ietf-sipcore-199
    200 : 'OK',
    202 : 'Accepted', // RFC 3265
    204 : 'No Notification', // RFC 5839
    300 : 'Multiple Choices',
    301 : 'Moved Permanently',
    302 : 'Moved Temporarily',
    305 : 'Use Proxy',
    380 : 'Alternative Service',
    400 : 'Bad Request',
    401 : 'Unauthorized',
    402 : 'Payment Required',
    403 : 'Forbidden',
    404 : 'Not Found',
    405 : 'Method Not Allowed',
    406 : 'Not Acceptable',
    407 : 'Proxy Authentication Required',
    408 : 'Request Timeout',
    410 : 'Gone',
    412 : 'Conditional Request Failed', // RFC 3903
    413 : 'Request Entity Too Large',
    414 : 'Request-URI Too Long',
    415 : 'Unsupported Media Type',
    416 : 'Unsupported URI Scheme',
    417 : 'Unknown Resource-Priority', // RFC 4412
    420 : 'Bad Extension',
    421 : 'Extension Required',
    422 : 'Session Interval Too Small', // RFC 4028
    423 : 'Interval Too Brief',
    424 : 'Bad Location Information', // RFC 6442
    428 : 'Use Identity Header', // RFC 4474
    429 : 'Provide Referrer Identity', // RFC 3892
    430 : 'Flow Failed', // RFC 5626
    433 : 'Anonymity Disallowed', // RFC 5079
    436 : 'Bad Identity-Info', // RFC 4474
    437 : 'Unsupported Certificate', // RFC 4744
    438 : 'Invalid Identity Header', // RFC 4744
    439 : 'First Hop Lacks Outbound Support', // RFC 5626
    440 : 'Max-Breadth Exceeded', // RFC 5393
    469 : 'Bad Info Package', // draft-ietf-sipcore-info-events
    470 : 'Consent Needed', // RFC 5360
    478 : 'Unresolvable Destination', // Custom code copied from Kamailio.
    480 : 'Temporarily Unavailable',
    481 : 'Call/Transaction Does Not Exist',
    482 : 'Loop Detected',
    483 : 'Too Many Hops',
    484 : 'Address Incomplete',
    485 : 'Ambiguous',
    486 : 'Busy Here',
    487 : 'Request Terminated',
    488 : 'Not Acceptable Here',
    489 : 'Bad Event', // RFC 3265
    491 : 'Request Pending',
    493 : 'Undecipherable',
    494 : 'Security Agreement Required', // RFC 3329
    500 : 'JsSIP Internal Error',
    501 : 'Not Implemented',
    502 : 'Bad Gateway',
    503 : 'Service Unavailable',
    504 : 'Server Time-out',
    505 : 'Version Not Supported',
    513 : 'Message Too Large',
    580 : 'Precondition Failure', // RFC 3312
    600 : 'Busy Everywhere',
    603 : 'Decline',
    604 : 'Does Not Exist Anywhere',
    606 : 'Not Acceptable'
  },

  ALLOWED_METHODS     : 'INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO',
  ACCEPTED_BODY_TYPES : 'application/sdp, application/dtmf-relay',
  MAX_FORWARDS        : 69,
  SESSION_EXPIRES     : 90,
  MIN_SESSION_EXPIRES : 60
};


/***/ }),

/***/ "./sipLib/Dialog.js":
/*!**************************!*\
  !*** ./sipLib/Dialog.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const SIPMessage = __webpack_require__(/*! ./SIPMessage */ "./sipLib/SIPMessage.js");
const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const Transactions = __webpack_require__(/*! ./Transactions */ "./sipLib/Transactions.js");
const Dialog_RequestSender = __webpack_require__(/*! ./Dialog/RequestSender */ "./sipLib/Dialog/RequestSender.js");
const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:Dialog');

const C = {
  // Dialog states.
  STATUS_EARLY     : 1,
  STATUS_CONFIRMED : 2
};

// RFC 3261 12.1.
module.exports = class Dialog
{
  // Expose C object.
  static get C()
  {
    return C;
  }

  constructor(owner, message, type, state = C.STATUS_CONFIRMED)
  {
    this._owner = owner;
    this._ua = owner._ua;

    this._uac_pending_reply = false;
    this._uas_pending_reply = false;

    if (!message.hasHeader('contact'))
    {
      return {
        error : 'unable to create a Dialog without Contact header field'
      };
    }

    if (message instanceof SIPMessage.IncomingResponse)
    {
      state = (message.status_code < 200) ? C.STATUS_EARLY : C.STATUS_CONFIRMED;
    }

    const contact = message.parseHeader('contact');

    // RFC 3261 12.1.1.
    if (type === 'UAS')
    {
      this._id = {
        call_id    : message.call_id,
        local_tag  : message.to_tag,
        remote_tag : message.from_tag,
        toString()
        {
          return this.call_id + this.local_tag + this.remote_tag;
        }
      };
      this._state = state;
      this._remote_seqnum = message.cseq;
      this._local_uri = message.parseHeader('to').uri;
      this._remote_uri = message.parseHeader('from').uri;
      this._remote_target = contact.uri;
      this._route_set = message.getHeaders('record-route');
      this._ack_seqnum = this._remote_seqnum;
    }
    // RFC 3261 12.1.2.
    else if (type === 'UAC')
    {
      this._id = {
        call_id    : message.call_id,
        local_tag  : message.from_tag,
        remote_tag : message.to_tag,
        toString()
        {
          return this.call_id + this.local_tag + this.remote_tag;
        }
      };
      this._state = state;
      this._local_seqnum = message.cseq;
      this._local_uri = message.parseHeader('from').uri;
      this._remote_uri = message.parseHeader('to').uri;
      this._remote_target = contact.uri;
      this._route_set = message.getHeaders('record-route').reverse();
      this._ack_seqnum = null;

    }

    this._ua.newDialog(this);
    debug(`new ${type} dialog created with status ${this._state === C.STATUS_EARLY ? 'EARLY': 'CONFIRMED'}`);
  }

  get id()
  {
    return this._id;
  }

  get local_seqnum()
  {
    return this._local_seqnum;
  }

  set local_seqnum(num)
  {
    this._local_seqnum = num;
  }

  get owner()
  {
    return this._owner;
  }

  get uac_pending_reply()
  {
    return this._uac_pending_reply;
  }

  set uac_pending_reply(pending)
  {
    this._uac_pending_reply = pending;
  }

  get uas_pending_reply()
  {
    return this._uas_pending_reply;
  }

  update(message, type)
  {
    this._state = C.STATUS_CONFIRMED;

    debug(`dialog ${this._id.toString()}  changed to CONFIRMED state`);

    if (type === 'UAC')
    {
      // RFC 3261 13.2.2.4.
      this._route_set = message.getHeaders('record-route').reverse();
    }
  }

  terminate()
  {
    debug(`dialog ${this._id.toString()} deleted`);
    this._ua.destroyDialog(this);
  }

  sendRequest(method, options = {})
  {
    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const eventHandlers = options.eventHandlers || {};
    const body = options.body || null;
    const request = this._createRequest(method, extraHeaders, body);

    // Increase the local CSeq on authentication.
    eventHandlers.onAuthenticated = () =>
    {
      this._local_seqnum += 1;
    };

    const request_sender = new Dialog_RequestSender(this, request, eventHandlers);

    request_sender.send();

    // Return the instance of OutgoingRequest.
    return request;
  }

  receiveRequest(request)
  {
    // Check in-dialog request.
    if (!this._checkInDialogRequest(request))
    {
      return;
    }

    // ACK received. Cleanup this._ack_seqnum.
    if (request.method === JsSIP_C.ACK && this._ack_seqnum !== null)
    {
      this._ack_seqnum = null;
    }
    // INVITE received. Set this._ack_seqnum.
    else if (request.method === JsSIP_C.INVITE)
    {
      this._ack_seqnum = request.cseq;
    }

    this._owner.receiveRequest(request);
  }

  // RFC 3261 12.2.1.1.
  _createRequest(method, extraHeaders, body)
  {
    extraHeaders = Utils.cloneArray(extraHeaders);

    if (!this._local_seqnum) { this._local_seqnum = Math.floor(Math.random() * 10000); }

    const cseq = (method === JsSIP_C.CANCEL || method === JsSIP_C.ACK) ?
      this._local_seqnum :
      this._local_seqnum += 1;

    const request = new SIPMessage.OutgoingRequest(
      method,
      this._remote_target,
      this._ua, {
        'cseq'      : cseq,
        'call_id'   : this._id.call_id,
        'from_uri'  : this._local_uri,
        'from_tag'  : this._id.local_tag,
        'to_uri'    : this._remote_uri,
        'to_tag'    : this._id.remote_tag,
        'route_set' : this._route_set
      }, extraHeaders, body);

    return request;
  }

  // RFC 3261 12.2.2.
  _checkInDialogRequest(request)
  {

    if (!this._remote_seqnum)
    {
      this._remote_seqnum = request.cseq;
    }
    else if (request.cseq < this._remote_seqnum)
    {
      if (request.method === JsSIP_C.ACK)
      {
        // We are not expecting any ACK with lower seqnum than the current one.
        // Or this is not the ACK we are waiting for.
        if (this._ack_seqnum === null || request.cseq !== this._ack_seqnum)
        {
          return false;
        }
      }
      else
      {
        request.reply(500);

        return false;
      }
    }
    else if (request.cseq > this._remote_seqnum)
    {
      this._remote_seqnum = request.cseq;
    }

    // RFC3261 14.2 Modifying an Existing Session -UAS BEHAVIOR-.
    if (request.method === JsSIP_C.INVITE ||
        (request.method === JsSIP_C.UPDATE && request.body))
    {
      if (this._uac_pending_reply === true)
      {
        request.reply(491);
      }
      else if (this._uas_pending_reply === true)
      {
        const retryAfter = (Math.random() * 10 | 0) + 1;

        request.reply(500, null, [ `Retry-After:${retryAfter}` ]);

        return false;
      }
      else
      {
        this._uas_pending_reply = true;

        const stateChanged = () =>
        {
          if (request.server_transaction.state === Transactions.C.STATUS_ACCEPTED ||
              request.server_transaction.state === Transactions.C.STATUS_COMPLETED ||
              request.server_transaction.state === Transactions.C.STATUS_TERMINATED)
          {

            request.server_transaction.removeListener('stateChanged', stateChanged);
            this._uas_pending_reply = false;
          }
        };

        request.server_transaction.on('stateChanged', stateChanged);
      }

      // RFC3261 12.2.2 Replace the dialog`s remote target URI if the request is accepted.
      if (request.hasHeader('contact'))
      {
        request.server_transaction.on('stateChanged', () =>
        {
          if (request.server_transaction.state === Transactions.C.STATUS_ACCEPTED)
          {
            this._remote_target = request.parseHeader('contact').uri;
          }
        });
      }
    }
    else if (request.method === JsSIP_C.NOTIFY)
    {
      // RFC6665 3.2 Replace the dialog`s remote target URI if the request is accepted.
      if (request.hasHeader('contact'))
      {
        request.server_transaction.on('stateChanged', () =>
        {
          if (request.server_transaction.state === Transactions.C.STATUS_COMPLETED)
          {
            this._remote_target = request.parseHeader('contact').uri;
          }
        });
      }
    }

    return true;
  }
};


/***/ }),

/***/ "./sipLib/Dialog/RequestSender.js":
/*!****************************************!*\
  !*** ./sipLib/Dialog/RequestSender.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const JsSIP_C = __webpack_require__(/*! ../Constants */ "./sipLib/Constants.js");
const Transactions = __webpack_require__(/*! ../Transactions */ "./sipLib/Transactions.js");
const RTCSession = __webpack_require__(/*! ../RTCSession */ "./sipLib/RTCSession.js");
const RequestSender = __webpack_require__(/*! ../RequestSender */ "./sipLib/RequestSender.js");

// Default event handlers.
const EventHandlers = {
  onRequestTimeout  : () => {},
  onTransportError  : () => {},
  onSuccessResponse : () => {},
  onErrorResponse   : () => {},
  onAuthenticated   : () => {},
  onDialogError     : () => {}
};

module.exports = class DialogRequestSender
{
  constructor(dialog, request, eventHandlers)
  {
    this._dialog = dialog;
    this._ua = dialog._ua;
    this._request = request;
    this._eventHandlers = eventHandlers;

    // RFC3261 14.1 Modifying an Existing Session. UAC Behavior.
    this._reattempt = false;
    this._reattemptTimer = null;

    // Define the undefined handlers.
    for (const handler in EventHandlers)
    {
      if (Object.prototype.hasOwnProperty.call(EventHandlers, handler))
      {
        if (!this._eventHandlers[handler])
        {
          this._eventHandlers[handler] = EventHandlers[handler];
        }
      }
    }
  }

  get request()
  {
    return this._request;
  }

  send()
  {
    const request_sender = new RequestSender(this._ua, this._request, {
      onRequestTimeout : () =>
      {
        this._eventHandlers.onRequestTimeout();
      },
      onTransportError : () =>
      {
        this._eventHandlers.onTransportError();
      },
      onAuthenticated : (request) =>
      {
        this._eventHandlers.onAuthenticated(request);
      },
      onReceiveResponse : (response) =>
      {
        this._receiveResponse(response);
      }
    });

    request_sender.send();

    // RFC3261 14.2 Modifying an Existing Session -UAC BEHAVIOR-.
    if ((this._request.method === JsSIP_C.INVITE ||
          (this._request.method === JsSIP_C.UPDATE && this._request.body)) &&
        request_sender.clientTransaction.state !== Transactions.C.STATUS_TERMINATED)
    {
      this._dialog.uac_pending_reply = true;

      const stateChanged = () =>
      {
        if (request_sender.clientTransaction.state === Transactions.C.STATUS_ACCEPTED ||
            request_sender.clientTransaction.state === Transactions.C.STATUS_COMPLETED ||
            request_sender.clientTransaction.state === Transactions.C.STATUS_TERMINATED)
        {
          request_sender.clientTransaction.removeListener('stateChanged', stateChanged);
          this._dialog.uac_pending_reply = false;
        }
      };

      request_sender.clientTransaction.on('stateChanged', stateChanged);
    }
  }

  _receiveResponse(response)
  {
    // RFC3261 12.2.1.2 408 or 481 is received for a request within a dialog.
    if (response.status_code === 408 || response.status_code === 481)
    {
      this._eventHandlers.onDialogError(response);
    }
    else if (response.method === JsSIP_C.INVITE && response.status_code === 491)
    {
      if (this._reattempt)
      {
        if (response.status_code >= 200 && response.status_code < 300)
        {
          this._eventHandlers.onSuccessResponse(response);
        }
        else if (response.status_code >= 300)
        {
          this._eventHandlers.onErrorResponse(response);
        }
      }
      else
      {
        this._request.cseq.value = this._dialog.local_seqnum += 1;
        this._reattemptTimer = setTimeout(() =>
        {
          // TODO: look at dialog state instead.
          if (this._dialog.owner.status !== RTCSession.C.STATUS_TERMINATED)
          {
            this._reattempt = true;
            this._request_sender.send();
          }
        }, 1000);
      }
    }
    else if (response.status_code >= 200 && response.status_code < 300)
    {
      this._eventHandlers.onSuccessResponse(response);
    }
    else if (response.status_code >= 300)
    {
      this._eventHandlers.onErrorResponse(response);
    }
  }
};


/***/ }),

/***/ "./sipLib/DigestAuthentication.js":
/*!****************************************!*\
  !*** ./sipLib/DigestAuthentication.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:DigestAuthentication');
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:DigestAuthentication');

debugerror.log = console.warn.bind(console);

module.exports = class DigestAuthentication
{
  constructor(credentials)
  {
    this._credentials = credentials;
    this._cnonce = null;
    this._nc = 0;
    this._ncHex = '00000000';
    this._algorithm = null;
    this._realm = null;
    this._nonce = null;
    this._opaque = null;
    this._stale = null;
    this._qop = null;
    this._method = null;
    this._uri = null;
    this._ha1 = null;
    this._response = null;
  }

  get(parameter)
  {
    switch (parameter)
    {
      case 'realm':
        return this._realm;

      case 'ha1':
        return this._ha1;

      default:
        debugerror('get() | cannot get "%s" parameter', parameter);

        return undefined;
    }
  }

  /**
  * Performs Digest authentication given a SIP request and the challenge
  * received in a response to that request.
  * Returns true if auth was successfully generated, false otherwise.
  */
  authenticate({ method, ruri, body }, challenge, cnonce = null /* test interface */)
  {
    this._algorithm = challenge.algorithm;
    this._realm = challenge.realm;
    this._nonce = challenge.nonce;
    this._opaque = challenge.opaque;
    this._stale = challenge.stale;

    if (this._algorithm)
    {
      if (this._algorithm !== 'MD5')
      {
        debugerror('authenticate() | challenge with Digest algorithm different than "MD5", authentication aborted');

        return false;
      }
    }
    else
    {
      this._algorithm = 'MD5';
    }

    if (!this._nonce)
    {
      debugerror('authenticate() | challenge without Digest nonce, authentication aborted');

      return false;
    }

    if (!this._realm)
    {
      debugerror('authenticate() | challenge without Digest realm, authentication aborted');

      return false;
    }

    // If no plain SIP password is provided.
    if (!this._credentials.password)
    {
      // If ha1 is not provided we cannot authenticate.
      if (!this._credentials.ha1)
      {
        debugerror('authenticate() | no plain SIP password nor ha1 provided, authentication aborted');

        return false;
      }

      // If the realm does not match the stored realm we cannot authenticate.
      if (this._credentials.realm !== this._realm)
      {
        debugerror('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:"%s", given:"%s"]', this._credentials.realm, this._realm);

        return false;
      }
    }

    // 'qop' can contain a list of values (Array). Let's choose just one.
    if (challenge.qop)
    {
      if (challenge.qop.indexOf('auth-int') > -1)
      {
        this._qop = 'auth-int';
      }
      else if (challenge.qop.indexOf('auth') > -1)
      {
        this._qop = 'auth';
      }
      else
      {
        // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.
        debugerror('authenticate() | challenge without Digest qop different than "auth" or "auth-int", authentication aborted');

        return false;
      }
    }
    else
    {
      this._qop = null;
    }

    // Fill other attributes.

    this._method = method;
    this._uri = ruri;
    this._cnonce = cnonce || Utils.createRandomToken(12);
    this._nc += 1;
    const hex = Number(this._nc).toString(16);

    this._ncHex = '00000000'.substr(0, 8-hex.length) + hex;

    // Nc-value = 8LHEX. Max value = 'FFFFFFFF'.
    if (this._nc === 4294967296)
    {
      this._nc = 1;
      this._ncHex = '00000001';
    }

    // Calculate the Digest "response" value.

    // If we have plain SIP password then regenerate ha1.
    if (this._credentials.password)
    {
      // HA1 = MD5(A1) = MD5(username:realm:password).
      this._ha1 = Utils.calculateMD5(`${this._credentials.username}:${this._realm}:${this._credentials.password}`);
    }
    // Otherwise reuse the stored ha1.
    else
    {
      this._ha1 = this._credentials.ha1;
    }

    let ha2;

    if (this._qop === 'auth')
    {
      // HA2 = MD5(A2) = MD5(method:digestURI).
      ha2 = Utils.calculateMD5(`${this._method}:${this._uri}`);
      // Response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2).
      this._response = Utils.calculateMD5(`${this._ha1}:${this._nonce}:${this._ncHex}:${this._cnonce}:auth:${ha2}`);

    }
    else if (this._qop === 'auth-int')
    {
      // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody)).
      ha2 = Utils.calculateMD5(`${this._method}:${this._uri}:${Utils.calculateMD5(body ? body : '')}`);
      // Response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2).
      this._response = Utils.calculateMD5(`${this._ha1}:${this._nonce}:${this._ncHex}:${this._cnonce}:auth-int:${ha2}`);

    }
    else if (this._qop === null)
    {
      // HA2 = MD5(A2) = MD5(method:digestURI).
      ha2 = Utils.calculateMD5(`${this._method}:${this._uri}`);
      // Response = MD5(HA1:nonce:HA2).
      this._response = Utils.calculateMD5(`${this._ha1}:${this._nonce}:${ha2}`);
    }

    debug('authenticate() | response generated');

    return true;
  }

  /**
  * Return the Proxy-Authorization or WWW-Authorization header value.
  */
  toString()
  {
    const auth_params = [];

    if (!this._response)
    {
      throw new Error('response field does not exist, cannot generate Authorization header');
    }

    auth_params.push(`algorithm=${this._algorithm}`);
    auth_params.push(`username="${this._credentials.username}"`);
    auth_params.push(`realm="${this._realm}"`);
    auth_params.push(`nonce="${this._nonce}"`);
    auth_params.push(`uri="${this._uri}"`);
    auth_params.push(`response="${this._response}"`);
    if (this._opaque)
    {
      auth_params.push(`opaque="${this._opaque}"`);
    }
    if (this._qop)
    {
      auth_params.push(`qop=${this._qop}`);
      auth_params.push(`cnonce="${this._cnonce}"`);
      auth_params.push(`nc=${this._ncHex}`);
    }

    return `Digest ${auth_params.join(', ')}`;
  }
};


/***/ }),

/***/ "./sipLib/Exceptions.js":
/*!******************************!*\
  !*** ./sipLib/Exceptions.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

class ConfigurationError extends Error
{
  constructor(parameter, value)
  {
    super();

    this.code = 1;
    this.name = 'CONFIGURATION_ERROR';
    this.parameter = parameter;
    this.value = value;
    this.message = (!this.value)?
      `Missing parameter: ${this.parameter}` :
      `Invalid value ${JSON.stringify(this.value)} for parameter "${this.parameter}"`;
  }
}

class InvalidStateError extends Error
{
  constructor(status)
  {
    super();

    this.code = 2;
    this.name = 'INVALID_STATE_ERROR';
    this.status = status;
    this.message = `Invalid status: ${status}`;
  }
}

class NotSupportedError extends Error
{
  constructor(message)
  {
    super();

    this.code = 3;
    this.name = 'NOT_SUPPORTED_ERROR';
    this.message = message;
  }
}

class NotReadyError extends Error
{
  constructor(message)
  {
    super();

    this.code = 4;
    this.name = 'NOT_READY_ERROR';
    this.message = message;
  }
}

module.exports = {
  ConfigurationError,
  InvalidStateError,
  NotSupportedError,
  NotReadyError
};


/***/ }),

/***/ "./sipLib/Grammar.js":
/*!***************************!*\
  !*** ./sipLib/Grammar.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "CRLF": parse_CRLF,
        "DIGIT": parse_DIGIT,
        "ALPHA": parse_ALPHA,
        "HEXDIG": parse_HEXDIG,
        "WSP": parse_WSP,
        "OCTET": parse_OCTET,
        "DQUOTE": parse_DQUOTE,
        "SP": parse_SP,
        "HTAB": parse_HTAB,
        "alphanum": parse_alphanum,
        "reserved": parse_reserved,
        "unreserved": parse_unreserved,
        "mark": parse_mark,
        "escaped": parse_escaped,
        "LWS": parse_LWS,
        "SWS": parse_SWS,
        "HCOLON": parse_HCOLON,
        "TEXT_UTF8_TRIM": parse_TEXT_UTF8_TRIM,
        "TEXT_UTF8char": parse_TEXT_UTF8char,
        "UTF8_NONASCII": parse_UTF8_NONASCII,
        "UTF8_CONT": parse_UTF8_CONT,
        "LHEX": parse_LHEX,
        "token": parse_token,
        "token_nodot": parse_token_nodot,
        "separators": parse_separators,
        "word": parse_word,
        "STAR": parse_STAR,
        "SLASH": parse_SLASH,
        "EQUAL": parse_EQUAL,
        "LPAREN": parse_LPAREN,
        "RPAREN": parse_RPAREN,
        "RAQUOT": parse_RAQUOT,
        "LAQUOT": parse_LAQUOT,
        "COMMA": parse_COMMA,
        "SEMI": parse_SEMI,
        "COLON": parse_COLON,
        "LDQUOT": parse_LDQUOT,
        "RDQUOT": parse_RDQUOT,
        "comment": parse_comment,
        "ctext": parse_ctext,
        "quoted_string": parse_quoted_string,
        "quoted_string_clean": parse_quoted_string_clean,
        "qdtext": parse_qdtext,
        "quoted_pair": parse_quoted_pair,
        "SIP_URI_noparams": parse_SIP_URI_noparams,
        "SIP_URI": parse_SIP_URI,
        "uri_scheme": parse_uri_scheme,
        "uri_scheme_sips": parse_uri_scheme_sips,
        "uri_scheme_sip": parse_uri_scheme_sip,
        "userinfo": parse_userinfo,
        "user": parse_user,
        "user_unreserved": parse_user_unreserved,
        "password": parse_password,
        "hostport": parse_hostport,
        "host": parse_host,
        "hostname": parse_hostname,
        "domainlabel": parse_domainlabel,
        "toplabel": parse_toplabel,
        "IPv6reference": parse_IPv6reference,
        "IPv6address": parse_IPv6address,
        "h16": parse_h16,
        "ls32": parse_ls32,
        "IPv4address": parse_IPv4address,
        "dec_octet": parse_dec_octet,
        "port": parse_port,
        "uri_parameters": parse_uri_parameters,
        "uri_parameter": parse_uri_parameter,
        "transport_param": parse_transport_param,
        "user_param": parse_user_param,
        "method_param": parse_method_param,
        "ttl_param": parse_ttl_param,
        "maddr_param": parse_maddr_param,
        "lr_param": parse_lr_param,
        "other_param": parse_other_param,
        "pname": parse_pname,
        "pvalue": parse_pvalue,
        "paramchar": parse_paramchar,
        "param_unreserved": parse_param_unreserved,
        "headers": parse_headers,
        "header": parse_header,
        "hname": parse_hname,
        "hvalue": parse_hvalue,
        "hnv_unreserved": parse_hnv_unreserved,
        "Request_Response": parse_Request_Response,
        "Request_Line": parse_Request_Line,
        "Request_URI": parse_Request_URI,
        "absoluteURI": parse_absoluteURI,
        "hier_part": parse_hier_part,
        "net_path": parse_net_path,
        "abs_path": parse_abs_path,
        "opaque_part": parse_opaque_part,
        "uric": parse_uric,
        "uric_no_slash": parse_uric_no_slash,
        "path_segments": parse_path_segments,
        "segment": parse_segment,
        "param": parse_param,
        "pchar": parse_pchar,
        "scheme": parse_scheme,
        "authority": parse_authority,
        "srvr": parse_srvr,
        "reg_name": parse_reg_name,
        "query": parse_query,
        "SIP_Version": parse_SIP_Version,
        "INVITEm": parse_INVITEm,
        "ACKm": parse_ACKm,
        "OPTIONSm": parse_OPTIONSm,
        "BYEm": parse_BYEm,
        "CANCELm": parse_CANCELm,
        "REGISTERm": parse_REGISTERm,
        "SUBSCRIBEm": parse_SUBSCRIBEm,
        "NOTIFYm": parse_NOTIFYm,
        "REFERm": parse_REFERm,
        "Method": parse_Method,
        "Status_Line": parse_Status_Line,
        "Status_Code": parse_Status_Code,
        "extension_code": parse_extension_code,
        "Reason_Phrase": parse_Reason_Phrase,
        "Allow_Events": parse_Allow_Events,
        "Call_ID": parse_Call_ID,
        "Contact": parse_Contact,
        "contact_param": parse_contact_param,
        "name_addr": parse_name_addr,
        "display_name": parse_display_name,
        "contact_params": parse_contact_params,
        "c_p_q": parse_c_p_q,
        "c_p_expires": parse_c_p_expires,
        "delta_seconds": parse_delta_seconds,
        "qvalue": parse_qvalue,
        "generic_param": parse_generic_param,
        "gen_value": parse_gen_value,
        "Content_Disposition": parse_Content_Disposition,
        "disp_type": parse_disp_type,
        "disp_param": parse_disp_param,
        "handling_param": parse_handling_param,
        "Content_Encoding": parse_Content_Encoding,
        "Content_Length": parse_Content_Length,
        "Content_Type": parse_Content_Type,
        "media_type": parse_media_type,
        "m_type": parse_m_type,
        "discrete_type": parse_discrete_type,
        "composite_type": parse_composite_type,
        "extension_token": parse_extension_token,
        "x_token": parse_x_token,
        "m_subtype": parse_m_subtype,
        "m_parameter": parse_m_parameter,
        "m_value": parse_m_value,
        "CSeq": parse_CSeq,
        "CSeq_value": parse_CSeq_value,
        "Expires": parse_Expires,
        "Event": parse_Event,
        "event_type": parse_event_type,
        "From": parse_From,
        "from_param": parse_from_param,
        "tag_param": parse_tag_param,
        "Max_Forwards": parse_Max_Forwards,
        "Min_Expires": parse_Min_Expires,
        "Name_Addr_Header": parse_Name_Addr_Header,
        "Proxy_Authenticate": parse_Proxy_Authenticate,
        "challenge": parse_challenge,
        "other_challenge": parse_other_challenge,
        "auth_param": parse_auth_param,
        "digest_cln": parse_digest_cln,
        "realm": parse_realm,
        "realm_value": parse_realm_value,
        "domain": parse_domain,
        "URI": parse_URI,
        "nonce": parse_nonce,
        "nonce_value": parse_nonce_value,
        "opaque": parse_opaque,
        "stale": parse_stale,
        "algorithm": parse_algorithm,
        "qop_options": parse_qop_options,
        "qop_value": parse_qop_value,
        "Proxy_Require": parse_Proxy_Require,
        "Record_Route": parse_Record_Route,
        "rec_route": parse_rec_route,
        "Reason": parse_Reason,
        "reason_param": parse_reason_param,
        "reason_cause": parse_reason_cause,
        "Require": parse_Require,
        "Route": parse_Route,
        "route_param": parse_route_param,
        "Subscription_State": parse_Subscription_State,
        "substate_value": parse_substate_value,
        "subexp_params": parse_subexp_params,
        "event_reason_value": parse_event_reason_value,
        "Subject": parse_Subject,
        "Supported": parse_Supported,
        "To": parse_To,
        "to_param": parse_to_param,
        "Via": parse_Via,
        "via_param": parse_via_param,
        "via_params": parse_via_params,
        "via_ttl": parse_via_ttl,
        "via_maddr": parse_via_maddr,
        "via_received": parse_via_received,
        "via_branch": parse_via_branch,
        "response_port": parse_response_port,
        "sent_protocol": parse_sent_protocol,
        "protocol_name": parse_protocol_name,
        "transport": parse_transport,
        "sent_by": parse_sent_by,
        "via_host": parse_via_host,
        "via_port": parse_via_port,
        "ttl": parse_ttl,
        "WWW_Authenticate": parse_WWW_Authenticate,
        "Session_Expires": parse_Session_Expires,
        "s_e_expires": parse_s_e_expires,
        "s_e_params": parse_s_e_params,
        "s_e_refresher": parse_s_e_refresher,
        "extension_header": parse_extension_header,
        "header_value": parse_header_value,
        "message_body": parse_message_body,
        "uuid_URI": parse_uuid_URI,
        "uuid": parse_uuid,
        "hex4": parse_hex4,
        "hex8": parse_hex8,
        "hex12": parse_hex12,
        "Refer_To": parse_Refer_To,
        "Replaces": parse_Replaces,
        "call_id": parse_call_id,
        "replaces_param": parse_replaces_param,
        "to_tag": parse_to_tag,
        "from_tag": parse_from_tag,
        "early_flag": parse_early_flag
      };
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "CRLF";
      }
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      function padLeft(input, padding, length) {
        var result = input;
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        return result;
      }
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        rightmostFailuresExpected.push(failure);
      }
      function parse_CRLF() {
        var result0;
        if (input.substr(pos, 2) === "\r\n") {
          result0 = "\r\n";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\\n\"");
          }
        }
        return result0;
      }
      function parse_DIGIT() {
        var result0;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return result0;
      }
      function parse_ALPHA() {
        var result0;
        if (/^[a-zA-Z]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        return result0;
      }
      function parse_HEXDIG() {
        var result0;
        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        return result0;
      }
      function parse_WSP() {
        var result0;
        result0 = parse_SP();
        if (result0 === null) {
          result0 = parse_HTAB();
        }
        return result0;
      }
      function parse_OCTET() {
        var result0;
        if (/^[\0-\xFF]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\0-\\xFF]");
          }
        }
        return result0;
      }
      function parse_DQUOTE() {
        var result0;
        if (/^["]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\"]");
          }
        }
        return result0;
      }
      function parse_SP() {
        var result0;
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        return result0;
      }
      function parse_HTAB() {
        var result0;
        if (input.charCodeAt(pos) === 9) {
          result0 = "\t";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\t\"");
          }
        }
        return result0;
      }
      function parse_alphanum() {
        var result0;
        if (/^[a-zA-Z0-9]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9]");
          }
        }
        return result0;
      }
      function parse_reserved() {
        var result0;
        if (input.charCodeAt(pos) === 59) {
          result0 = ";";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 47) {
            result0 = "/";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 63) {
              result0 = "?";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 58) {
                result0 = ":";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 64) {
                  result0 = "@";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"@\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 38) {
                    result0 = "&";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"&\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 61) {
                      result0 = "=";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"=\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"+\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 36) {
                          result0 = "$";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"$\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 44) {
                            result0 = ",";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\",\"");
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_unreserved() {
        var result0;
        result0 = parse_alphanum();
        if (result0 === null) {
          result0 = parse_mark();
        }
        return result0;
      }
      function parse_mark() {
        var result0;
        if (input.charCodeAt(pos) === 45) {
          result0 = "-";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 95) {
            result0 = "_";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"_\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 46) {
              result0 = ".";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 33) {
                result0 = "!";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 126) {
                  result0 = "~";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"~\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 42) {
                    result0 = "*";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 39) {
                      result0 = "'";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"'\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 40) {
                        result0 = "(";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 41) {
                          result0 = ")";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_escaped() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 37) {
          result0 = "%";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"%\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_HEXDIG();
          if (result1 !== null) {
            result2 = parse_HEXDIG();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, escaped) {return escaped.join(''); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_LWS() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        result0 = [];
        result1 = parse_WSP();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_WSP();
        }
        if (result0 !== null) {
          result1 = parse_CRLF();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result2 = parse_WSP();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_WSP();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return " "; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_SWS() {
        var result0;
        result0 = parse_LWS();
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      function parse_HCOLON() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_SP();
        if (result1 === null) {
          result1 = parse_HTAB();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_SP();
          if (result1 === null) {
            result1 = parse_HTAB();
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return ':'; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_TEXT_UTF8_TRIM() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result1 = parse_TEXT_UTF8char();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_TEXT_UTF8char();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = [];
          result3 = parse_LWS();
          while (result3 !== null) {
            result2.push(result3);
            result3 = parse_LWS();
          }
          if (result2 !== null) {
            result3 = parse_TEXT_UTF8char();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = [];
            result3 = parse_LWS();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_LWS();
            }
            if (result2 !== null) {
              result3 = parse_TEXT_UTF8char();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_TEXT_UTF8char() {
        var result0;
        if (/^[!-~]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[!-~]");
          }
        }
        if (result0 === null) {
          result0 = parse_UTF8_NONASCII();
        }
        return result0;
      }
      function parse_UTF8_NONASCII() {
        var result0;
        if (/^[\x80-\uFFFF]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\x80-\\uFFFF]");
          }
        }
        return result0;
      }
      function parse_UTF8_CONT() {
        var result0;
        if (/^[\x80-\xBF]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\x80-\\xBF]");
          }
        }
        return result0;
      }
      function parse_LHEX() {
        var result0;
        result0 = parse_DIGIT();
        if (result0 === null) {
          if (/^[a-f]/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[a-f]");
            }
          }
        }
        return result0;
      }
      function parse_token() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_alphanum();
        if (result1 === null) {
          if (input.charCodeAt(pos) === 45) {
            result1 = "-";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 46) {
              result1 = ".";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 33) {
                result1 = "!";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 37) {
                  result1 = "%";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"%\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 42) {
                    result1 = "*";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 95) {
                      result1 = "_";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"_\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result1 = "+";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"+\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 96) {
                          result1 = "`";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"`\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 39) {
                            result1 = "'";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"'\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 126) {
                              result1 = "~";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"~\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_alphanum();
            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 46) {
                  result1 = ".";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 33) {
                    result1 = "!";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"!\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 37) {
                      result1 = "%";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"%\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 42) {
                        result1 = "*";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"*\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 95) {
                          result1 = "_";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"_\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result1 = "+";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"+\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 96) {
                              result1 = "`";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"`\"");
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 39) {
                                result1 = "'";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"'\"");
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 126) {
                                  result1 = "~";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"~\"");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_token_nodot() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_alphanum();
        if (result1 === null) {
          if (input.charCodeAt(pos) === 45) {
            result1 = "-";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 33) {
              result1 = "!";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"!\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 37) {
                result1 = "%";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"%\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 42) {
                  result1 = "*";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 95) {
                    result1 = "_";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"_\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 43) {
                      result1 = "+";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"+\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 96) {
                        result1 = "`";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"`\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 39) {
                          result1 = "'";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"'\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 126) {
                            result1 = "~";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"~\"");
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_alphanum();
            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 33) {
                  result1 = "!";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"!\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 37) {
                    result1 = "%";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"%\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 42) {
                      result1 = "*";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 95) {
                        result1 = "_";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"_\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 43) {
                          result1 = "+";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"+\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 96) {
                            result1 = "`";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"`\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 39) {
                              result1 = "'";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"'\"");
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 126) {
                                result1 = "~";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"~\"");
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_separators() {
        var result0;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 41) {
            result0 = ")";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\")\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 60) {
              result0 = "<";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"<\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 62) {
                result0 = ">";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 64) {
                  result0 = "@";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"@\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 44) {
                    result0 = ",";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 59) {
                      result0 = ";";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 58) {
                        result0 = ":";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 92) {
                          result0 = "\\";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\\\\"");
                          }
                        }
                        if (result0 === null) {
                          result0 = parse_DQUOTE();
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 47) {
                              result0 = "/";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"/\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 91) {
                                result0 = "[";
                                pos++;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"[\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.charCodeAt(pos) === 93) {
                                  result0 = "]";
                                  pos++;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"]\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.charCodeAt(pos) === 63) {
                                    result0 = "?";
                                    pos++;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"?\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.charCodeAt(pos) === 61) {
                                      result0 = "=";
                                      pos++;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"=\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.charCodeAt(pos) === 123) {
                                        result0 = "{";
                                        pos++;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"{\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.charCodeAt(pos) === 125) {
                                          result0 = "}";
                                          pos++;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"}\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          result0 = parse_SP();
                                          if (result0 === null) {
                                            result0 = parse_HTAB();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_word() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_alphanum();
        if (result1 === null) {
          if (input.charCodeAt(pos) === 45) {
            result1 = "-";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 46) {
              result1 = ".";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 33) {
                result1 = "!";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 37) {
                  result1 = "%";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"%\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 42) {
                    result1 = "*";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 95) {
                      result1 = "_";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"_\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result1 = "+";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"+\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 96) {
                          result1 = "`";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"`\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 39) {
                            result1 = "'";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"'\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 126) {
                              result1 = "~";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"~\"");
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 40) {
                                result1 = "(";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"(\"");
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 41) {
                                  result1 = ")";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 60) {
                                    result1 = "<";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"<\"");
                                    }
                                  }
                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 62) {
                                      result1 = ">";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\">\"");
                                      }
                                    }
                                    if (result1 === null) {
                                      if (input.charCodeAt(pos) === 58) {
                                        result1 = ":";
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }
                                      if (result1 === null) {
                                        if (input.charCodeAt(pos) === 92) {
                                          result1 = "\\";
                                          pos++;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"\\\\\"");
                                          }
                                        }
                                        if (result1 === null) {
                                          result1 = parse_DQUOTE();
                                          if (result1 === null) {
                                            if (input.charCodeAt(pos) === 47) {
                                              result1 = "/";
                                              pos++;
                                            } else {
                                              result1 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"/\"");
                                              }
                                            }
                                            if (result1 === null) {
                                              if (input.charCodeAt(pos) === 91) {
                                                result1 = "[";
                                                pos++;
                                              } else {
                                                result1 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"[\"");
                                                }
                                              }
                                              if (result1 === null) {
                                                if (input.charCodeAt(pos) === 93) {
                                                  result1 = "]";
                                                  pos++;
                                                } else {
                                                  result1 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"]\"");
                                                  }
                                                }
                                                if (result1 === null) {
                                                  if (input.charCodeAt(pos) === 63) {
                                                    result1 = "?";
                                                    pos++;
                                                  } else {
                                                    result1 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"?\"");
                                                    }
                                                  }
                                                  if (result1 === null) {
                                                    if (input.charCodeAt(pos) === 123) {
                                                      result1 = "{";
                                                      pos++;
                                                    } else {
                                                      result1 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"{\"");
                                                      }
                                                    }
                                                    if (result1 === null) {
                                                      if (input.charCodeAt(pos) === 125) {
                                                        result1 = "}";
                                                        pos++;
                                                      } else {
                                                        result1 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"}\"");
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_alphanum();
            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 46) {
                  result1 = ".";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 33) {
                    result1 = "!";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"!\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 37) {
                      result1 = "%";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"%\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 42) {
                        result1 = "*";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"*\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 95) {
                          result1 = "_";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"_\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result1 = "+";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"+\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 96) {
                              result1 = "`";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"`\"");
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 39) {
                                result1 = "'";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"'\"");
                                }
                              }
                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 126) {
                                  result1 = "~";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"~\"");
                                  }
                                }
                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 40) {
                                    result1 = "(";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"(\"");
                                    }
                                  }
                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 41) {
                                      result1 = ")";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                      }
                                    }
                                    if (result1 === null) {
                                      if (input.charCodeAt(pos) === 60) {
                                        result1 = "<";
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"<\"");
                                        }
                                      }
                                      if (result1 === null) {
                                        if (input.charCodeAt(pos) === 62) {
                                          result1 = ">";
                                          pos++;
                                        } else {
                                          result1 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\">\"");
                                          }
                                        }
                                        if (result1 === null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result1 = ":";
                                            pos++;
                                          } else {
                                            result1 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }
                                          if (result1 === null) {
                                            if (input.charCodeAt(pos) === 92) {
                                              result1 = "\\";
                                              pos++;
                                            } else {
                                              result1 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"\\\\\"");
                                              }
                                            }
                                            if (result1 === null) {
                                              result1 = parse_DQUOTE();
                                              if (result1 === null) {
                                                if (input.charCodeAt(pos) === 47) {
                                                  result1 = "/";
                                                  pos++;
                                                } else {
                                                  result1 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"/\"");
                                                  }
                                                }
                                                if (result1 === null) {
                                                  if (input.charCodeAt(pos) === 91) {
                                                    result1 = "[";
                                                    pos++;
                                                  } else {
                                                    result1 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"[\"");
                                                    }
                                                  }
                                                  if (result1 === null) {
                                                    if (input.charCodeAt(pos) === 93) {
                                                      result1 = "]";
                                                      pos++;
                                                    } else {
                                                      result1 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"]\"");
                                                      }
                                                    }
                                                    if (result1 === null) {
                                                      if (input.charCodeAt(pos) === 63) {
                                                        result1 = "?";
                                                        pos++;
                                                      } else {
                                                        result1 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"?\"");
                                                        }
                                                      }
                                                      if (result1 === null) {
                                                        if (input.charCodeAt(pos) === 123) {
                                                          result1 = "{";
                                                          pos++;
                                                        } else {
                                                          result1 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"{\"");
                                                          }
                                                        }
                                                        if (result1 === null) {
                                                          if (input.charCodeAt(pos) === 125) {
                                                            result1 = "}";
                                                            pos++;
                                                          } else {
                                                            result1 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"}\"");
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_STAR() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 42) {
            result1 = "*";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"*\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "*"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_SLASH() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 47) {
            result1 = "/";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "/"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_EQUAL() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 61) {
            result1 = "=";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "="; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_LPAREN() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 40) {
            result1 = "(";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "("; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_RPAREN() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 41) {
            result1 = ")";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\")\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return ")"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_RAQUOT() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 62) {
          result0 = ">";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\">\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_SWS();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return ">"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_LAQUOT() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 60) {
            result1 = "<";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "<"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_COMMA() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 44) {
            result1 = ",";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return ","; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_SEMI() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 59) {
            result1 = ";";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return ";"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_COLON() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_SWS();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return ":"; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_LDQUOT() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          result1 = parse_DQUOTE();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "\""; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_RDQUOT() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_DQUOTE();
        if (result0 !== null) {
          result1 = parse_SWS();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {return "\""; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_comment() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_LPAREN();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ctext();
          if (result2 === null) {
            result2 = parse_quoted_pair();
            if (result2 === null) {
              result2 = parse_comment();
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ctext();
            if (result2 === null) {
              result2 = parse_quoted_pair();
              if (result2 === null) {
                result2 = parse_comment();
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_RPAREN();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_ctext() {
        var result0;
        if (/^[!-']/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[!-']");
          }
        }
        if (result0 === null) {
          if (/^[*-[]/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[*-[]");
            }
          }
          if (result0 === null) {
            if (/^[\]-~]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\]-~]");
              }
            }
            if (result0 === null) {
              result0 = parse_UTF8_NONASCII();
              if (result0 === null) {
                result0 = parse_LWS();
              }
            }
          }
        }
        return result0;
      }
      function parse_quoted_string() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          result1 = parse_DQUOTE();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_qdtext();
            if (result3 === null) {
              result3 = parse_quoted_pair();
            }
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_qdtext();
              if (result3 === null) {
                result3 = parse_quoted_pair();
              }
            }
            if (result2 !== null) {
              result3 = parse_DQUOTE();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_quoted_string_clean() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SWS();
        if (result0 !== null) {
          result1 = parse_DQUOTE();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_qdtext();
            if (result3 === null) {
              result3 = parse_quoted_pair();
            }
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_qdtext();
              if (result3 === null) {
                result3 = parse_quoted_pair();
              }
            }
            if (result2 !== null) {
              result3 = parse_DQUOTE();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                                return input.substring(pos-1, offset+1); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_qdtext() {
        var result0;
        result0 = parse_LWS();
        if (result0 === null) {
          if (input.charCodeAt(pos) === 33) {
            result0 = "!";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"!\"");
            }
          }
          if (result0 === null) {
            if (/^[#-[]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[#-[]");
              }
            }
            if (result0 === null) {
              if (/^[\]-~]/.test(input.charAt(pos))) {
                result0 = input.charAt(pos);
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\]-~]");
                }
              }
              if (result0 === null) {
                result0 = parse_UTF8_NONASCII();
              }
            }
          }
        }
        return result0;
      }
      function parse_quoted_pair() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        if (input.charCodeAt(pos) === 92) {
          result0 = "\\";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          if (/^[\0-\t]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[\\0-\\t]");
            }
          }
          if (result1 === null) {
            if (/^[\x0B-\f]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\\x0B-\\f]");
              }
            }
            if (result1 === null) {
              if (/^[\x0E-]/.test(input.charAt(pos))) {
                result1 = input.charAt(pos);
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\x0E-]");
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_SIP_URI_noparams() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_uri_scheme();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_userinfo();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_hostport();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            try {
                                data.uri = new URI(data.scheme, data.user, data.host, data.port);
                                delete data.scheme;
                                delete data.user;
                                delete data.host;
                                delete data.host_type;
                                delete data.port;
                              } catch(e) {
                                data = -1;
                              }})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_SIP_URI() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_uri_scheme();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_userinfo();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_hostport();
              if (result3 !== null) {
                result4 = parse_uri_parameters();
                if (result4 !== null) {
                  result5 = parse_headers();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            var header;
                            try {
                                data.uri = new URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);
                                delete data.scheme;
                                delete data.user;
                                delete data.host;
                                delete data.host_type;
                                delete data.port;
                                delete data.uri_params;
                                if (startRule === 'SIP_URI') { data = data.uri;}
                              } catch(e) {
                                data = -1;
                              }})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_uri_scheme() {
        var result0;
        result0 = parse_uri_scheme_sips();
        if (result0 === null) {
          result0 = parse_uri_scheme_sip();
        }
        return result0;
      }
      function parse_uri_scheme_sips() {
        var result0;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 4).toLowerCase() === "sips") {
          result0 = input.substr(pos, 4);
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"sips\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, scheme) {
                            data.scheme = scheme.toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_uri_scheme_sip() {
        var result0;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 3).toLowerCase() === "sip") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"sip\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, scheme) {
                            data.scheme = scheme.toLowerCase(); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_userinfo() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_user();
        if (result0 !== null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_password();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 64) {
              result2 = "@";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"@\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.user = decodeURIComponent(input.substring(pos-1, offset));})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_user() {
        var result0, result1;
        result1 = parse_unreserved();
        if (result1 === null) {
          result1 = parse_escaped();
          if (result1 === null) {
            result1 = parse_user_unreserved();
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_unreserved();
            if (result1 === null) {
              result1 = parse_escaped();
              if (result1 === null) {
                result1 = parse_user_unreserved();
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      function parse_user_unreserved() {
        var result0;
        if (input.charCodeAt(pos) === 38) {
          result0 = "&";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 61) {
            result0 = "=";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 43) {
              result0 = "+";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 36) {
                result0 = "$";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"$\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 44) {
                  result0 = ",";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 59) {
                    result0 = ";";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 63) {
                      result0 = "?";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"?\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 47) {
                        result0 = "/";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"/\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_password() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result0 = [];
        result1 = parse_unreserved();
        if (result1 === null) {
          result1 = parse_escaped();
          if (result1 === null) {
            if (input.charCodeAt(pos) === 38) {
              result1 = "&";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"&\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 43) {
                  result1 = "+";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"+\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 36) {
                    result1 = "$";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"$\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 44) {
                      result1 = ",";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_unreserved();
          if (result1 === null) {
            result1 = parse_escaped();
            if (result1 === null) {
              if (input.charCodeAt(pos) === 38) {
                result1 = "&";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"&\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 61) {
                  result1 = "=";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 43) {
                    result1 = "+";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 36) {
                      result1 = "$";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"$\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 44) {
                        result1 = ",";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\",\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.password = input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_hostport() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_host();
        if (result0 !== null) {
          pos1 = pos;
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_port();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_host() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_hostname();
        if (result0 === null) {
          result0 = parse_IPv4address();
          if (result0 === null) {
            result0 = parse_IPv6reference();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.host = input.substring(pos, offset).toLowerCase();
                            return data.host; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_hostname() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        pos2 = pos;
        result1 = parse_domainlabel();
        if (result1 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result2 = ".";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
        while (result1 !== null) {
          result0.push(result1);
          pos2 = pos;
          result1 = parse_domainlabel();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
        }
        if (result0 !== null) {
          result1 = parse_toplabel();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          data.host_type = 'domain';
                          return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_domainlabel() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_alphanum();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_alphanum();
          if (result2 === null) {
            if (input.charCodeAt(pos) === 45) {
              result2 = "-";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result2 === null) {
              if (input.charCodeAt(pos) === 95) {
                result2 = "_";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"_\"");
                }
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_alphanum();
            if (result2 === null) {
              if (input.charCodeAt(pos) === 45) {
                result2 = "-";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result2 === null) {
                if (input.charCodeAt(pos) === 95) {
                  result2 = "_";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"_\"");
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_toplabel() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_ALPHA();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_alphanum();
          if (result2 === null) {
            if (input.charCodeAt(pos) === 45) {
              result2 = "-";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result2 === null) {
              if (input.charCodeAt(pos) === 95) {
                result2 = "_";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"_\"");
                }
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_alphanum();
            if (result2 === null) {
              if (input.charCodeAt(pos) === 45) {
                result2 = "-";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result2 === null) {
                if (input.charCodeAt(pos) === 95) {
                  result2 = "_";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"_\"");
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_IPv6reference() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_IPv6address();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 93) {
              result2 = "]";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.host_type = 'IPv6';
                            return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_IPv6address() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_h16();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_h16();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result3 = ":";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_h16();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result5 = ":";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_h16();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result7 = ":";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_h16();
                        if (result8 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result9 = ":";
                            pos++;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = parse_h16();
                            if (result10 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result11 = ":";
                                pos++;
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\":\"");
                                }
                              }
                              if (result11 !== null) {
                                result12 = parse_ls32();
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          pos1 = pos;
          if (input.substr(pos, 2) === "::") {
            result0 = "::";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"::\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_h16();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result2 = ":";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_h16();
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result4 = ":";
                    pos++;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = parse_h16();
                    if (result5 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result6 = ":";
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result6 !== null) {
                        result7 = parse_h16();
                        if (result7 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result8 = ":";
                            pos++;
                          } else {
                            result8 = null;
                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }
                          if (result8 !== null) {
                            result9 = parse_h16();
                            if (result9 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result10 = ":";
                                pos++;
                              } else {
                                result10 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\":\"");
                                }
                              }
                              if (result10 !== null) {
                                result11 = parse_ls32();
                                if (result11 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 === null) {
            pos1 = pos;
            if (input.substr(pos, 2) === "::") {
              result0 = "::";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"::\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_h16();
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 58) {
                  result2 = ":";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse_h16();
                  if (result3 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                      result4 = ":";
                      pos++;
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = parse_h16();
                      if (result5 !== null) {
                        if (input.charCodeAt(pos) === 58) {
                          result6 = ":";
                          pos++;
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\":\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse_h16();
                          if (result7 !== null) {
                            if (input.charCodeAt(pos) === 58) {
                              result8 = ":";
                              pos++;
                            } else {
                              result8 = null;
                              if (reportFailures === 0) {
                                matchFailed("\":\"");
                              }
                            }
                            if (result8 !== null) {
                              result9 = parse_ls32();
                              if (result9 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 === null) {
              pos1 = pos;
              if (input.substr(pos, 2) === "::") {
                result0 = "::";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"::\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_h16();
                if (result1 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result2 = ":";
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }
                  if (result2 !== null) {
                    result3 = parse_h16();
                    if (result3 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result4 = ":";
                        pos++;
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result4 !== null) {
                        result5 = parse_h16();
                        if (result5 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result6 = ":";
                            pos++;
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }
                          if (result6 !== null) {
                            result7 = parse_ls32();
                            if (result7 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 === null) {
                pos1 = pos;
                if (input.substr(pos, 2) === "::") {
                  result0 = "::";
                  pos += 2;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"::\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse_h16();
                  if (result1 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                      result2 = ":";
                      pos++;
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result2 !== null) {
                      result3 = parse_h16();
                      if (result3 !== null) {
                        if (input.charCodeAt(pos) === 58) {
                          result4 = ":";
                          pos++;
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\":\"");
                          }
                        }
                        if (result4 !== null) {
                          result5 = parse_ls32();
                          if (result5 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 === null) {
                  pos1 = pos;
                  if (input.substr(pos, 2) === "::") {
                    result0 = "::";
                    pos += 2;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"::\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse_h16();
                    if (result1 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result2 = ":";
                        pos++;
                      } else {
                        result2 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result2 !== null) {
                        result3 = parse_ls32();
                        if (result3 !== null) {
                          result0 = [result0, result1, result2, result3];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 === null) {
                    pos1 = pos;
                    if (input.substr(pos, 2) === "::") {
                      result0 = "::";
                      pos += 2;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"::\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse_ls32();
                      if (result1 !== null) {
                        result0 = [result0, result1];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 === null) {
                      pos1 = pos;
                      if (input.substr(pos, 2) === "::") {
                        result0 = "::";
                        pos += 2;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"::\"");
                        }
                      }
                      if (result0 !== null) {
                        result1 = parse_h16();
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 === null) {
                        pos1 = pos;
                        result0 = parse_h16();
                        if (result0 !== null) {
                          if (input.substr(pos, 2) === "::") {
                            result1 = "::";
                            pos += 2;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"::\"");
                            }
                          }
                          if (result1 !== null) {
                            result2 = parse_h16();
                            if (result2 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result3 = ":";
                                pos++;
                              } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\":\"");
                                }
                              }
                              if (result3 !== null) {
                                result4 = parse_h16();
                                if (result4 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result5 = ":";
                                    pos++;
                                  } else {
                                    result5 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }
                                  if (result5 !== null) {
                                    result6 = parse_h16();
                                    if (result6 !== null) {
                                      if (input.charCodeAt(pos) === 58) {
                                        result7 = ":";
                                        pos++;
                                      } else {
                                        result7 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }
                                      if (result7 !== null) {
                                        result8 = parse_h16();
                                        if (result8 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result9 = ":";
                                            pos++;
                                          } else {
                                            result9 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }
                                          if (result9 !== null) {
                                            result10 = parse_ls32();
                                            if (result10 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                        if (result0 === null) {
                          pos1 = pos;
                          result0 = parse_h16();
                          if (result0 !== null) {
                            pos2 = pos;
                            if (input.charCodeAt(pos) === 58) {
                              result1 = ":";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\":\"");
                              }
                            }
                            if (result1 !== null) {
                              result2 = parse_h16();
                              if (result2 !== null) {
                                result1 = [result1, result2];
                              } else {
                                result1 = null;
                                pos = pos2;
                              }
                            } else {
                              result1 = null;
                              pos = pos2;
                            }
                            result1 = result1 !== null ? result1 : "";
                            if (result1 !== null) {
                              if (input.substr(pos, 2) === "::") {
                                result2 = "::";
                                pos += 2;
                              } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"::\"");
                                }
                              }
                              if (result2 !== null) {
                                result3 = parse_h16();
                                if (result3 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result4 = ":";
                                    pos++;
                                  } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }
                                  if (result4 !== null) {
                                    result5 = parse_h16();
                                    if (result5 !== null) {
                                      if (input.charCodeAt(pos) === 58) {
                                        result6 = ":";
                                        pos++;
                                      } else {
                                        result6 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }
                                      if (result6 !== null) {
                                        result7 = parse_h16();
                                        if (result7 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result8 = ":";
                                            pos++;
                                          } else {
                                            result8 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }
                                          if (result8 !== null) {
                                            result9 = parse_ls32();
                                            if (result9 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                          if (result0 === null) {
                            pos1 = pos;
                            result0 = parse_h16();
                            if (result0 !== null) {
                              pos2 = pos;
                              if (input.charCodeAt(pos) === 58) {
                                result1 = ":";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\":\"");
                                }
                              }
                              if (result1 !== null) {
                                result2 = parse_h16();
                                if (result2 !== null) {
                                  result1 = [result1, result2];
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }
                              } else {
                                result1 = null;
                                pos = pos2;
                              }
                              result1 = result1 !== null ? result1 : "";
                              if (result1 !== null) {
                                pos2 = pos;
                                if (input.charCodeAt(pos) === 58) {
                                  result2 = ":";
                                  pos++;
                                } else {
                                  result2 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\":\"");
                                  }
                                }
                                if (result2 !== null) {
                                  result3 = parse_h16();
                                  if (result3 !== null) {
                                    result2 = [result2, result3];
                                  } else {
                                    result2 = null;
                                    pos = pos2;
                                  }
                                } else {
                                  result2 = null;
                                  pos = pos2;
                                }
                                result2 = result2 !== null ? result2 : "";
                                if (result2 !== null) {
                                  if (input.substr(pos, 2) === "::") {
                                    result3 = "::";
                                    pos += 2;
                                  } else {
                                    result3 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"::\"");
                                    }
                                  }
                                  if (result3 !== null) {
                                    result4 = parse_h16();
                                    if (result4 !== null) {
                                      if (input.charCodeAt(pos) === 58) {
                                        result5 = ":";
                                        pos++;
                                      } else {
                                        result5 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }
                                      if (result5 !== null) {
                                        result6 = parse_h16();
                                        if (result6 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result7 = ":";
                                            pos++;
                                          } else {
                                            result7 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }
                                          if (result7 !== null) {
                                            result8 = parse_ls32();
                                            if (result8 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                            if (result0 === null) {
                              pos1 = pos;
                              result0 = parse_h16();
                              if (result0 !== null) {
                                pos2 = pos;
                                if (input.charCodeAt(pos) === 58) {
                                  result1 = ":";
                                  pos++;
                                } else {
                                  result1 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\":\"");
                                  }
                                }
                                if (result1 !== null) {
                                  result2 = parse_h16();
                                  if (result2 !== null) {
                                    result1 = [result1, result2];
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }
                                result1 = result1 !== null ? result1 : "";
                                if (result1 !== null) {
                                  pos2 = pos;
                                  if (input.charCodeAt(pos) === 58) {
                                    result2 = ":";
                                    pos++;
                                  } else {
                                    result2 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }
                                  if (result2 !== null) {
                                    result3 = parse_h16();
                                    if (result3 !== null) {
                                      result2 = [result2, result3];
                                    } else {
                                      result2 = null;
                                      pos = pos2;
                                    }
                                  } else {
                                    result2 = null;
                                    pos = pos2;
                                  }
                                  result2 = result2 !== null ? result2 : "";
                                  if (result2 !== null) {
                                    pos2 = pos;
                                    if (input.charCodeAt(pos) === 58) {
                                      result3 = ":";
                                      pos++;
                                    } else {
                                      result3 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\":\"");
                                      }
                                    }
                                    if (result3 !== null) {
                                      result4 = parse_h16();
                                      if (result4 !== null) {
                                        result3 = [result3, result4];
                                      } else {
                                        result3 = null;
                                        pos = pos2;
                                      }
                                    } else {
                                      result3 = null;
                                      pos = pos2;
                                    }
                                    result3 = result3 !== null ? result3 : "";
                                    if (result3 !== null) {
                                      if (input.substr(pos, 2) === "::") {
                                        result4 = "::";
                                        pos += 2;
                                      } else {
                                        result4 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"::\"");
                                        }
                                      }
                                      if (result4 !== null) {
                                        result5 = parse_h16();
                                        if (result5 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result6 = ":";
                                            pos++;
                                          } else {
                                            result6 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }
                                          if (result6 !== null) {
                                            result7 = parse_ls32();
                                            if (result7 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                              if (result0 === null) {
                                pos1 = pos;
                                result0 = parse_h16();
                                if (result0 !== null) {
                                  pos2 = pos;
                                  if (input.charCodeAt(pos) === 58) {
                                    result1 = ":";
                                    pos++;
                                  } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }
                                  if (result1 !== null) {
                                    result2 = parse_h16();
                                    if (result2 !== null) {
                                      result1 = [result1, result2];
                                    } else {
                                      result1 = null;
                                      pos = pos2;
                                    }
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }
                                  result1 = result1 !== null ? result1 : "";
                                  if (result1 !== null) {
                                    pos2 = pos;
                                    if (input.charCodeAt(pos) === 58) {
                                      result2 = ":";
                                      pos++;
                                    } else {
                                      result2 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\":\"");
                                      }
                                    }
                                    if (result2 !== null) {
                                      result3 = parse_h16();
                                      if (result3 !== null) {
                                        result2 = [result2, result3];
                                      } else {
                                        result2 = null;
                                        pos = pos2;
                                      }
                                    } else {
                                      result2 = null;
                                      pos = pos2;
                                    }
                                    result2 = result2 !== null ? result2 : "";
                                    if (result2 !== null) {
                                      pos2 = pos;
                                      if (input.charCodeAt(pos) === 58) {
                                        result3 = ":";
                                        pos++;
                                      } else {
                                        result3 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }
                                      if (result3 !== null) {
                                        result4 = parse_h16();
                                        if (result4 !== null) {
                                          result3 = [result3, result4];
                                        } else {
                                          result3 = null;
                                          pos = pos2;
                                        }
                                      } else {
                                        result3 = null;
                                        pos = pos2;
                                      }
                                      result3 = result3 !== null ? result3 : "";
                                      if (result3 !== null) {
                                        pos2 = pos;
                                        if (input.charCodeAt(pos) === 58) {
                                          result4 = ":";
                                          pos++;
                                        } else {
                                          result4 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\":\"");
                                          }
                                        }
                                        if (result4 !== null) {
                                          result5 = parse_h16();
                                          if (result5 !== null) {
                                            result4 = [result4, result5];
                                          } else {
                                            result4 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result4 = null;
                                          pos = pos2;
                                        }
                                        result4 = result4 !== null ? result4 : "";
                                        if (result4 !== null) {
                                          if (input.substr(pos, 2) === "::") {
                                            result5 = "::";
                                            pos += 2;
                                          } else {
                                            result5 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"::\"");
                                            }
                                          }
                                          if (result5 !== null) {
                                            result6 = parse_ls32();
                                            if (result6 !== null) {
                                              result0 = [result0, result1, result2, result3, result4, result5, result6];
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                                if (result0 === null) {
                                  pos1 = pos;
                                  result0 = parse_h16();
                                  if (result0 !== null) {
                                    pos2 = pos;
                                    if (input.charCodeAt(pos) === 58) {
                                      result1 = ":";
                                      pos++;
                                    } else {
                                      result1 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\":\"");
                                      }
                                    }
                                    if (result1 !== null) {
                                      result2 = parse_h16();
                                      if (result2 !== null) {
                                        result1 = [result1, result2];
                                      } else {
                                        result1 = null;
                                        pos = pos2;
                                      }
                                    } else {
                                      result1 = null;
                                      pos = pos2;
                                    }
                                    result1 = result1 !== null ? result1 : "";
                                    if (result1 !== null) {
                                      pos2 = pos;
                                      if (input.charCodeAt(pos) === 58) {
                                        result2 = ":";
                                        pos++;
                                      } else {
                                        result2 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }
                                      if (result2 !== null) {
                                        result3 = parse_h16();
                                        if (result3 !== null) {
                                          result2 = [result2, result3];
                                        } else {
                                          result2 = null;
                                          pos = pos2;
                                        }
                                      } else {
                                        result2 = null;
                                        pos = pos2;
                                      }
                                      result2 = result2 !== null ? result2 : "";
                                      if (result2 !== null) {
                                        pos2 = pos;
                                        if (input.charCodeAt(pos) === 58) {
                                          result3 = ":";
                                          pos++;
                                        } else {
                                          result3 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\":\"");
                                          }
                                        }
                                        if (result3 !== null) {
                                          result4 = parse_h16();
                                          if (result4 !== null) {
                                            result3 = [result3, result4];
                                          } else {
                                            result3 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result3 = null;
                                          pos = pos2;
                                        }
                                        result3 = result3 !== null ? result3 : "";
                                        if (result3 !== null) {
                                          pos2 = pos;
                                          if (input.charCodeAt(pos) === 58) {
                                            result4 = ":";
                                            pos++;
                                          } else {
                                            result4 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }
                                          if (result4 !== null) {
                                            result5 = parse_h16();
                                            if (result5 !== null) {
                                              result4 = [result4, result5];
                                            } else {
                                              result4 = null;
                                              pos = pos2;
                                            }
                                          } else {
                                            result4 = null;
                                            pos = pos2;
                                          }
                                          result4 = result4 !== null ? result4 : "";
                                          if (result4 !== null) {
                                            pos2 = pos;
                                            if (input.charCodeAt(pos) === 58) {
                                              result5 = ":";
                                              pos++;
                                            } else {
                                              result5 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\":\"");
                                              }
                                            }
                                            if (result5 !== null) {
                                              result6 = parse_h16();
                                              if (result6 !== null) {
                                                result5 = [result5, result6];
                                              } else {
                                                result5 = null;
                                                pos = pos2;
                                              }
                                            } else {
                                              result5 = null;
                                              pos = pos2;
                                            }
                                            result5 = result5 !== null ? result5 : "";
                                            if (result5 !== null) {
                                              if (input.substr(pos, 2) === "::") {
                                                result6 = "::";
                                                pos += 2;
                                              } else {
                                                result6 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"::\"");
                                                }
                                              }
                                              if (result6 !== null) {
                                                result7 = parse_h16();
                                                if (result7 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                  if (result0 === null) {
                                    pos1 = pos;
                                    result0 = parse_h16();
                                    if (result0 !== null) {
                                      pos2 = pos;
                                      if (input.charCodeAt(pos) === 58) {
                                        result1 = ":";
                                        pos++;
                                      } else {
                                        result1 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }
                                      if (result1 !== null) {
                                        result2 = parse_h16();
                                        if (result2 !== null) {
                                          result1 = [result1, result2];
                                        } else {
                                          result1 = null;
                                          pos = pos2;
                                        }
                                      } else {
                                        result1 = null;
                                        pos = pos2;
                                      }
                                      result1 = result1 !== null ? result1 : "";
                                      if (result1 !== null) {
                                        pos2 = pos;
                                        if (input.charCodeAt(pos) === 58) {
                                          result2 = ":";
                                          pos++;
                                        } else {
                                          result2 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\":\"");
                                          }
                                        }
                                        if (result2 !== null) {
                                          result3 = parse_h16();
                                          if (result3 !== null) {
                                            result2 = [result2, result3];
                                          } else {
                                            result2 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result2 = null;
                                          pos = pos2;
                                        }
                                        result2 = result2 !== null ? result2 : "";
                                        if (result2 !== null) {
                                          pos2 = pos;
                                          if (input.charCodeAt(pos) === 58) {
                                            result3 = ":";
                                            pos++;
                                          } else {
                                            result3 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }
                                          if (result3 !== null) {
                                            result4 = parse_h16();
                                            if (result4 !== null) {
                                              result3 = [result3, result4];
                                            } else {
                                              result3 = null;
                                              pos = pos2;
                                            }
                                          } else {
                                            result3 = null;
                                            pos = pos2;
                                          }
                                          result3 = result3 !== null ? result3 : "";
                                          if (result3 !== null) {
                                            pos2 = pos;
                                            if (input.charCodeAt(pos) === 58) {
                                              result4 = ":";
                                              pos++;
                                            } else {
                                              result4 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\":\"");
                                              }
                                            }
                                            if (result4 !== null) {
                                              result5 = parse_h16();
                                              if (result5 !== null) {
                                                result4 = [result4, result5];
                                              } else {
                                                result4 = null;
                                                pos = pos2;
                                              }
                                            } else {
                                              result4 = null;
                                              pos = pos2;
                                            }
                                            result4 = result4 !== null ? result4 : "";
                                            if (result4 !== null) {
                                              pos2 = pos;
                                              if (input.charCodeAt(pos) === 58) {
                                                result5 = ":";
                                                pos++;
                                              } else {
                                                result5 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\":\"");
                                                }
                                              }
                                              if (result5 !== null) {
                                                result6 = parse_h16();
                                                if (result6 !== null) {
                                                  result5 = [result5, result6];
                                                } else {
                                                  result5 = null;
                                                  pos = pos2;
                                                }
                                              } else {
                                                result5 = null;
                                                pos = pos2;
                                              }
                                              result5 = result5 !== null ? result5 : "";
                                              if (result5 !== null) {
                                                pos2 = pos;
                                                if (input.charCodeAt(pos) === 58) {
                                                  result6 = ":";
                                                  pos++;
                                                } else {
                                                  result6 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\":\"");
                                                  }
                                                }
                                                if (result6 !== null) {
                                                  result7 = parse_h16();
                                                  if (result7 !== null) {
                                                    result6 = [result6, result7];
                                                  } else {
                                                    result6 = null;
                                                    pos = pos2;
                                                  }
                                                } else {
                                                  result6 = null;
                                                  pos = pos2;
                                                }
                                                result6 = result6 !== null ? result6 : "";
                                                if (result6 !== null) {
                                                  if (input.substr(pos, 2) === "::") {
                                                    result7 = "::";
                                                    pos += 2;
                                                  } else {
                                                    result7 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"::\"");
                                                    }
                                                  }
                                                  if (result7 !== null) {
                                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          data.host_type = 'IPv6';
                          return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_h16() {
        var result0, result1, result2, result3;
        var pos0;
        pos0 = pos;
        result0 = parse_HEXDIG();
        if (result0 !== null) {
          result1 = parse_HEXDIG();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_HEXDIG();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_HEXDIG();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_ls32() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_h16();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_h16();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_IPv4address();
        }
        return result0;
      }
      function parse_IPv4address() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_dec_octet();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_dec_octet();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result3 = ".";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_dec_octet();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    result5 = ".";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_dec_octet();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.host_type = 'IPv4';
                            return input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_dec_octet() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 2) === "25") {
          result0 = "25";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"25\"");
          }
        }
        if (result0 !== null) {
          if (/^[0-5]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-5]");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.charCodeAt(pos) === 50) {
            result0 = "2";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"2\"");
            }
          }
          if (result0 !== null) {
            if (/^[0-4]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-4]");
              }
            }
            if (result1 !== null) {
              result2 = parse_DIGIT();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.charCodeAt(pos) === 49) {
              result0 = "1";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"1\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_DIGIT();
              if (result1 !== null) {
                result2 = parse_DIGIT();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              if (/^[1-9]/.test(input.charAt(pos))) {
                result0 = input.charAt(pos);
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[1-9]");
                }
              }
              if (result0 !== null) {
                result1 = parse_DIGIT();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
              if (result0 === null) {
                result0 = parse_DIGIT();
              }
            }
          }
        }
        return result0;
      }
      function parse_port() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_DIGIT();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_DIGIT();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_DIGIT();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_DIGIT();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_DIGIT();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, port) {
                            port = parseInt(port.join(''));
                            data.port = port;
                            return port; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_uri_parameters() {
        var result0, result1, result2;
        var pos0;
        result0 = [];
        pos0 = pos;
        if (input.charCodeAt(pos) === 59) {
          result1 = ";";
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result1 !== null) {
          result2 = parse_uri_parameter();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = pos0;
          }
        } else {
          result1 = null;
          pos = pos0;
        }
        while (result1 !== null) {
          result0.push(result1);
          pos0 = pos;
          if (input.charCodeAt(pos) === 59) {
            result1 = ";";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_uri_parameter();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos0;
            }
          } else {
            result1 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      function parse_uri_parameter() {
        var result0;
        result0 = parse_transport_param();
        if (result0 === null) {
          result0 = parse_user_param();
          if (result0 === null) {
            result0 = parse_method_param();
            if (result0 === null) {
              result0 = parse_ttl_param();
              if (result0 === null) {
                result0 = parse_maddr_param();
                if (result0 === null) {
                  result0 = parse_lr_param();
                  if (result0 === null) {
                    result0 = parse_other_param();
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_transport_param() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 10).toLowerCase() === "transport=") {
          result0 = input.substr(pos, 10);
          pos += 10;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"transport=\"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 3).toLowerCase() === "udp") {
            result1 = input.substr(pos, 3);
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"udp\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 3).toLowerCase() === "tcp") {
              result1 = input.substr(pos, 3);
              pos += 3;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"tcp\"");
              }
            }
            if (result1 === null) {
              if (input.substr(pos, 4).toLowerCase() === "sctp") {
                result1 = input.substr(pos, 4);
                pos += 4;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"sctp\"");
                }
              }
              if (result1 === null) {
                if (input.substr(pos, 3).toLowerCase() === "tls") {
                  result1 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"tls\"");
                  }
                }
                if (result1 === null) {
                  result1 = parse_token();
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, transport) {
                              if(!data.uri_params) data.uri_params={};
                              data.uri_params['transport'] = transport.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_user_param() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5).toLowerCase() === "user=") {
          result0 = input.substr(pos, 5);
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"user=\"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 5).toLowerCase() === "phone") {
            result1 = input.substr(pos, 5);
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"phone\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 2).toLowerCase() === "ip") {
              result1 = input.substr(pos, 2);
              pos += 2;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"ip\"");
              }
            }
            if (result1 === null) {
              result1 = parse_token();
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, user) {
                              if(!data.uri_params) data.uri_params={};
                              data.uri_params['user'] = user.toLowerCase(); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_method_param() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 7).toLowerCase() === "method=") {
          result0 = input.substr(pos, 7);
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"method=\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Method();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, method) {
                              if(!data.uri_params) data.uri_params={};
                              data.uri_params['method'] = method; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_ttl_param() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 4).toLowerCase() === "ttl=") {
          result0 = input.substr(pos, 4);
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"ttl=\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_ttl();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ttl) {
                              if(!data.params) data.params={};
                              data.params['ttl'] = ttl; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_maddr_param() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 6).toLowerCase() === "maddr=") {
          result0 = input.substr(pos, 6);
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"maddr=\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_host();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, maddr) {
                              if(!data.uri_params) data.uri_params={};
                              data.uri_params['maddr'] = maddr; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_lr_param() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2).toLowerCase() === "lr") {
          result0 = input.substr(pos, 2);
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"lr\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 61) {
            result1 = "=";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_token();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                              if(!data.uri_params) data.uri_params={};
                              data.uri_params['lr'] = undefined; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_other_param() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_pname();
        if (result0 !== null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 61) {
            result1 = "=";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_pvalue();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, param, value) {
                              if(!data.uri_params) data.uri_params = {};
                              if (typeof value === 'undefined'){
                                value = undefined;
                              }
                              else {
                                value = value[1];
                              }
                              data.uri_params[param.toLowerCase()] = value;})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_pname() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_paramchar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_paramchar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, pname) {return pname.join(''); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_pvalue() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_paramchar();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_paramchar();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, pvalue) {return pvalue.join(''); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_paramchar() {
        var result0;
        result0 = parse_param_unreserved();
        if (result0 === null) {
          result0 = parse_unreserved();
          if (result0 === null) {
            result0 = parse_escaped();
          }
        }
        return result0;
      }
      function parse_param_unreserved() {
        var result0;
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 93) {
            result0 = "]";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"]\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 47) {
              result0 = "/";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 58) {
                result0 = ":";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 38) {
                  result0 = "&";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"&\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 43) {
                    result0 = "+";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 36) {
                      result0 = "$";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"$\"");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_headers() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        pos0 = pos;
        if (input.charCodeAt(pos) === 63) {
          result0 = "?";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"?\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_header();
          if (result1 !== null) {
            result2 = [];
            pos1 = pos;
            if (input.charCodeAt(pos) === 38) {
              result3 = "&";
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"&\"");
              }
            }
            if (result3 !== null) {
              result4 = parse_header();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos1;
              }
            } else {
              result3 = null;
              pos = pos1;
            }
            while (result3 !== null) {
              result2.push(result3);
              pos1 = pos;
              if (input.charCodeAt(pos) === 38) {
                result3 = "&";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"&\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_header();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_header() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_hname();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 61) {
            result1 = "=";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_hvalue();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, hname, hvalue) {
                              hname = hname.join('').toLowerCase();
                              hvalue = hvalue.join('');
                              if(!data.uri_headers) data.uri_headers = {};
                              if (!data.uri_headers[hname]) {
                                data.uri_headers[hname] = [hvalue];
                              } else {
                                data.uri_headers[hname].push(hvalue);
                              }})(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_hname() {
        var result0, result1;
        result1 = parse_hnv_unreserved();
        if (result1 === null) {
          result1 = parse_unreserved();
          if (result1 === null) {
            result1 = parse_escaped();
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_hnv_unreserved();
            if (result1 === null) {
              result1 = parse_unreserved();
              if (result1 === null) {
                result1 = parse_escaped();
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      function parse_hvalue() {
        var result0, result1;
        result0 = [];
        result1 = parse_hnv_unreserved();
        if (result1 === null) {
          result1 = parse_unreserved();
          if (result1 === null) {
            result1 = parse_escaped();
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_hnv_unreserved();
          if (result1 === null) {
            result1 = parse_unreserved();
            if (result1 === null) {
              result1 = parse_escaped();
            }
          }
        }
        return result0;
      }
      function parse_hnv_unreserved() {
        var result0;
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 93) {
            result0 = "]";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"]\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 47) {
              result0 = "/";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 63) {
                result0 = "?";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"?\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 58) {
                  result0 = ":";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 43) {
                    result0 = "+";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 36) {
                      result0 = "$";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"$\"");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_Request_Response() {
        var result0;
        result0 = parse_Status_Line();
        if (result0 === null) {
          result0 = parse_Request_Line();
        }
        return result0;
      }
      function parse_Request_Line() {
        var result0, result1, result2, result3, result4;
        var pos0;
        pos0 = pos;
        result0 = parse_Method();
        if (result0 !== null) {
          result1 = parse_SP();
          if (result1 !== null) {
            result2 = parse_Request_URI();
            if (result2 !== null) {
              result3 = parse_SP();
              if (result3 !== null) {
                result4 = parse_SIP_Version();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Request_URI() {
        var result0;
        result0 = parse_SIP_URI();
        if (result0 === null) {
          result0 = parse_absoluteURI();
        }
        return result0;
      }
      function parse_absoluteURI() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_scheme();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_hier_part();
            if (result2 === null) {
              result2 = parse_opaque_part();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_hier_part() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_net_path();
        if (result0 === null) {
          result0 = parse_abs_path();
        }
        if (result0 !== null) {
          pos1 = pos;
          if (input.charCodeAt(pos) === 63) {
            result1 = "?";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"?\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_query();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_net_path() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 2) === "//") {
          result0 = "//";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_authority();
          if (result1 !== null) {
            result2 = parse_abs_path();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_abs_path() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        if (input.charCodeAt(pos) === 47) {
          result0 = "/";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_path_segments();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_opaque_part() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_uric_no_slash();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_uric();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_uric();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_uric() {
        var result0;
        result0 = parse_reserved();
        if (result0 === null) {
          result0 = parse_unreserved();
          if (result0 === null) {
            result0 = parse_escaped();
          }
        }
        return result0;
      }
      function parse_uric_no_slash() {
        var result0;
        result0 = parse_unreserved();
        if (result0 === null) {
          result0 = parse_escaped();
          if (result0 === null) {
            if (input.charCodeAt(pos) === 59) {
              result0 = ";";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 63) {
                result0 = "?";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"?\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 58) {
                  result0 = ":";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 64) {
                    result0 = "@";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"@\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 38) {
                      result0 = "&";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"&\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 61) {
                        result0 = "=";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"=\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 43) {
                          result0 = "+";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"+\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 36) {
                            result0 = "$";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"$\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 44) {
                              result0 = ",";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\",\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_path_segments() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_segment();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          if (input.charCodeAt(pos) === 47) {
            result2 = "/";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result2 !== null) {
            result3 = parse_segment();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            if (input.charCodeAt(pos) === 47) {
              result2 = "/";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_segment();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_segment() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = [];
        result1 = parse_pchar();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_pchar();
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          if (input.charCodeAt(pos) === 59) {
            result2 = ";";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (result2 !== null) {
            result3 = parse_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            if (input.charCodeAt(pos) === 59) {
              result2 = ";";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_param() {
        var result0, result1;
        result0 = [];
        result1 = parse_pchar();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_pchar();
        }
        return result0;
      }
      function parse_pchar() {
        var result0;
        result0 = parse_unreserved();
        if (result0 === null) {
          result0 = parse_escaped();
          if (result0 === null) {
            if (input.charCodeAt(pos) === 58) {
              result0 = ":";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 64) {
                result0 = "@";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"@\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 38) {
                  result0 = "&";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"&\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 61) {
                    result0 = "=";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 43) {
                      result0 = "+";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"+\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 36) {
                        result0 = "$";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"$\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 44) {
                          result0 = ",";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_scheme() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_ALPHA();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ALPHA();
          if (result2 === null) {
            result2 = parse_DIGIT();
            if (result2 === null) {
              if (input.charCodeAt(pos) === 43) {
                result2 = "+";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+\"");
                }
              }
              if (result2 === null) {
                if (input.charCodeAt(pos) === 45) {
                  result2 = "-";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result2 === null) {
                  if (input.charCodeAt(pos) === 46) {
                    result2 = ".";
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }
                }
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ALPHA();
            if (result2 === null) {
              result2 = parse_DIGIT();
              if (result2 === null) {
                if (input.charCodeAt(pos) === 43) {
                  result2 = "+";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"+\"");
                  }
                }
                if (result2 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result2 = "-";
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }
                  if (result2 === null) {
                    if (input.charCodeAt(pos) === 46) {
                      result2 = ".";
                      pos++;
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\".\"");
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.scheme= input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_authority() {
        var result0;
        result0 = parse_srvr();
        if (result0 === null) {
          result0 = parse_reg_name();
        }
        return result0;
      }
      function parse_srvr() {
        var result0, result1;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_userinfo();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 64) {
            result1 = "@";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_hostport();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      function parse_reg_name() {
        var result0, result1;
        result1 = parse_unreserved();
        if (result1 === null) {
          result1 = parse_escaped();
          if (result1 === null) {
            if (input.charCodeAt(pos) === 36) {
              result1 = "$";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"$\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 44) {
                result1 = ",";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 59) {
                  result1 = ";";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\";\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 58) {
                    result1 = ":";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 64) {
                      result1 = "@";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"@\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 38) {
                        result1 = "&";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"&\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 61) {
                          result1 = "=";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"=\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result1 = "+";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"+\"");
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_unreserved();
            if (result1 === null) {
              result1 = parse_escaped();
              if (result1 === null) {
                if (input.charCodeAt(pos) === 36) {
                  result1 = "$";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"$\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 44) {
                    result1 = ",";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 59) {
                      result1 = ";";
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 58) {
                        result1 = ":";
                        pos++;
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }
                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 64) {
                          result1 = "@";
                          pos++;
                        } else {
                          result1 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"@\"");
                          }
                        }
                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 38) {
                            result1 = "&";
                            pos++;
                          } else {
                            result1 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"&\"");
                            }
                          }
                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 61) {
                              result1 = "=";
                              pos++;
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"=\"");
                              }
                            }
                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 43) {
                                result1 = "+";
                                pos++;
                              } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"+\"");
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      function parse_query() {
        var result0, result1;
        result0 = [];
        result1 = parse_uric();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_uric();
        }
        return result0;
      }
      function parse_SIP_Version() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3).toLowerCase() === "sip") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"SIP\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 47) {
            result1 = "/";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_DIGIT();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_DIGIT();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result3 = ".";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result3 !== null) {
                result5 = parse_DIGIT();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_DIGIT();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.sip_version = input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_INVITEm() {
        var result0;
        if (input.substr(pos, 6) === "INVITE") {
          result0 = "INVITE";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"INVITE\"");
          }
        }
        return result0;
      }
      function parse_ACKm() {
        var result0;
        if (input.substr(pos, 3) === "ACK") {
          result0 = "ACK";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"ACK\"");
          }
        }
        return result0;
      }
      function parse_OPTIONSm() {
        var result0;
        if (input.substr(pos, 7) === "OPTIONS") {
          result0 = "OPTIONS";
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"OPTIONS\"");
          }
        }
        return result0;
      }
      function parse_BYEm() {
        var result0;
        if (input.substr(pos, 3) === "BYE") {
          result0 = "BYE";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"BYE\"");
          }
        }
        return result0;
      }
      function parse_CANCELm() {
        var result0;
        if (input.substr(pos, 6) === "CANCEL") {
          result0 = "CANCEL";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"CANCEL\"");
          }
        }
        return result0;
      }
      function parse_REGISTERm() {
        var result0;
        if (input.substr(pos, 8) === "REGISTER") {
          result0 = "REGISTER";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"REGISTER\"");
          }
        }
        return result0;
      }
      function parse_SUBSCRIBEm() {
        var result0;
        if (input.substr(pos, 9) === "SUBSCRIBE") {
          result0 = "SUBSCRIBE";
          pos += 9;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"SUBSCRIBE\"");
          }
        }
        return result0;
      }
      function parse_NOTIFYm() {
        var result0;
        if (input.substr(pos, 6) === "NOTIFY") {
          result0 = "NOTIFY";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"NOTIFY\"");
          }
        }
        return result0;
      }
      function parse_REFERm() {
        var result0;
        if (input.substr(pos, 5) === "REFER") {
          result0 = "REFER";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"REFER\"");
          }
        }
        return result0;
      }
      function parse_Method() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_INVITEm();
        if (result0 === null) {
          result0 = parse_ACKm();
          if (result0 === null) {
            result0 = parse_OPTIONSm();
            if (result0 === null) {
              result0 = parse_BYEm();
              if (result0 === null) {
                result0 = parse_CANCELm();
                if (result0 === null) {
                  result0 = parse_REGISTERm();
                  if (result0 === null) {
                    result0 = parse_SUBSCRIBEm();
                    if (result0 === null) {
                      result0 = parse_NOTIFYm();
                      if (result0 === null) {
                        result0 = parse_REFERm();
                        if (result0 === null) {
                          result0 = parse_token();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.method = input.substring(pos, offset);
                            return data.method; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Status_Line() {
        var result0, result1, result2, result3, result4;
        var pos0;
        pos0 = pos;
        result0 = parse_SIP_Version();
        if (result0 !== null) {
          result1 = parse_SP();
          if (result1 !== null) {
            result2 = parse_Status_Code();
            if (result2 !== null) {
              result3 = parse_SP();
              if (result3 !== null) {
                result4 = parse_Reason_Phrase();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Status_Code() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_extension_code();
        if (result0 !== null) {
          result0 = (function(offset, status_code) {
                          data.status_code = parseInt(status_code.join('')); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_extension_code() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_DIGIT();
        if (result0 !== null) {
          result1 = parse_DIGIT();
          if (result1 !== null) {
            result2 = parse_DIGIT();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Reason_Phrase() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result0 = [];
        result1 = parse_reserved();
        if (result1 === null) {
          result1 = parse_unreserved();
          if (result1 === null) {
            result1 = parse_escaped();
            if (result1 === null) {
              result1 = parse_UTF8_NONASCII();
              if (result1 === null) {
                result1 = parse_UTF8_CONT();
                if (result1 === null) {
                  result1 = parse_SP();
                  if (result1 === null) {
                    result1 = parse_HTAB();
                  }
                }
              }
            }
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_reserved();
          if (result1 === null) {
            result1 = parse_unreserved();
            if (result1 === null) {
              result1 = parse_escaped();
              if (result1 === null) {
                result1 = parse_UTF8_NONASCII();
                if (result1 === null) {
                  result1 = parse_UTF8_CONT();
                  if (result1 === null) {
                    result1 = parse_SP();
                    if (result1 === null) {
                      result1 = parse_HTAB();
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          data.reason_phrase = input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Allow_Events() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_event_type();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_event_type();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_event_type();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Call_ID() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_word();
        if (result0 !== null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 64) {
            result1 = "@";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_word();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                      data = input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Contact() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        result0 = parse_STAR();
        if (result0 === null) {
          pos1 = pos;
          result0 = parse_contact_param();
          if (result0 !== null) {
            result1 = [];
            pos2 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_contact_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              result2 = parse_COMMA();
              if (result2 !== null) {
                result3 = parse_contact_param();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                                var idx, length;
                                length = data.multi_header.length;
                                for (idx = 0; idx < length; idx++) {
                                  if (data.multi_header[idx].parsed === null) {
                                    data = null;
                                    break;
                                  }
                                }
                                if (data !== null) {
                                  data = data.multi_header;
                                } else {
                                  data = -1;
                                }})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_contact_param() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SIP_URI_noparams();
        if (result0 === null) {
          result0 = parse_name_addr();
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_contact_params();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_contact_params();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                                var header;
                                if(!data.multi_header) data.multi_header = [];
                                try {
                                  header = new NameAddrHeader(data.uri, data.display_name, data.params);
                                  delete data.uri;
                                  delete data.display_name;
                                  delete data.params;
                                } catch(e) {
                                  header = null;
                                }
                                data.multi_header.push( { 'possition': pos,
                                                          'offset': offset,
                                                          'parsed': header
                                                        });})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_name_addr() {
        var result0, result1, result2, result3;
        var pos0;
        pos0 = pos;
        result0 = parse_display_name();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_LAQUOT();
          if (result1 !== null) {
            result2 = parse_SIP_URI();
            if (result2 !== null) {
              result3 = parse_RAQUOT();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_display_name() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_LWS();
          if (result2 !== null) {
            result3 = parse_token();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_LWS();
            if (result2 !== null) {
              result3 = parse_token();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 === null) {
          result0 = parse_quoted_string();
        }
        if (result0 !== null) {
          result0 = (function(offset, display_name) {
                                display_name = input.substring(pos, offset).trim();
                                if (display_name[0] === '\"') {
                                  display_name = display_name.substring(1, display_name.length-1);
                                }
                                data.display_name = display_name; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_contact_params() {
        var result0;
        result0 = parse_c_p_q();
        if (result0 === null) {
          result0 = parse_c_p_expires();
          if (result0 === null) {
            result0 = parse_generic_param();
          }
        }
        return result0;
      }
      function parse_c_p_q() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 1).toLowerCase() === "q") {
          result0 = input.substr(pos, 1);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"q\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_qvalue();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, q) {
                                if(!data.params) data.params = {};
                                data.params['q'] = q; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_c_p_expires() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 7).toLowerCase() === "expires") {
          result0 = input.substr(pos, 7);
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"expires\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_delta_seconds();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, expires) {
                                if(!data.params) data.params = {};
                                data.params['expires'] = expires; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_delta_seconds() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_DIGIT();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_DIGIT();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, delta_seconds) {
                                return parseInt(delta_seconds.join('')); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_qvalue() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 48) {
          result0 = "0";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_DIGIT();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_DIGIT();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_DIGIT();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                                return parseFloat(input.substring(pos, offset)); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_generic_param() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_gen_value();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, param, value) {
                                if(!data.params) data.params = {};
                                if (typeof value === 'undefined'){
                                  value = undefined;
                                }
                                else {
                                  value = value[1];
                                }
                                data.params[param.toLowerCase()] = value;})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_gen_value() {
        var result0;
        result0 = parse_token();
        if (result0 === null) {
          result0 = parse_host();
          if (result0 === null) {
            result0 = parse_quoted_string();
          }
        }
        return result0;
      }
      function parse_Content_Disposition() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_disp_type();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_disp_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_disp_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_disp_type() {
        var result0;
        if (input.substr(pos, 6).toLowerCase() === "render") {
          result0 = input.substr(pos, 6);
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"render\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 7).toLowerCase() === "session") {
            result0 = input.substr(pos, 7);
            pos += 7;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"session\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 4).toLowerCase() === "icon") {
              result0 = input.substr(pos, 4);
              pos += 4;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"icon\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 5).toLowerCase() === "alert") {
                result0 = input.substr(pos, 5);
                pos += 5;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"alert\"");
                }
              }
              if (result0 === null) {
                result0 = parse_token();
              }
            }
          }
        }
        return result0;
      }
      function parse_disp_param() {
        var result0;
        result0 = parse_handling_param();
        if (result0 === null) {
          result0 = parse_generic_param();
        }
        return result0;
      }
      function parse_handling_param() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 8).toLowerCase() === "handling") {
          result0 = input.substr(pos, 8);
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"handling\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            if (input.substr(pos, 8).toLowerCase() === "optional") {
              result2 = input.substr(pos, 8);
              pos += 8;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"optional\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos, 8).toLowerCase() === "required") {
                result2 = input.substr(pos, 8);
                pos += 8;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"required\"");
                }
              }
              if (result2 === null) {
                result2 = parse_token();
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Content_Encoding() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_token();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_token();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Content_Length() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_DIGIT();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_DIGIT();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, length) {
                                data = parseInt(length.join('')); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Content_Type() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_media_type();
        if (result0 !== null) {
          result0 = (function(offset) {
                                data = input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_media_type() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_m_type();
        if (result0 !== null) {
          result1 = parse_SLASH();
          if (result1 !== null) {
            result2 = parse_m_subtype();
            if (result2 !== null) {
              result3 = [];
              pos1 = pos;
              result4 = parse_SEMI();
              if (result4 !== null) {
                result5 = parse_m_parameter();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos1;
                }
              } else {
                result4 = null;
                pos = pos1;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos1 = pos;
                result4 = parse_SEMI();
                if (result4 !== null) {
                  result5 = parse_m_parameter();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                } else {
                  result4 = null;
                  pos = pos1;
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_m_type() {
        var result0;
        result0 = parse_discrete_type();
        if (result0 === null) {
          result0 = parse_composite_type();
        }
        return result0;
      }
      function parse_discrete_type() {
        var result0;
        if (input.substr(pos, 4).toLowerCase() === "text") {
          result0 = input.substr(pos, 4);
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"text\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 5).toLowerCase() === "image") {
            result0 = input.substr(pos, 5);
            pos += 5;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"image\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 5).toLowerCase() === "audio") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"audio\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 5).toLowerCase() === "video") {
                result0 = input.substr(pos, 5);
                pos += 5;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"video\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 11).toLowerCase() === "application") {
                  result0 = input.substr(pos, 11);
                  pos += 11;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"application\"");
                  }
                }
                if (result0 === null) {
                  result0 = parse_extension_token();
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_composite_type() {
        var result0;
        if (input.substr(pos, 7).toLowerCase() === "message") {
          result0 = input.substr(pos, 7);
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"message\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 9).toLowerCase() === "multipart") {
            result0 = input.substr(pos, 9);
            pos += 9;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"multipart\"");
            }
          }
          if (result0 === null) {
            result0 = parse_extension_token();
          }
        }
        return result0;
      }
      function parse_extension_token() {
        var result0;
        result0 = parse_token();
        if (result0 === null) {
          result0 = parse_x_token();
        }
        return result0;
      }
      function parse_x_token() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 2).toLowerCase() === "x-") {
          result0 = input.substr(pos, 2);
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"x-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_token();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_m_subtype() {
        var result0;
        result0 = parse_extension_token();
        if (result0 === null) {
          result0 = parse_token();
        }
        return result0;
      }
      function parse_m_parameter() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_m_value();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_m_value() {
        var result0;
        result0 = parse_token();
        if (result0 === null) {
          result0 = parse_quoted_string();
        }
        return result0;
      }
      function parse_CSeq() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_CSeq_value();
        if (result0 !== null) {
          result1 = parse_LWS();
          if (result1 !== null) {
            result2 = parse_Method();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_CSeq_value() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_DIGIT();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_DIGIT();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, cseq_value) {
                          data.value=parseInt(cseq_value.join('')); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Expires() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_delta_seconds();
        if (result0 !== null) {
          result0 = (function(offset, expires) {data = expires; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Event() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_event_type();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_generic_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_generic_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, event_type) {
                               data.event = event_type.join('').toLowerCase(); })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_event_type() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_token_nodot();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          if (input.charCodeAt(pos) === 46) {
            result2 = ".";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result2 !== null) {
            result3 = parse_token_nodot();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_token_nodot();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_From() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SIP_URI_noparams();
        if (result0 === null) {
          result0 = parse_name_addr();
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_from_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_from_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                        var tag = data.tag;
                        try {
                          data = new NameAddrHeader(data.uri, data.display_name, data.params);
                          if (tag) {data.setParam('tag',tag)}
                        } catch(e) {
                          data = -1;
                        }})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_from_param() {
        var result0;
        result0 = parse_tag_param();
        if (result0 === null) {
          result0 = parse_generic_param();
        }
        return result0;
      }
      function parse_tag_param() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3).toLowerCase() === "tag") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"tag\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_token();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tag) {data.tag = tag; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Max_Forwards() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result1 = parse_DIGIT();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_DIGIT();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, forwards) {
                          data = parseInt(forwards.join('')); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Min_Expires() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_delta_seconds();
        if (result0 !== null) {
          result0 = (function(offset, min_expires) {data = min_expires; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Name_Addr_Header() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_display_name();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_display_name();
        }
        if (result0 !== null) {
          result1 = parse_LAQUOT();
          if (result1 !== null) {
            result2 = parse_SIP_URI();
            if (result2 !== null) {
              result3 = parse_RAQUOT();
              if (result3 !== null) {
                result4 = [];
                pos2 = pos;
                result5 = parse_SEMI();
                if (result5 !== null) {
                  result6 = parse_generic_param();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = pos;
                  result5 = parse_SEMI();
                  if (result5 !== null) {
                    result6 = parse_generic_param();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                              try {
                                data = new NameAddrHeader(data.uri, data.display_name, data.params);
                              } catch(e) {
                                data = -1;
                              }})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Proxy_Authenticate() {
        var result0;
        result0 = parse_challenge();
        return result0;
      }
      function parse_challenge() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        pos0 = pos;
        if (input.substr(pos, 6).toLowerCase() === "digest") {
          result0 = input.substr(pos, 6);
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"Digest\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_LWS();
          if (result1 !== null) {
            result2 = parse_digest_cln();
            if (result2 !== null) {
              result3 = [];
              pos1 = pos;
              result4 = parse_COMMA();
              if (result4 !== null) {
                result5 = parse_digest_cln();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos1;
                }
              } else {
                result4 = null;
                pos = pos1;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos1 = pos;
                result4 = parse_COMMA();
                if (result4 !== null) {
                  result5 = parse_digest_cln();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                } else {
                  result4 = null;
                  pos = pos1;
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_other_challenge();
        }
        return result0;
      }
      function parse_other_challenge() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = parse_LWS();
          if (result1 !== null) {
            result2 = parse_auth_param();
            if (result2 !== null) {
              result3 = [];
              pos1 = pos;
              result4 = parse_COMMA();
              if (result4 !== null) {
                result5 = parse_auth_param();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos1;
                }
              } else {
                result4 = null;
                pos = pos1;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos1 = pos;
                result4 = parse_COMMA();
                if (result4 !== null) {
                  result5 = parse_auth_param();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                } else {
                  result4 = null;
                  pos = pos1;
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_auth_param() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_token();
            if (result2 === null) {
              result2 = parse_quoted_string();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_digest_cln() {
        var result0;
        result0 = parse_realm();
        if (result0 === null) {
          result0 = parse_domain();
          if (result0 === null) {
            result0 = parse_nonce();
            if (result0 === null) {
              result0 = parse_opaque();
              if (result0 === null) {
                result0 = parse_stale();
                if (result0 === null) {
                  result0 = parse_algorithm();
                  if (result0 === null) {
                    result0 = parse_qop_options();
                    if (result0 === null) {
                      result0 = parse_auth_param();
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_realm() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 5).toLowerCase() === "realm") {
          result0 = input.substr(pos, 5);
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"realm\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_realm_value();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_realm_value() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_quoted_string_clean();
        if (result0 !== null) {
          result0 = (function(offset, realm) { data.realm = realm; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_domain() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        pos0 = pos;
        if (input.substr(pos, 6).toLowerCase() === "domain") {
          result0 = input.substr(pos, 6);
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"domain\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_LDQUOT();
            if (result2 !== null) {
              result3 = parse_URI();
              if (result3 !== null) {
                result4 = [];
                pos1 = pos;
                result6 = parse_SP();
                if (result6 !== null) {
                  result5 = [];
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_SP();
                  }
                } else {
                  result5 = null;
                }
                if (result5 !== null) {
                  result6 = parse_URI();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos1;
                  }
                } else {
                  result5 = null;
                  pos = pos1;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos1 = pos;
                  result6 = parse_SP();
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_SP();
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result6 = parse_URI();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos1;
                    }
                  } else {
                    result5 = null;
                    pos = pos1;
                  }
                }
                if (result4 !== null) {
                  result5 = parse_RDQUOT();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_URI() {
        var result0;
        result0 = parse_absoluteURI();
        if (result0 === null) {
          result0 = parse_abs_path();
        }
        return result0;
      }
      function parse_nonce() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 5).toLowerCase() === "nonce") {
          result0 = input.substr(pos, 5);
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"nonce\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_nonce_value();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_nonce_value() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_quoted_string_clean();
        if (result0 !== null) {
          result0 = (function(offset, nonce) { data.nonce=nonce; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_opaque() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 6).toLowerCase() === "opaque") {
          result0 = input.substr(pos, 6);
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"opaque\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_quoted_string_clean();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, opaque) { data.opaque=opaque; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_stale() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        if (input.substr(pos, 5).toLowerCase() === "stale") {
          result0 = input.substr(pos, 5);
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"stale\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            pos1 = pos;
            if (input.substr(pos, 4).toLowerCase() === "true") {
              result2 = input.substr(pos, 4);
              pos += 4;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"true\"");
              }
            }
            if (result2 !== null) {
              result2 = (function(offset) { data.stale=true; })(pos1);
            }
            if (result2 === null) {
              pos = pos1;
            }
            if (result2 === null) {
              pos1 = pos;
              if (input.substr(pos, 5).toLowerCase() === "false") {
                result2 = input.substr(pos, 5);
                pos += 5;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"false\"");
                }
              }
              if (result2 !== null) {
                result2 = (function(offset) { data.stale=false; })(pos1);
              }
              if (result2 === null) {
                pos = pos1;
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_algorithm() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 9).toLowerCase() === "algorithm") {
          result0 = input.substr(pos, 9);
          pos += 9;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"algorithm\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            if (input.substr(pos, 3).toLowerCase() === "md5") {
              result2 = input.substr(pos, 3);
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"MD5\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos, 8).toLowerCase() === "md5-sess") {
                result2 = input.substr(pos, 8);
                pos += 8;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"MD5-sess\"");
                }
              }
              if (result2 === null) {
                result2 = parse_token();
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, algorithm) {
                              data.algorithm=algorithm.toUpperCase(); })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_qop_options() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        pos0 = pos;
        if (input.substr(pos, 3).toLowerCase() === "qop") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"qop\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_LDQUOT();
            if (result2 !== null) {
              pos1 = pos;
              result3 = parse_qop_value();
              if (result3 !== null) {
                result4 = [];
                pos2 = pos;
                if (input.charCodeAt(pos) === 44) {
                  result5 = ",";
                  pos++;
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\",\"");
                  }
                }
                if (result5 !== null) {
                  result6 = parse_qop_value();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                } else {
                  result5 = null;
                  pos = pos2;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = pos;
                  if (input.charCodeAt(pos) === 44) {
                    result5 = ",";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_qop_value();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos2;
                    }
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              if (result3 !== null) {
                result4 = parse_RDQUOT();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_qop_value() {
        var result0;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 8).toLowerCase() === "auth-int") {
          result0 = input.substr(pos, 8);
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"auth-int\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4).toLowerCase() === "auth") {
            result0 = input.substr(pos, 4);
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"auth\"");
            }
          }
          if (result0 === null) {
            result0 = parse_token();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, qop_value) {
                                data.qop || (data.qop=[]);
                                data.qop.push(qop_value.toLowerCase()); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Proxy_Require() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_token();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_token();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Record_Route() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_rec_route();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_rec_route();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_rec_route();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          var idx, length;
                          length = data.multi_header.length;
                          for (idx = 0; idx < length; idx++) {
                            if (data.multi_header[idx].parsed === null) {
                              data = null;
                              break;
                            }
                          }
                          if (data !== null) {
                            data = data.multi_header;
                          } else {
                            data = -1;
                          }})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_rec_route() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_name_addr();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_generic_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_generic_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          var header;
                          if(!data.multi_header) data.multi_header = [];
                          try {
                            header = new NameAddrHeader(data.uri, data.display_name, data.params);
                            delete data.uri;
                            delete data.display_name;
                            delete data.params;
                          } catch(e) {
                            header = null;
                          }
                          data.multi_header.push( { 'possition': pos,
                                                    'offset': offset,
                                                    'parsed': header
                                                  });})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Reason() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3).toLowerCase() === "sip") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"SIP\"");
          }
        }
        if (result0 === null) {
          result0 = parse_token();
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_reason_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_reason_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, protocol) {
                          data.protocol = protocol.toLowerCase();
                          if (!data.params) data.params = {};
                          if (data.params.text && data.params.text[0] === '"') {
                            var text = data.params.text;
                            data.text = text.substring(1, text.length-1);
                            delete data.params.text;
                          }
                        })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_reason_param() {
        var result0;
        result0 = parse_reason_cause();
        if (result0 === null) {
          result0 = parse_generic_param();
        }
        return result0;
      }
      function parse_reason_cause() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5).toLowerCase() === "cause") {
          result0 = input.substr(pos, 5);
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"cause\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result3 = parse_DIGIT();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_DIGIT();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cause) {
                          data.cause = parseInt(cause.join(''));
                        })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Require() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_token();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_token();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Route() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_route_param();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_route_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_route_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_route_param() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_name_addr();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_generic_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_generic_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Subscription_State() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_substate_value();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_subexp_params();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_subexp_params();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_substate_value() {
        var result0;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 6).toLowerCase() === "active") {
          result0 = input.substr(pos, 6);
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"active\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 7).toLowerCase() === "pending") {
            result0 = input.substr(pos, 7);
            pos += 7;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"pending\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 10).toLowerCase() === "terminated") {
              result0 = input.substr(pos, 10);
              pos += 10;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"terminated\"");
              }
            }
            if (result0 === null) {
              result0 = parse_token();
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                                data.state = input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_subexp_params() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 6).toLowerCase() === "reason") {
          result0 = input.substr(pos, 6);
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"reason\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_event_reason_value();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, reason) {
                                if (typeof reason !== 'undefined') data.reason = reason; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.substr(pos, 7).toLowerCase() === "expires") {
            result0 = input.substr(pos, 7);
            pos += 7;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"expires\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_EQUAL();
            if (result1 !== null) {
              result2 = parse_delta_seconds();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, expires) {
                                  if (typeof expires !== 'undefined') data.expires = expires; })(pos0, result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.substr(pos, 11).toLowerCase() === "retry_after") {
              result0 = input.substr(pos, 11);
              pos += 11;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"retry_after\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_EQUAL();
              if (result1 !== null) {
                result2 = parse_delta_seconds();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, retry_after) {
                                    if (typeof retry_after !== 'undefined') data.retry_after = retry_after; })(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              result0 = parse_generic_param();
            }
          }
        }
        return result0;
      }
      function parse_event_reason_value() {
        var result0;
        if (input.substr(pos, 11).toLowerCase() === "deactivated") {
          result0 = input.substr(pos, 11);
          pos += 11;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"deactivated\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 9).toLowerCase() === "probation") {
            result0 = input.substr(pos, 9);
            pos += 9;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"probation\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 8).toLowerCase() === "rejected") {
              result0 = input.substr(pos, 8);
              pos += 8;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"rejected\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 7).toLowerCase() === "timeout") {
                result0 = input.substr(pos, 7);
                pos += 7;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"timeout\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 6).toLowerCase() === "giveup") {
                  result0 = input.substr(pos, 6);
                  pos += 6;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"giveup\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 10).toLowerCase() === "noresource") {
                    result0 = input.substr(pos, 10);
                    pos += 10;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"noresource\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 9).toLowerCase() === "invariant") {
                      result0 = input.substr(pos, 9);
                      pos += 9;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"invariant\"");
                      }
                    }
                    if (result0 === null) {
                      result0 = parse_token();
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_Subject() {
        var result0;
        result0 = parse_TEXT_UTF8_TRIM();
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      function parse_Supported() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_token();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_token();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      function parse_To() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SIP_URI_noparams();
        if (result0 === null) {
          result0 = parse_name_addr();
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_to_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_to_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                      var tag = data.tag;
                      try {
                        data = new NameAddrHeader(data.uri, data.display_name, data.params);
                        if (tag) {data.setParam('tag',tag)}
                      } catch(e) {
                        data = -1;
                      }})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_to_param() {
        var result0;
        result0 = parse_tag_param();
        if (result0 === null) {
          result0 = parse_generic_param();
        }
        return result0;
      }
      function parse_Via() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_via_param();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_via_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_via_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_via_param() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_sent_protocol();
        if (result0 !== null) {
          result1 = parse_LWS();
          if (result1 !== null) {
            result2 = parse_sent_by();
            if (result2 !== null) {
              result3 = [];
              pos1 = pos;
              result4 = parse_SEMI();
              if (result4 !== null) {
                result5 = parse_via_params();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos1;
                }
              } else {
                result4 = null;
                pos = pos1;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos1 = pos;
                result4 = parse_SEMI();
                if (result4 !== null) {
                  result5 = parse_via_params();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos1;
                  }
                } else {
                  result4 = null;
                  pos = pos1;
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_via_params() {
        var result0;
        result0 = parse_via_ttl();
        if (result0 === null) {
          result0 = parse_via_maddr();
          if (result0 === null) {
            result0 = parse_via_received();
            if (result0 === null) {
              result0 = parse_via_branch();
              if (result0 === null) {
                result0 = parse_response_port();
                if (result0 === null) {
                  result0 = parse_generic_param();
                }
              }
            }
          }
        }
        return result0;
      }
      function parse_via_ttl() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3).toLowerCase() === "ttl") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"ttl\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_ttl();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, via_ttl_value) {
                              data.ttl = via_ttl_value; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_via_maddr() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5).toLowerCase() === "maddr") {
          result0 = input.substr(pos, 5);
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"maddr\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_host();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, via_maddr) {
                              data.maddr = via_maddr; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_via_received() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 8).toLowerCase() === "received") {
          result0 = input.substr(pos, 8);
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"received\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_IPv4address();
            if (result2 === null) {
              result2 = parse_IPv6address();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, via_received) {
                              data.received = via_received; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_via_branch() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 6).toLowerCase() === "branch") {
          result0 = input.substr(pos, 6);
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"branch\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_token();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, via_branch) {
                              data.branch = via_branch; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_response_port() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5).toLowerCase() === "rport") {
          result0 = input.substr(pos, 5);
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"rport\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_DIGIT();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_DIGIT();
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                              if(typeof response_port !== 'undefined')
                                data.rport = response_port.join(''); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_sent_protocol() {
        var result0, result1, result2, result3, result4;
        var pos0;
        pos0 = pos;
        result0 = parse_protocol_name();
        if (result0 !== null) {
          result1 = parse_SLASH();
          if (result1 !== null) {
            result2 = parse_token();
            if (result2 !== null) {
              result3 = parse_SLASH();
              if (result3 !== null) {
                result4 = parse_transport();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_protocol_name() {
        var result0;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 3).toLowerCase() === "sip") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"SIP\"");
          }
        }
        if (result0 === null) {
          result0 = parse_token();
        }
        if (result0 !== null) {
          result0 = (function(offset, via_protocol) {
                              data.protocol = via_protocol; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_transport() {
        var result0;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 3).toLowerCase() === "udp") {
          result0 = input.substr(pos, 3);
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"UDP\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 3).toLowerCase() === "tcp") {
            result0 = input.substr(pos, 3);
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"TCP\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3).toLowerCase() === "tls") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"TLS\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 4).toLowerCase() === "sctp") {
                result0 = input.substr(pos, 4);
                pos += 4;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"SCTP\"");
                }
              }
              if (result0 === null) {
                result0 = parse_token();
              }
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, via_transport) {
                              data.transport = via_transport; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_sent_by() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_via_host();
        if (result0 !== null) {
          pos1 = pos;
          result1 = parse_COLON();
          if (result1 !== null) {
            result2 = parse_via_port();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_via_host() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_IPv4address();
        if (result0 === null) {
          result0 = parse_IPv6reference();
          if (result0 === null) {
            result0 = parse_hostname();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                              data.host = input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_via_port() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_DIGIT();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_DIGIT();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_DIGIT();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_DIGIT();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_DIGIT();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, via_sent_by_port) {
                              data.port = parseInt(via_sent_by_port.join('')); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_ttl() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_DIGIT();
        if (result0 !== null) {
          result1 = parse_DIGIT();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_DIGIT();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ttl) {
                              return parseInt(ttl.join('')); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_WWW_Authenticate() {
        var result0;
        result0 = parse_challenge();
        return result0;
      }
      function parse_Session_Expires() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_s_e_expires();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_s_e_params();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_s_e_params();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_s_e_expires() {
        var result0;
        var pos0;
        pos0 = pos;
        result0 = parse_delta_seconds();
        if (result0 !== null) {
          result0 = (function(offset, expires) { data.expires = expires; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_s_e_params() {
        var result0;
        result0 = parse_s_e_refresher();
        if (result0 === null) {
          result0 = parse_generic_param();
        }
        return result0;
      }
      function parse_s_e_refresher() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 9).toLowerCase() === "refresher") {
          result0 = input.substr(pos, 9);
          pos += 9;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"refresher\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            if (input.substr(pos, 3).toLowerCase() === "uac") {
              result2 = input.substr(pos, 3);
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"uac\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos, 3).toLowerCase() === "uas") {
                result2 = input.substr(pos, 3);
                pos += 3;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"uas\"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, s_e_refresher_value) { data.refresher = s_e_refresher_value.toLowerCase(); })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_extension_header() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_token();
        if (result0 !== null) {
          result1 = parse_HCOLON();
          if (result1 !== null) {
            result2 = parse_header_value();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_header_value() {
        var result0, result1;
        result0 = [];
        result1 = parse_TEXT_UTF8char();
        if (result1 === null) {
          result1 = parse_UTF8_CONT();
          if (result1 === null) {
            result1 = parse_LWS();
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_TEXT_UTF8char();
          if (result1 === null) {
            result1 = parse_UTF8_CONT();
            if (result1 === null) {
              result1 = parse_LWS();
            }
          }
        }
        return result0;
      }
      function parse_message_body() {
        var result0, result1;
        result0 = [];
        result1 = parse_OCTET();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_OCTET();
        }
        return result0;
      }
      function parse_uuid_URI() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 5) === "uuid:") {
          result0 = "uuid:";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"uuid:\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_uuid();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_uuid() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_hex8();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 45) {
            result1 = "-";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_hex4();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 45) {
                result3 = "-";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_hex4();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 45) {
                    result5 = "-";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_hex4();
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 45) {
                        result7 = "-";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"-\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_hex12();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, uuid) {
                          data = input.substring(pos+5, offset); })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_hex4() {
        var result0, result1, result2, result3;
        var pos0;
        pos0 = pos;
        result0 = parse_HEXDIG();
        if (result0 !== null) {
          result1 = parse_HEXDIG();
          if (result1 !== null) {
            result2 = parse_HEXDIG();
            if (result2 !== null) {
              result3 = parse_HEXDIG();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_hex8() {
        var result0, result1;
        var pos0;
        pos0 = pos;
        result0 = parse_hex4();
        if (result0 !== null) {
          result1 = parse_hex4();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_hex12() {
        var result0, result1, result2;
        var pos0;
        pos0 = pos;
        result0 = parse_hex4();
        if (result0 !== null) {
          result1 = parse_hex4();
          if (result1 !== null) {
            result2 = parse_hex4();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_Refer_To() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SIP_URI_noparams();
        if (result0 === null) {
          result0 = parse_name_addr();
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_generic_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_generic_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                        try {
                          data = new NameAddrHeader(data.uri, data.display_name, data.params);
                        } catch(e) {
                          data = -1;
                        }})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_Replaces() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        pos0 = pos;
        result0 = parse_call_id();
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          result2 = parse_SEMI();
          if (result2 !== null) {
            result3 = parse_replaces_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            result2 = parse_SEMI();
            if (result2 !== null) {
              result3 = parse_replaces_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      function parse_call_id() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        pos0 = pos;
        pos1 = pos;
        result0 = parse_word();
        if (result0 !== null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 64) {
            result1 = "@";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"@\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_word();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                          data.call_id = input.substring(pos, offset); })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_replaces_param() {
        var result0;
        result0 = parse_to_tag();
        if (result0 === null) {
          result0 = parse_from_tag();
          if (result0 === null) {
            result0 = parse_early_flag();
            if (result0 === null) {
              result0 = parse_generic_param();
            }
          }
        }
        return result0;
      }
      function parse_to_tag() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 6) === "to-tag") {
          result0 = "to-tag";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"to-tag\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_token();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, to_tag) {
                            data.to_tag = to_tag; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_from_tag() {
        var result0, result1, result2;
        var pos0, pos1;
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 8) === "from-tag") {
          result0 = "from-tag";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"from-tag\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_token();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, from_tag) {
                            data.from_tag = from_tag; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function parse_early_flag() {
        var result0;
        var pos0;
        pos0 = pos;
        if (input.substr(pos, 10) === "early-only") {
          result0 = "early-only";
          pos += 10;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"early-only\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
                            data.early_only = true; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      function cleanupExpected(expected) {
        expected.sort();
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        var line = 1;
        var column = 1;
        var seenCR = false;
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        return { line: line, column: column };
      }
        var URI = __webpack_require__(/*! ./URI */ "./sipLib/URI.js");
        var NameAddrHeader = __webpack_require__(/*! ./NameAddrHeader */ "./sipLib/NameAddrHeader.js");
        var data = {};
      var result = parseFunctions[startRule]();
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
        return -1;
      }
      return data;
    },
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  /* Thrown when a parser encounters a syntax error. */
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      foundHumanized = found ? quote(found) : "end of input";
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  result.SyntaxError.prototype = Error.prototype;
  return result;
})();

/***/ }),

/***/ "./sipLib/JsSIP.js":
/*!*************************!*\
  !*** ./sipLib/JsSIP.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const adapter = __webpack_require__(/*! webrtc-adapter */ "./node_modules/webrtc-adapter/src/js/adapter_core.js");
const pkg = __webpack_require__(/*! ../package.json */ "./package.json");
const C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const Exceptions = __webpack_require__(/*! ./Exceptions */ "./sipLib/Exceptions.js");
const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const UA = __webpack_require__(/*! ./UA */ "./sipLib/UA.js");
const URI = __webpack_require__(/*! ./URI */ "./sipLib/URI.js");
const NameAddrHeader = __webpack_require__(/*! ./NameAddrHeader */ "./sipLib/NameAddrHeader.js");
const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");
const WebSocketInterface = __webpack_require__(/*! ./WebSocketInterface */ "./sipLib/WebSocketInterface.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP');

debug('version %s', pkg.version);

/**
 * Expose the JsSIP module.
 */
module.exports = {
  C,
  Exceptions,
  Utils,
  UA,
  URI,
  NameAddrHeader,
  WebSocketInterface,
  Grammar,
  // Expose the debug module.
  debug : __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js"),
  // Expose the adapter module.
  adapter,
  get name() { return pkg.title; },
  get version() { return pkg.version; }
};


/***/ }),

/***/ "./sipLib/Message.js":
/*!***************************!*\
  !*** ./sipLib/Message.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const SIPMessage = __webpack_require__(/*! ./SIPMessage */ "./sipLib/SIPMessage.js");
const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const RequestSender = __webpack_require__(/*! ./RequestSender */ "./sipLib/RequestSender.js");
const Exceptions = __webpack_require__(/*! ./Exceptions */ "./sipLib/Exceptions.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:Message');

module.exports = class Message extends EventEmitter
{
  constructor(ua)
  {
    super();

    this._ua = ua;
    this._request = null;
    this._closed = false;

    this._direction = null;
    this._local_identity = null;
    this._remote_identity = null;

    // Whether an incoming message has been replied.
    this._is_replied = false;

    // Custom message empty object for high level use.
    this._data = {};
  }

  get direction()
  {
    return this._direction;
  }

  get local_identity()
  {
    return this._local_identity;
  }

  get remote_identity()
  {
    return this._remote_identity;
  }

  send(target, body, options = {})
  {
    const originalTarget = target;

    if (target === undefined || body === undefined)
    {
      throw new TypeError('Not enough arguments');
    }

    // Check target validity.
    target = this._ua.normalizeTarget(target);
    if (!target)
    {
      throw new TypeError(`Invalid target: ${originalTarget}`);
    }

    // Get call options.
    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const eventHandlers = options.eventHandlers || {};
    const contentType = options.contentType || 'text/plain';

    // Set event handlers.
    for (const event in eventHandlers)
    {
      if (Object.prototype.hasOwnProperty.call(eventHandlers, event))
      {
        this.on(event, eventHandlers[event]);
      }
    }

    extraHeaders.push(`Content-Type: ${contentType}`);

    this._request = new SIPMessage.OutgoingRequest(
      JsSIP_C.MESSAGE, target, this._ua, null, extraHeaders);

    if (body)
    {
      this._request.body = body;
    }

    const request_sender = new RequestSender(this._ua, this._request, {
      onRequestTimeout : () =>
      {
        this._onRequestTimeout();
      },
      onTransportError : () =>
      {
        this._onTransportError();
      },
      onReceiveResponse : (response) =>
      {
        this._receiveResponse(response);
      }
    });

    this._newMessage('local', this._request);

    request_sender.send();
  }

  init_incoming(request)
  {
    this._request = request;

    this._newMessage('remote', request);

    // Reply with a 200 OK if the user didn't reply.
    if (!this._is_replied)
    {
      this._is_replied = true;
      request.reply(200);
    }

    this._close();
  }

  /**
   * Accept the incoming Message
   * Only valid for incoming Messages
   */
  accept(options = {})
  {
    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const body = options.body;

    if (this._direction !== 'incoming')
    {
      throw new Exceptions.NotSupportedError('"accept" not supported for outgoing Message');
    }

    if (this._is_replied)
    {
      throw new Error('incoming Message already replied');
    }

    this._is_replied = true;
    this._request.reply(200, null, extraHeaders, body);
  }

  /**
   * Reject the incoming Message
   * Only valid for incoming Messages
   */
  reject(options = {})
  {
    const status_code = options.status_code || 480;
    const reason_phrase = options.reason_phrase;
    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const body = options.body;

    if (this._direction !== 'incoming')
    {
      throw new Exceptions.NotSupportedError('"reject" not supported for outgoing Message');
    }

    if (this._is_replied)
    {
      throw new Error('incoming Message already replied');
    }

    if (status_code < 300 || status_code >= 700)
    {
      throw new TypeError(`Invalid status_code: ${status_code}`);
    }

    this._is_replied = true;
    this._request.reply(status_code, reason_phrase, extraHeaders, body);
  }

  _receiveResponse(response)
  {
    if (this._closed)
    {
      return;
    }
    switch (true)
    {
      case /^1[0-9]{2}$/.test(response.status_code):
        // Ignore provisional responses.
        break;

      case /^2[0-9]{2}$/.test(response.status_code):
        this._succeeded('remote', response);
        break;

      default:
      {
        const cause = Utils.sipErrorCause(response.status_code);

        this._failed('remote', response, cause);
        break;
      }
    }
  }

  _onRequestTimeout()
  {
    if (this._closed)
    {
      return;
    }
    this._failed('system', null, JsSIP_C.causes.REQUEST_TIMEOUT);
  }

  _onTransportError()
  {
    if (this._closed)
    {
      return;
    }
    this._failed('system', null, JsSIP_C.causes.CONNECTION_ERROR);
  }

  _close()
  {
    this._closed = true;
    this._ua.destroyMessage(this);
  }

  /**
   * Internal Callbacks
   */

  _newMessage(originator, request)
  {
    if (originator === 'remote')
    {
      this._direction = 'incoming';
      this._local_identity = request.to;
      this._remote_identity = request.from;
    }
    else if (originator === 'local')
    {
      this._direction = 'outgoing';
      this._local_identity = request.from;
      this._remote_identity = request.to;
    }

    this._ua.newMessage(this, {
      originator,
      message : this,
      request
    });
  }

  _failed(originator, response, cause)
  {
    debug('MESSAGE failed');

    this._close();

    debug('emit "failed"');

    this.emit('failed', {
      originator,
      response : response || null,
      cause
    });
  }

  _succeeded(originator, response)
  {
    debug('MESSAGE succeeded');

    this._close();

    debug('emit "succeeded"');

    this.emit('succeeded', {
      originator,
      response
    });
  }
};


/***/ }),

/***/ "./sipLib/NameAddrHeader.js":
/*!**********************************!*\
  !*** ./sipLib/NameAddrHeader.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const URI = __webpack_require__(/*! ./URI */ "./sipLib/URI.js");
const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");

module.exports = class NameAddrHeader
{
  /**
   * Parse the given string and returns a NameAddrHeader instance or undefined if
   * it is an invalid NameAddrHeader.
   */
  static parse(name_addr_header)
  {
    name_addr_header = Grammar.parse(name_addr_header, 'Name_Addr_Header');

    if (name_addr_header !== -1)
    {
      return name_addr_header;
    }
    else
    {
      return undefined;
    }
  }

  constructor(uri, display_name, parameters)
  {
    // Checks.
    if (!uri || !(uri instanceof URI))
    {
      throw new TypeError('missing or invalid "uri" parameter');
    }

    // Initialize parameters.
    this._uri = uri;
    this._parameters = {};
    this._display_name = display_name;

    for (const param in parameters)
    {
      if (Object.prototype.hasOwnProperty.call(parameters, param))
      {
        this.setParam(param, parameters[param]);
      }
    }
  }

  get uri()
  {
    return this._uri;
  }

  get display_name()
  {
    return this._display_name;
  }

  set display_name(value)
  {
    this._display_name = (value === 0) ? '0' : value;
  }

  setParam(key, value)
  {
    if (key)
    {
      this._parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();
    }
  }

  getParam(key)
  {
    if (key)
    {
      return this._parameters[key.toLowerCase()];
    }
  }

  hasParam(key)
  {
    if (key)
    {
      return (this._parameters.hasOwnProperty(key.toLowerCase()) && true) || false;
    }
  }

  deleteParam(parameter)
  {
    parameter = parameter.toLowerCase();
    if (this._parameters.hasOwnProperty(parameter))
    {
      const value = this._parameters[parameter];

      delete this._parameters[parameter];

      return value;
    }
  }

  clearParams()
  {
    this._parameters = {};
  }

  clone()
  {
    return new NameAddrHeader(
      this._uri.clone(),
      this._display_name,
      JSON.parse(JSON.stringify(this._parameters)));
  }

  toString()
  {
    let body = (this._display_name || this._display_name === 0) ? `"${this._display_name}" ` : '';

    body += `<${this._uri.toString()}>`;

    for (const parameter in this._parameters)
    {
      if (Object.prototype.hasOwnProperty.call(this._parameters, parameter))
      {
        body += `;${parameter}`;

        if (this._parameters[parameter] !== null)
        {
          body += `=${this._parameters[parameter]}`;
        }
      }
    }

    return body;
  }
};


/***/ }),

/***/ "./sipLib/Parser.js":
/*!**************************!*\
  !*** ./sipLib/Parser.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");
const SIPMessage = __webpack_require__(/*! ./SIPMessage */ "./sipLib/SIPMessage.js");
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:Parser');

debugerror.log = console.warn.bind(console);

/**
 * Parse SIP Message
 */
exports.parseMessage = (data, ua) =>
{
  let message;
  let bodyStart;
  let headerEnd = data.indexOf('\r\n');

  if (headerEnd === -1)
  {
    debugerror('parseMessage() | no CRLF found, not a SIP message');

    return;
  }

  // Parse first line. Check if it is a Request or a Reply.
  const firstLine = data.substring(0, headerEnd);
  let parsed = Grammar.parse(firstLine, 'Request_Response');

  if (parsed === -1)
  {
    debugerror(`parseMessage() | error parsing first line of SIP message: "${firstLine}"`);

    return;
  }
  else if (!parsed.status_code)
  {
    message = new SIPMessage.IncomingRequest(ua);
    message.method = parsed.method;
    message.ruri = parsed.uri;
  }
  else
  {
    message = new SIPMessage.IncomingResponse();
    message.status_code = parsed.status_code;
    message.reason_phrase = parsed.reason_phrase;
  }

  message.data = data;
  let headerStart = headerEnd + 2;

  /* Loop over every line in data. Detect the end of each header and parse
  * it or simply add to the headers collection.
  */
  while (true)
  {
    headerEnd = getHeader(data, headerStart);

    // The SIP message has normally finished.
    if (headerEnd === -2)
    {
      bodyStart = headerStart + 2;
      break;
    }
    // Data.indexOf returned -1 due to a malformed message.
    else if (headerEnd === -1)
    {
      debugerror('parseMessage() | malformed message');

      return;
    }

    parsed = parseHeader(message, data, headerStart, headerEnd);

    if (parsed !== true)
    {
      debugerror('parseMessage() |', parsed.error);

      return;
    }

    headerStart = headerEnd + 2;
  }

  /* RFC3261 18.3.
   * If there are additional bytes in the transport packet
   * beyond the end of the body, they MUST be discarded.
   */
  if (message.hasHeader('content-length'))
  {
    const contentLength = message.getHeader('content-length');

    message.body = data.substr(bodyStart, contentLength);
  }
  else
  {
    message.body = data.substring(bodyStart);
  }

  return message;
};

/**
 * Extract and parse every header of a SIP message.
 */
function getHeader(data, headerStart)
{
  // 'start' position of the header.
  let start = headerStart;
  // 'end' position of the header.
  let end = 0;
  // 'partial end' position of the header.
  let partialEnd = 0;

  // End of message.
  if (data.substring(start, start + 2).match(/(^\r\n)/))
  {
    return -2;
  }

  while (end === 0)
  {
    // Partial End of Header.
    partialEnd = data.indexOf('\r\n', start);

    // 'indexOf' returns -1 if the value to be found never occurs.
    if (partialEnd === -1)
    {
      return partialEnd;
    }

    if (!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\r\n)/) && data.charAt(partialEnd + 2).match(/(^\s+)/))
    {
      // Not the end of the message. Continue from the next position.
      start = partialEnd + 2;
    }
    else
    {
      end = partialEnd;
    }
  }

  return end;
}

function parseHeader(message, data, headerStart, headerEnd)
{
  let parsed;
  const hcolonIndex = data.indexOf(':', headerStart);
  const headerName = data.substring(headerStart, hcolonIndex).trim();
  const headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();

  // If header-field is well-known, parse it.
  switch (headerName.toLowerCase())
  {
    case 'via':
    case 'v':
      message.addHeader('via', headerValue);
      if (message.getHeaders('via').length === 1)
      {
        parsed = message.parseHeader('Via');
        if (parsed)
        {
          message.via = parsed;
          message.via_branch = parsed.branch;
        }
      }
      else
      {
        parsed = 0;
      }
      break;
    case 'from':
    case 'f':
      message.setHeader('from', headerValue);
      parsed = message.parseHeader('from');
      if (parsed)
      {
        message.from = parsed;
        message.from_tag = parsed.getParam('tag');
      }
      break;
    case 'to':
    case 't':
      message.setHeader('to', headerValue);
      parsed = message.parseHeader('to');
      if (parsed)
      {
        message.to = parsed;
        message.to_tag = parsed.getParam('tag');
      }
      break;
    case 'record-route':
      parsed = Grammar.parse(headerValue, 'Record_Route');

      if (parsed === -1)
      {
        parsed = undefined;
      }
      else
      {
        for (const header of parsed)
        {
          message.addHeader('record-route', headerValue.substring(header.possition, header.offset));
          message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;
        }
      }
      break;
    case 'call-id':
    case 'i':
      message.setHeader('call-id', headerValue);
      parsed = message.parseHeader('call-id');
      if (parsed)
      {
        message.call_id = headerValue;
      }
      break;
    case 'contact':
    case 'm':
      parsed = Grammar.parse(headerValue, 'Contact');

      if (parsed === -1)
      {
        parsed = undefined;
      }
      else
      {
        for (const header of parsed)
        {
          message.addHeader('contact', headerValue.substring(header.possition, header.offset));
          message.headers.Contact[message.getHeaders('contact').length - 1].parsed = header.parsed;
        }
      }
      break;
    case 'content-length':
    case 'l':
      message.setHeader('content-length', headerValue);
      parsed = message.parseHeader('content-length');
      break;
    case 'content-type':
    case 'c':
      message.setHeader('content-type', headerValue);
      parsed = message.parseHeader('content-type');
      break;
    case 'cseq':
      message.setHeader('cseq', headerValue);
      parsed = message.parseHeader('cseq');
      if (parsed)
      {
        message.cseq = parsed.value;
      }
      if (message instanceof SIPMessage.IncomingResponse)
      {
        message.method = parsed.method;
      }
      break;
    case 'max-forwards':
      message.setHeader('max-forwards', headerValue);
      parsed = message.parseHeader('max-forwards');
      break;
    case 'www-authenticate':
      message.setHeader('www-authenticate', headerValue);
      parsed = message.parseHeader('www-authenticate');
      break;
    case 'proxy-authenticate':
      message.setHeader('proxy-authenticate', headerValue);
      parsed = message.parseHeader('proxy-authenticate');
      break;
    case 'session-expires':
    case 'x':
      message.setHeader('session-expires', headerValue);
      parsed = message.parseHeader('session-expires');
      if (parsed)
      {
        message.session_expires = parsed.expires;
        message.session_expires_refresher = parsed.refresher;
      }
      break;
    case 'refer-to':
    case 'r':
      message.setHeader('refer-to', headerValue);
      parsed = message.parseHeader('refer-to');
      if (parsed)
      {
        message.refer_to = parsed;
      }
      break;
    case 'replaces':
      message.setHeader('replaces', headerValue);
      parsed = message.parseHeader('replaces');
      if (parsed)
      {
        message.replaces = parsed;
      }
      break;
    case 'event':
    case 'o':
      message.setHeader('event', headerValue);
      parsed = message.parseHeader('event');
      if (parsed)
      {
        message.event = parsed;
      }
      break;
    default:
      // Do not parse this header.
      message.setHeader(headerName, headerValue);
      parsed = 0;
  }

  if (parsed === undefined)
  {
    return {
      error : `error parsing header "${headerName}"`
    };
  }
  else
  {
    return true;
  }
}


/***/ }),

/***/ "./sipLib/RTCSession.js":
/*!******************************!*\
  !*** ./sipLib/RTCSession.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* globals RTCPeerConnection: false, RTCSessionDescription: false */

const EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
const sdp_transform = __webpack_require__(/*! sdp-transform */ "./node_modules/sdp-transform/lib/index.js");
const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const Exceptions = __webpack_require__(/*! ./Exceptions */ "./sipLib/Exceptions.js");
const Transactions = __webpack_require__(/*! ./Transactions */ "./sipLib/Transactions.js");
const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const Timers = __webpack_require__(/*! ./Timers */ "./sipLib/Timers.js");
const SIPMessage = __webpack_require__(/*! ./SIPMessage */ "./sipLib/SIPMessage.js");
const Dialog = __webpack_require__(/*! ./Dialog */ "./sipLib/Dialog.js");
const RequestSender = __webpack_require__(/*! ./RequestSender */ "./sipLib/RequestSender.js");
const RTCSession_DTMF = __webpack_require__(/*! ./RTCSession/DTMF */ "./sipLib/RTCSession/DTMF.js");
const RTCSession_Info = __webpack_require__(/*! ./RTCSession/Info */ "./sipLib/RTCSession/Info.js");
const RTCSession_ReferNotifier = __webpack_require__(/*! ./RTCSession/ReferNotifier */ "./sipLib/RTCSession/ReferNotifier.js");
const RTCSession_ReferSubscriber = __webpack_require__(/*! ./RTCSession/ReferSubscriber */ "./sipLib/RTCSession/ReferSubscriber.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:RTCSession');
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:RTCSession');

debugerror.log = console.warn.bind(console);

const C = {
  // RTCSession states.
  STATUS_NULL               : 0,
  STATUS_INVITE_SENT        : 1,
  STATUS_1XX_RECEIVED       : 2,
  STATUS_INVITE_RECEIVED    : 3,
  STATUS_WAITING_FOR_ANSWER : 4,
  STATUS_ANSWERED           : 5,
  STATUS_WAITING_FOR_ACK    : 6,
  STATUS_CANCELED           : 7,
  STATUS_TERMINATED         : 8,
  STATUS_CONFIRMED          : 9
};

/**
 * Local variables.
 */
const holdMediaTypes = [ 'audio', 'video' ];

module.exports = class RTCSession extends EventEmitter
{
  /**
   * Expose C object.
   */
  static get C()
  {
    return C;
  }

  constructor(ua)
  {
    debug('new');

    super();

    this._id = null;
    this._ua = ua;
    this._status = C.STATUS_NULL;
    this._dialog = null;
    this._earlyDialogs = {};
    this._contact = null;
    this._from_tag = null;
    this._to_tag = null;

    // The RTCPeerConnection instance (public attribute).
    this._connection = null;

    // Prevent races on serial PeerConnction operations.
    this._connectionPromiseQueue = Promise.resolve();

    // Incoming/Outgoing request being currently processed.
    this._request = null;

    // Cancel state for initial outgoing request.
    this._is_canceled = false;
    this._cancel_reason = '';

    // RTCSession confirmation flag.
    this._is_confirmed = false;

    // Is late SDP being negotiated.
    this._late_sdp = false;

    // Default rtcOfferConstraints and rtcAnswerConstrainsts (passed in connect() or answer()).
    this._rtcOfferConstraints = null;
    this._rtcAnswerConstraints = null;

    // Local MediaStream.
    this._localMediaStream = null;
    this._localMediaStreamLocallyGenerated = false;

    // Flag to indicate PeerConnection ready for new actions.
    this._rtcReady = true;

    // SIP Timers.
    this._timers = {
      ackTimer          : null,
      expiresTimer      : null,
      invite2xxTimer    : null,
      userNoAnswerTimer : null
    };

    // Session info.
    this._direction = null;
    this._local_identity = null;
    this._remote_identity = null;
    this._start_time = null;
    this._end_time = null;
    this._tones = null;

    // Mute/Hold state.
    this._audioMuted = false;
    this._videoMuted = false;
    this._localHold = false;
    this._remoteHold = false;

    // Session Timers (RFC 4028).
    this._sessionTimers = {
      enabled        : this._ua.configuration.session_timers,
      refreshMethod  : this._ua.configuration.session_timers_refresh_method,
      defaultExpires : JsSIP_C.SESSION_EXPIRES,
      currentExpires : null,
      running        : false,
      refresher      : false,
      timer          : null // A setTimeout.
    };

    // Map of ReferSubscriber instances indexed by the REFER's CSeq number.
    this._referSubscribers = {};

    // Custom session empty object for high level use.
    this._data = {};
  }

  /**
   * User API
   */

  // Expose RTCSession constants as a property of the RTCSession instance.
  get C()
  {
    return C;
  }

  // Expose session failed/ended causes as a property of the RTCSession instance.
  get causes()
  {
    return JsSIP_C.causes;
  }

  get id()
  {
    return this._id;
  }

  get connection()
  {
    return this._connection;
  }

  get contact()
  {
    return this._contact;
  }

  get direction()
  {
    return this._direction;
  }

  get local_identity()
  {
    return this._local_identity;
  }

  get remote_identity()
  {
    return this._remote_identity;
  }

  get start_time()
  {
    return this._start_time;
  }

  get end_time()
  {
    return this._end_time;
  }

  get data()
  {
    return this._data;
  }

  set data(_data)
  {
    this._data = _data;
  }

  get status()
  {
    return this._status;
  }

  isInProgress()
  {
    switch (this._status)
    {
      case C.STATUS_NULL:
      case C.STATUS_INVITE_SENT:
      case C.STATUS_1XX_RECEIVED:
      case C.STATUS_INVITE_RECEIVED:
      case C.STATUS_WAITING_FOR_ANSWER:
        return true;
      default:
        return false;
    }
  }

  isEstablished()
  {
    switch (this._status)
    {
      case C.STATUS_ANSWERED:
      case C.STATUS_WAITING_FOR_ACK:
      case C.STATUS_CONFIRMED:
        return true;
      default:
        return false;
    }
  }

  isEnded()
  {
    switch (this._status)
    {
      case C.STATUS_CANCELED:
      case C.STATUS_TERMINATED:
        return true;
      default:
        return false;
    }
  }

  isMuted()
  {
    return {
      audio : this._audioMuted,
      video : this._videoMuted
    };
  }

  isOnHold()
  {
    return {
      local  : this._localHold,
      remote : this._remoteHold
    };
  }

  connect(target, options = {}, initCallback)
  {
    debug('connect()');

    const originalTarget = target;
    const eventHandlers = options.eventHandlers || {};
    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const mediaConstraints = options.mediaConstraints || { audio: true, video: true };
    const mediaStream = options.mediaStream || null;
    const pcConfig = options.pcConfig || { iceServers: [] };
    const rtcConstraints = options.rtcConstraints || null;
    const rtcOfferConstraints = options.rtcOfferConstraints || null;

    this._rtcOfferConstraints = rtcOfferConstraints;
    this._rtcAnswerConstraints = options.rtcAnswerConstraints || null;

    this._data = options.data || this._data;

    // Check target.
    if (target === undefined)
    {
      throw new TypeError('Not enough arguments');
    }

    // Check Session Status.
    if (this._status !== C.STATUS_NULL)
    {
      throw new Exceptions.InvalidStateError(this._status);
    }

    // Check WebRTC support.
    if (!window.RTCPeerConnection)
    {
      throw new Exceptions.NotSupportedError('WebRTC not supported');
    }

    // Check target validity.
    target = this._ua.normalizeTarget(target);
    if (!target)
    {
      throw new TypeError(`Invalid target: ${originalTarget}`);
    }

    // Session Timers.
    if (this._sessionTimers.enabled)
    {
      if (Utils.isDecimal(options.sessionTimersExpires))
      {
        if (options.sessionTimersExpires >= JsSIP_C.MIN_SESSION_EXPIRES)
        {
          this._sessionTimers.defaultExpires = options.sessionTimersExpires;
        }
        else
        {
          this._sessionTimers.defaultExpires = JsSIP_C.SESSION_EXPIRES;
        }
      }
    }

    // Set event handlers.
    for (const event in eventHandlers)
    {
      if (Object.prototype.hasOwnProperty.call(eventHandlers, event))
      {
        this.on(event, eventHandlers[event]);
      }
    }

    // Session parameter initialization.
    this._from_tag = Utils.newTag();

    // Set anonymous property.
    const anonymous = options.anonymous || false;

    const requestParams = { from_tag: this._from_tag };

    this._contact = this._ua.contact.toString({
      anonymous,
      outbound : true
    });

    if (anonymous)
    {
      requestParams.from_display_name = 'Anonymous';
      requestParams.from_uri = 'sip:anonymous@anonymous.invalid';

      extraHeaders.push(`P-Preferred-Identity: ${this._ua.configuration.uri.toString()}`);
      extraHeaders.push('Privacy: id');
    }

    extraHeaders.push(`Contact: ${this._contact}`);
    extraHeaders.push('Content-Type: application/sdp');
    if (this._sessionTimers.enabled)
    {
      extraHeaders.push(`Session-Expires: ${this._sessionTimers.defaultExpires}`);
    }

    this._request = new SIPMessage.InitialOutgoingInviteRequest(
      target, this._ua, requestParams, extraHeaders);

    this._id = this._request.call_id + this._from_tag;

    // Create a new RTCPeerConnection instance.
    this._createRTCConnection(pcConfig, rtcConstraints);

    // Set internal properties.
    this._direction = 'outgoing';
    this._local_identity = this._request.from;
    this._remote_identity = this._request.to;

    // User explicitly provided a newRTCSession callback for this session.
    if (initCallback)
    {
      initCallback(this);
    }

    this._newRTCSession('local', this._request);

    this._sendInitialRequest(mediaConstraints, rtcOfferConstraints, mediaStream);
  }

  init_incoming(request, initCallback)
  {
    debug('init_incoming()');

    let expires;
    const contentType = request.getHeader('Content-Type');

    // Check body and content type.
    if (request.body && (contentType !== 'application/sdp'))
    {
      request.reply(415);

      return;
    }

    // Session parameter initialization.
    this._status = C.STATUS_INVITE_RECEIVED;
    this._from_tag = request.from_tag;
    this._id = request.call_id + this._from_tag;
    this._request = request;
    this._contact = this._ua.contact.toString();

    // Get the Expires header value if exists.
    if (request.hasHeader('expires'))
    {
      expires = request.getHeader('expires') * 1000;
    }

    /* Set the to_tag before
     * replying a response code that will create a dialog.
     */
    request.to_tag = Utils.newTag();

    // An error on dialog creation will fire 'failed' event.
    if (! this._createDialog(request, 'UAS', true))
    {
      request.reply(500, 'Missing Contact header field');

      return;
    }

    if (request.body)
    {
      this._late_sdp = false;
    }
    else
    {
      this._late_sdp = true;
    }

    this._status = C.STATUS_WAITING_FOR_ANSWER;

    // Set userNoAnswerTimer.
    this._timers.userNoAnswerTimer = setTimeout(() =>
    {
      request.reply(408);
      this._failed('local', null, JsSIP_C.causes.NO_ANSWER);
    }, this._ua.configuration.no_answer_timeout
    );

    /* Set expiresTimer
     * RFC3261 13.3.1
     */
    if (expires)
    {
      this._timers.expiresTimer = setTimeout(() =>
      {
        if (this._status === C.STATUS_WAITING_FOR_ANSWER)
        {
          request.reply(487);
          this._failed('system', null, JsSIP_C.causes.EXPIRES);
        }
      }, expires
      );
    }

    // Set internal properties.
    this._direction = 'incoming';
    this._local_identity = request.to;
    this._remote_identity = request.from;

    // A init callback was specifically defined.
    if (initCallback)
    {
      initCallback(this);
    }

    // Fire 'newRTCSession' event.
    this._newRTCSession('remote', request);

    // The user may have rejected the call in the 'newRTCSession' event.
    if (this._status === C.STATUS_TERMINATED)
    {
      return;
    }

    // Reply 180.
    request.reply(180, null, [ `Contact: ${this._contact}` ]);

    // Fire 'progress' event.
    // TODO: Document that 'response' field in 'progress' event is null for incoming calls.
    this._progress('local', null);
  }

  /**
   * Answer the call.
   */
  answer(options = {})
  {
    debug('answer()');

    const request = this._request;
    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const mediaConstraints = options.mediaConstraints || {};
    const mediaStream = options.mediaStream || null;
    const pcConfig = options.pcConfig || { iceServers: [] };
    const rtcConstraints = options.rtcConstraints || null;
    const rtcAnswerConstraints = options.rtcAnswerConstraints || null;

    let tracks;
    let peerHasAudioLine = false;
    let peerHasVideoLine = false;
    let peerOffersFullAudio = false;
    let peerOffersFullVideo = false;

    this._rtcAnswerConstraints = rtcAnswerConstraints;
    this._rtcOfferConstraints = options.rtcOfferConstraints || null;

    this._data = options.data || this._data;

    // Check Session Direction and Status.
    if (this._direction !== 'incoming')
    {
      throw new Exceptions.NotSupportedError('"answer" not supported for outgoing RTCSession');
    }

    // Check Session status.
    if (this._status !== C.STATUS_WAITING_FOR_ANSWER)
    {
      throw new Exceptions.InvalidStateError(this._status);
    }

    // Session Timers.
    if (this._sessionTimers.enabled)
    {
      if (Utils.isDecimal(options.sessionTimersExpires))
      {
        if (options.sessionTimersExpires >= JsSIP_C.MIN_SESSION_EXPIRES)
        {
          this._sessionTimers.defaultExpires = options.sessionTimersExpires;
        }
        else
        {
          this._sessionTimers.defaultExpires = JsSIP_C.SESSION_EXPIRES;
        }
      }
    }

    this._status = C.STATUS_ANSWERED;

    // An error on dialog creation will fire 'failed' event.
    if (! this._createDialog(request, 'UAS'))
    {
      request.reply(500, 'Error creating dialog');

      return;
    }

    clearTimeout(this._timers.userNoAnswerTimer);

    extraHeaders.unshift(`Contact: ${this._contact}`);

    // Determine incoming media from incoming SDP offer (if any).
    const sdp = request.parseSDP();

    // Make sure sdp.media is an array, not the case if there is only one media.
    if (! Array.isArray(sdp.media))
    {
      sdp.media = [ sdp.media ];
    }

    // Go through all medias in SDP to find offered capabilities to answer with.
    for (const m of sdp.media)
    {
      if (m.type === 'audio')
      {
        peerHasAudioLine = true;
        if (!m.direction || m.direction === 'sendrecv')
        {
          peerOffersFullAudio = true;
        }
      }
      if (m.type === 'video')
      {
        peerHasVideoLine = true;
        if (!m.direction || m.direction === 'sendrecv')
        {
          peerOffersFullVideo = true;
        }
      }
    }

    // Remove audio from mediaStream if suggested by mediaConstraints.
    if (mediaStream && mediaConstraints.audio === false)
    {
      tracks = mediaStream.getAudioTracks();
      for (const track of tracks)
      {
        mediaStream.removeTrack(track);
      }
    }

    // Remove video from mediaStream if suggested by mediaConstraints.
    if (mediaStream && mediaConstraints.video === false)
    {
      tracks = mediaStream.getVideoTracks();
      for (const track of tracks)
      {
        mediaStream.removeTrack(track);
      }
    }

    // Set audio constraints based on incoming stream if not supplied.
    if (!mediaStream && mediaConstraints.audio === undefined)
    {
      mediaConstraints.audio = peerOffersFullAudio;
    }

    // Set video constraints based on incoming stream if not supplied.
    if (!mediaStream && mediaConstraints.video === undefined)
    {
      mediaConstraints.video = peerOffersFullVideo;
    }

    // Don't ask for audio if the incoming offer has no audio section.
    if (!mediaStream && !peerHasAudioLine)
    {
      mediaConstraints.audio = false;
    }

    // Don't ask for video if the incoming offer has no video section.
    if (!mediaStream && !peerHasVideoLine)
    {
      mediaConstraints.video = false;
    }

    // Create a new RTCPeerConnection instance.
    // TODO: This may throw an error, should react.
    this._createRTCConnection(pcConfig, rtcConstraints);

    Promise.resolve()
      // Handle local MediaStream.
      .then(() =>
      {
        // A local MediaStream is given, use it.
        if (mediaStream)
        {
          return mediaStream;
        }

        // Audio and/or video requested, prompt getUserMedia.
        else if (mediaConstraints.audio || mediaConstraints.video)
        {
          this._localMediaStreamLocallyGenerated = true;

          return navigator.mediaDevices.getUserMedia(mediaConstraints)
            .catch((error) =>
            {
              if (this._status === C.STATUS_TERMINATED)
              {
                throw new Error('terminated');
              }

              request.reply(480);
              this._failed('local', null, JsSIP_C.causes.USER_DENIED_MEDIA_ACCESS);

              debugerror('emit "getusermediafailed" [error:%o]', error);

              this.emit('getusermediafailed', error);

              throw new Error('getUserMedia() failed');
            });
        }
      })
      // Attach MediaStream to RTCPeerconnection.
      .then((stream) =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          throw new Error('terminated');
        }

        this._localMediaStream = stream;
        if (stream)
        {
          this._connection.addStream(stream);
        }
      })
      // Set remote description.
      .then(() =>
      {
        if (this._late_sdp)
        {
          return;
        }

        const e = { originator: 'remote', type: 'offer', sdp: request.body };

        debug('emit "sdp"');
        this.emit('sdp', e);

        const offer = new RTCSessionDescription({ type: 'offer', sdp: e.sdp });

        this._connectionPromiseQueue = this._connectionPromiseQueue
          .then(() => this._connection.setRemoteDescription(offer))
          .catch((error) =>
          {
            request.reply(488);

            this._failed('system', null, JsSIP_C.causes.WEBRTC_ERROR);

            debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

            this.emit('peerconnection:setremotedescriptionfailed', error);

            throw new Error('peerconnection.setRemoteDescription() failed');
          });

        return this._connectionPromiseQueue;
      })
      // Create local description.
      .then(() =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          throw new Error('terminated');
        }

        // TODO: Is this event already useful?
        this._connecting(request);

        if (! this._late_sdp)
        {
          return this._createLocalDescription('answer', rtcAnswerConstraints)
            .catch(() =>
            {
              request.reply(500);

              throw new Error('_createLocalDescription() failed');
            });
        }
        else
        {
          return this._createLocalDescription('offer', this._rtcOfferConstraints)
            .catch(() =>
            {
              request.reply(500);

              throw new Error('_createLocalDescription() failed');
            });
        }
      })
      // Send reply.
      .then((desc) =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          throw new Error('terminated');
        }

        this._handleSessionTimersInIncomingRequest(request, extraHeaders);

        request.reply(200, null, extraHeaders,
          desc,
          () =>
          {
            this._status = C.STATUS_WAITING_FOR_ACK;

            this._setInvite2xxTimer(request, desc);
            this._setACKTimer();
            this._accepted('local');
          },
          () =>
          {
            this._failed('system', null, JsSIP_C.causes.CONNECTION_ERROR);
          }
        );
      })
      .catch((error) =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          return;
        }

        debugerror(error);
      });
  }

  /**
   * Terminate the call.
   */
  terminate(options = {})
  {
    debug('terminate()');

    const cause = options.cause || JsSIP_C.causes.BYE;
    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const body = options.body;

    let cancel_reason;
    let status_code = options.status_code;
    let reason_phrase = options.reason_phrase;

    // Check Session Status.
    if (this._status === C.STATUS_TERMINATED)
    {
      throw new Exceptions.InvalidStateError(this._status);
    }

    switch (this._status)
    {
      // - UAC -
      case C.STATUS_NULL:
      case C.STATUS_INVITE_SENT:
      case C.STATUS_1XX_RECEIVED:
        debug('canceling session');

        if (status_code && (status_code < 200 || status_code >= 700))
        {
          throw new TypeError(`Invalid status_code: ${status_code}`);
        }
        else if (status_code)
        {
          reason_phrase = reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';
          cancel_reason = `SIP ;cause=${status_code} ;text="${reason_phrase}"`;
        }

        // Check Session Status.
        if (this._status === C.STATUS_NULL || this._status === C.STATUS_INVITE_SENT)
        {
          this._is_canceled = true;
          this._cancel_reason = cancel_reason;
        }
        else if (this._status === C.STATUS_1XX_RECEIVED)
        {
          this._request.cancel(cancel_reason);
        }

        this._status = C.STATUS_CANCELED;

        this._failed('local', null, JsSIP_C.causes.CANCELED);
        break;

        // - UAS -
      case C.STATUS_WAITING_FOR_ANSWER:
      case C.STATUS_ANSWERED:
        debug('rejecting session');

        status_code = status_code || 480;

        if (status_code < 300 || status_code >= 700)
        {
          throw new TypeError(`Invalid status_code: ${status_code}`);
        }

        this._request.reply(status_code, reason_phrase, extraHeaders, body);
        this._failed('local', null, JsSIP_C.causes.REJECTED);
        break;

      case C.STATUS_WAITING_FOR_ACK:
      case C.STATUS_CONFIRMED:
        debug('terminating session');

        reason_phrase = options.reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';

        if (status_code && (status_code < 200 || status_code >= 700))
        {
          throw new TypeError(`Invalid status_code: ${status_code}`);
        }
        else if (status_code)
        {
          extraHeaders.push(`Reason: SIP ;cause=${status_code}; text="${reason_phrase}"`);
        }

        /* RFC 3261 section 15 (Terminating a session):
          *
          * "...the callee's UA MUST NOT send a BYE on a confirmed dialog
          * until it has received an ACK for its 2xx response or until the server
          * transaction times out."
          */
        if (this._status === C.STATUS_WAITING_FOR_ACK &&
            this._direction === 'incoming' &&
            this._request.server_transaction.state !== Transactions.C.STATUS_TERMINATED)
        {

          // Save the dialog for later restoration.
          const dialog = this._dialog;

          // Send the BYE as soon as the ACK is received...
          this.receiveRequest = ({ method }) =>
          {
            if (method === JsSIP_C.ACK)
            {
              this.sendRequest(JsSIP_C.BYE, {
                extraHeaders,
                body
              });
              dialog.terminate();
            }
          };

          // .., or when the INVITE transaction times out
          this._request.server_transaction.on('stateChanged', () =>
          {
            if (this._request.server_transaction.state ===
                Transactions.C.STATUS_TERMINATED)
            {
              this.sendRequest(JsSIP_C.BYE, {
                extraHeaders,
                body
              });
              dialog.terminate();
            }
          });

          this._ended('local', null, cause);

          // Restore the dialog into 'this' in order to be able to send the in-dialog BYE :-).
          this._dialog = dialog;

          // Restore the dialog into 'ua' so the ACK can reach 'this' session.
          this._ua.newDialog(dialog);
        }
        else
        {
          this.sendRequest(JsSIP_C.BYE, {
            extraHeaders,
            body
          });

          this._ended('local', null, cause);
        }
    }
  }

  sendDTMF(tones, options = {})
  {
    debug('sendDTMF() | tones: %s', tones);

    let position = 0;
    let duration = options.duration || null;
    let interToneGap = options.interToneGap || null;

    if (tones === undefined)
    {
      throw new TypeError('Not enough arguments');
    }

    // Check Session Status.
    if (this._status !== C.STATUS_CONFIRMED && this._status !== C.STATUS_WAITING_FOR_ACK)
    {
      throw new Exceptions.InvalidStateError(this._status);
    }

    // Convert to string.
    if (typeof tones === 'number')
    {
      tones = tones.toString();
    }

    // Check tones.
    if (!tones || typeof tones !== 'string' || !tones.match(/^[0-9A-DR#*,]+$/i))
    {
      throw new TypeError(`Invalid tones: ${tones}`);
    }

    // Check duration.
    if (duration && !Utils.isDecimal(duration))
    {
      throw new TypeError(`Invalid tone duration: ${duration}`);
    }
    else if (!duration)
    {
      duration = RTCSession_DTMF.C.DEFAULT_DURATION;
    }
    else if (duration < RTCSession_DTMF.C.MIN_DURATION)
    {
      debug(`"duration" value is lower than the minimum allowed, setting it to ${RTCSession_DTMF.C.MIN_DURATION} milliseconds`);
      duration = RTCSession_DTMF.C.MIN_DURATION;
    }
    else if (duration > RTCSession_DTMF.C.MAX_DURATION)
    {
      debug(`"duration" value is greater than the maximum allowed, setting it to ${RTCSession_DTMF.C.MAX_DURATION} milliseconds`);
      duration = RTCSession_DTMF.C.MAX_DURATION;
    }
    else
    {
      duration = Math.abs(duration);
    }
    options.duration = duration;

    // Check interToneGap.
    if (interToneGap && !Utils.isDecimal(interToneGap))
    {
      throw new TypeError(`Invalid interToneGap: ${interToneGap}`);
    }
    else if (!interToneGap)
    {
      interToneGap = RTCSession_DTMF.C.DEFAULT_INTER_TONE_GAP;
    }
    else if (interToneGap < RTCSession_DTMF.C.MIN_INTER_TONE_GAP)
    {
      debug(`"interToneGap" value is lower than the minimum allowed, setting it to ${RTCSession_DTMF.C.MIN_INTER_TONE_GAP} milliseconds`);
      interToneGap = RTCSession_DTMF.C.MIN_INTER_TONE_GAP;
    }
    else
    {
      interToneGap = Math.abs(interToneGap);
    }

    if (this._tones)
    {
      // Tones are already queued, just add to the queue.
      this._tones += tones;

      return;
    }

    this._tones = tones;

    // Send the first tone.
    _sendDTMF.call(this);

    function _sendDTMF()
    {
      let timeout;

      if (this._status === C.STATUS_TERMINATED ||
          !this._tones || position >= this._tones.length)
      {
        // Stop sending DTMF.
        this._tones = null;

        return;
      }

      const tone = this._tones[position];

      position += 1;

      if (tone === ',')
      {
        timeout = 2000;
      }
      else
      {
        const dtmf = new RTCSession_DTMF(this);

        options.eventHandlers = {
          onFailed : () => { this._tones = null; }
        };
        dtmf.send(tone, options);
        timeout = duration + interToneGap;
      }

      // Set timeout for the next tone.
      setTimeout(_sendDTMF.bind(this), timeout);
    }
  }

  sendInfo(contentType, body, options = {})
  {
    debug('sendInfo()');

    // Check Session Status.
    if (this._status !== C.STATUS_CONFIRMED && this._status !== C.STATUS_WAITING_FOR_ACK)
    {
      throw new Exceptions.InvalidStateError(this._status);
    }

    const info = new RTCSession_Info(this);

    info.send(contentType, body, options);
  }

  /**
   * Mute
   */
  mute(options = { audio: true, video: false })
  {
    debug('mute()');

    let audioMuted = false, videoMuted = false;

    if (this._audioMuted === false && options.audio)
    {
      audioMuted = true;
      this._audioMuted = true;
      this._toogleMuteAudio(true);
    }

    if (this._videoMuted === false && options.video)
    {
      videoMuted = true;
      this._videoMuted = true;
      this._toogleMuteVideo(true);
    }

    if (audioMuted === true || videoMuted === true)
    {
      this._onmute({
        audio : audioMuted,
        video : videoMuted
      });
    }
  }

  /**
   * Unmute
   */
  unmute(options = { audio: true, video: true })
  {
    debug('unmute()');

    let audioUnMuted = false, videoUnMuted = false;

    if (this._audioMuted === true && options.audio)
    {
      audioUnMuted = true;
      this._audioMuted = false;

      if (this._localHold === false)
      {
        this._toogleMuteAudio(false);
      }
    }

    if (this._videoMuted === true && options.video)
    {
      videoUnMuted = true;
      this._videoMuted = false;

      if (this._localHold === false)
      {
        this._toogleMuteVideo(false);
      }
    }

    if (audioUnMuted === true || videoUnMuted === true)
    {
      this._onunmute({
        audio : audioUnMuted,
        video : videoUnMuted
      });
    }
  }

  /**
   * Hold
   */
  hold(options = {}, done)
  {
    debug('hold()');

    if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED)
    {
      return false;
    }

    if (this._localHold === true)
    {
      return false;
    }

    if (! this._isReadyToReOffer())
    {
      return false;
    }

    this._localHold = true;
    this._onhold('local');

    const eventHandlers = {
      succeeded : () =>
      {
        if (done) { done(); }
      },
      failed : () =>
      {
        this.terminate({
          cause         : JsSIP_C.causes.WEBRTC_ERROR,
          status_code   : 500,
          reason_phrase : 'Hold Failed'
        });
      }
    };

    if (options.useUpdate)
    {
      this._sendUpdate({
        sdpOffer     : true,
        eventHandlers,
        extraHeaders : options.extraHeaders
      });
    }
    else
    {
      this._sendReinvite({
        eventHandlers,
        extraHeaders : options.extraHeaders
      });
    }

    return true;
  }

  unhold(options = {}, done)
  {
    debug('unhold()');

    if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED)
    {
      return false;
    }

    if (this._localHold === false)
    {
      return false;
    }

    if (! this._isReadyToReOffer())
    {
      return false;
    }

    this._localHold = false;
    this._onunhold('local');

    const eventHandlers = {
      succeeded : () =>
      {
        if (done) { done(); }
      },
      failed : () =>
      {
        this.terminate({
          cause         : JsSIP_C.causes.WEBRTC_ERROR,
          status_code   : 500,
          reason_phrase : 'Unhold Failed'
        });
      }
    };

    if (options.useUpdate)
    {
      this._sendUpdate({
        sdpOffer     : true,
        eventHandlers,
        extraHeaders : options.extraHeaders
      });
    }
    else
    {
      this._sendReinvite({
        eventHandlers,
        extraHeaders : options.extraHeaders
      });
    }

    return true;
  }

  renegotiate(options = {}, done)
  {
    debug('renegotiate()');

    const rtcOfferConstraints = options.rtcOfferConstraints || null;

    if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED)
    {
      return false;
    }

    if (! this._isReadyToReOffer())
    {
      return false;
    }

    const eventHandlers = {
      succeeded : () =>
      {
        if (done) { done(); }
      },
      failed : () =>
      {
        this.terminate({
          cause         : JsSIP_C.causes.WEBRTC_ERROR,
          status_code   : 500,
          reason_phrase : 'Media Renegotiation Failed'
        });
      }
    };

    this._setLocalMediaStatus();

    if (options.useUpdate)
    {
      this._sendUpdate({
        sdpOffer     : true,
        eventHandlers,
        rtcOfferConstraints,
        extraHeaders : options.extraHeaders
      });
    }
    else
    {
      this._sendReinvite({
        eventHandlers,
        rtcOfferConstraints,
        extraHeaders : options.extraHeaders
      });
    }

    return true;
  }

  /**
   * Refer
   */
  refer(target, options)
  {
    debug('refer()');

    const originalTarget = target;

    if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED)
    {
      return false;
    }

    // Check target validity.
    target = this._ua.normalizeTarget(target);
    if (!target)
    {
      throw new TypeError(`Invalid target: ${originalTarget}`);
    }

    const referSubscriber = new RTCSession_ReferSubscriber(this);

    referSubscriber.sendRefer(target, options);

    // Store in the map.
    const id = referSubscriber.id;

    this._referSubscribers[id] = referSubscriber;

    // Listen for ending events so we can remove it from the map.
    referSubscriber.on('requestFailed', () =>
    {
      delete this._referSubscribers[id];
    });
    referSubscriber.on('accepted', () =>
    {
      delete this._referSubscribers[id];
    });
    referSubscriber.on('failed', () =>
    {
      delete this._referSubscribers[id];
    });

    return referSubscriber;
  }

  /**
   * Send a generic in-dialog Request
   */
  sendRequest(method, options)
  {
    debug('sendRequest()');

    return this._dialog.sendRequest(method, options);
  }

  /**
   * In dialog Request Reception
   */
  receiveRequest(request)
  {
    debug('receiveRequest()');

    if (request.method === JsSIP_C.CANCEL)
    {
      /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL
      * was in progress and that the UAC MAY continue with the session established by
      * any 2xx response, or MAY terminate with BYE. JsSIP does continue with the
      * established session. So the CANCEL is processed only if the session is not yet
      * established.
      */

      /*
      * Terminate the whole session in case the user didn't accept (or yet send the answer)
      * nor reject the request opening the session.
      */
      if (this._status === C.STATUS_WAITING_FOR_ANSWER ||
          this._status === C.STATUS_ANSWERED)
      {
        this._status = C.STATUS_CANCELED;
        this._request.reply(487);
        this._failed('remote', request, JsSIP_C.causes.CANCELED);
      }
    }
    else
    {
      // Requests arriving here are in-dialog requests.
      switch (request.method)
      {
        case JsSIP_C.ACK:
          if (this._status !== C.STATUS_WAITING_FOR_ACK)
          {
            return;
          }

          // Update signaling status.
          this._status = C.STATUS_CONFIRMED;

          clearTimeout(this._timers.ackTimer);
          clearTimeout(this._timers.invite2xxTimer);

          if (this._late_sdp)
          {
            if (!request.body)
            {
              this.terminate({
                cause       : JsSIP_C.causes.MISSING_SDP,
                status_code : 400
              });
              break;
            }

            const e = { originator: 'remote', type: 'answer', sdp: request.body };

            debug('emit "sdp"');
            this.emit('sdp', e);

            const answer = new RTCSessionDescription({ type: 'answer', sdp: e.sdp });

            this._connectionPromiseQueue = this._connectionPromiseQueue
              .then(() => this._connection.setRemoteDescription(answer))
              .then(() =>
              {
                if (!this._is_confirmed)
                {
                  this._confirmed('remote', request);
                }
              })
              .catch((error) =>
              {
                this.terminate({
                  cause       : JsSIP_C.causes.BAD_MEDIA_DESCRIPTION,
                  status_code : 488
                });

                debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);
                this.emit('peerconnection:setremotedescriptionfailed', error);
              });
          }
          else
          if (!this._is_confirmed)
          {
            this._confirmed('remote', request);
          }

          break;
        case JsSIP_C.BYE:
          if (this._status === C.STATUS_CONFIRMED)
          {
            request.reply(200);
            this._ended('remote', request, JsSIP_C.causes.BYE);
          }
          else if (this._status === C.STATUS_INVITE_RECEIVED)
          {
            request.reply(200);
            this._request.reply(487, 'BYE Received');
            this._ended('remote', request, JsSIP_C.causes.BYE);
          }
          else
          {
            request.reply(403, 'Wrong Status');
          }
          break;
        case JsSIP_C.INVITE:
          if (this._status === C.STATUS_CONFIRMED)
          {
            if (request.hasHeader('replaces'))
            {
              this._receiveReplaces(request);
            }
            else
            {
              this._receiveReinvite(request);
            }
          }
          else
          {
            request.reply(403, 'Wrong Status');
          }
          break;
        case JsSIP_C.INFO:
          if (this._status === C.STATUS_1XX_RECEIVED ||
              this._status === C.STATUS_WAITING_FOR_ANSWER ||
              this._status === C.STATUS_ANSWERED ||
              this._status === C.STATUS_WAITING_FOR_ACK ||
              this._status === C.STATUS_CONFIRMED)
          {
            const contentType = request.getHeader('content-type');

            if (contentType && (contentType.match(/^application\/dtmf-relay/i)))
            {
              new RTCSession_DTMF(this).init_incoming(request);
            }
            else if (contentType !== undefined)
            {
              new RTCSession_Info(this).init_incoming(request);
            }
            else
            {
              request.reply(415);
            }
          }
          else
          {
            request.reply(403, 'Wrong Status');
          }
          break;
        case JsSIP_C.UPDATE:
          if (this._status === C.STATUS_CONFIRMED)
          {
            this._receiveUpdate(request);
          }
          else
          {
            request.reply(403, 'Wrong Status');
          }
          break;
        case JsSIP_C.REFER:
          if (this._status === C.STATUS_CONFIRMED)
          {
            this._receiveRefer(request);
          }
          else
          {
            request.reply(403, 'Wrong Status');
          }
          break;
        case JsSIP_C.NOTIFY:
          if (this._status === C.STATUS_CONFIRMED)
          {
            this._receiveNotify(request);
          }
          else
          {
            request.reply(403, 'Wrong Status');
          }
          break;
        default:
          request.reply(501);
      }
    }
  }

  /**
   * Session Callbacks
   */

  onTransportError()
  {
    debugerror('onTransportError()');

    if (this._status !== C.STATUS_TERMINATED)
    {
      this.terminate({
        status_code   : 500,
        reason_phrase : JsSIP_C.causes.CONNECTION_ERROR,
        cause         : JsSIP_C.causes.CONNECTION_ERROR
      });
    }
  }

  onRequestTimeout()
  {
    debugerror('onRequestTimeout()');

    if (this._status !== C.STATUS_TERMINATED)
    {
      this.terminate({
        status_code   : 408,
        reason_phrase : JsSIP_C.causes.REQUEST_TIMEOUT,
        cause         : JsSIP_C.causes.REQUEST_TIMEOUT
      });
    }
  }

  onDialogError()
  {
    debugerror('onDialogError()');

    if (this._status !== C.STATUS_TERMINATED)
    {
      this.terminate({
        status_code   : 500,
        reason_phrase : JsSIP_C.causes.DIALOG_ERROR,
        cause         : JsSIP_C.causes.DIALOG_ERROR
      });
    }
  }

  // Called from DTMF handler.
  newDTMF(data)
  {
    debug('newDTMF()');

    this.emit('newDTMF', data);
  }

  // Called from Info handler.
  newInfo(data)
  {
    debug('newInfo()');

    this.emit('newInfo', data);
  }

  /**
   * Check if RTCSession is ready for an outgoing re-INVITE or UPDATE with SDP.
   */
  _isReadyToReOffer()
  {
    if (! this._rtcReady)
    {
      debug('_isReadyToReOffer() | internal WebRTC status not ready');

      return false;
    }

    // No established yet.
    if (! this._dialog)
    {
      debug('_isReadyToReOffer() | session not established yet');

      return false;
    }

    // Another INVITE transaction is in progress.
    if (this._dialog.uac_pending_reply === true ||
        this._dialog.uas_pending_reply === true)
    {
      debug('_isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress');

      return false;
    }

    return true;
  }

  _close()
  {
    debug('close()');

    if (this._status === C.STATUS_TERMINATED)
    {
      return;
    }

    this._status = C.STATUS_TERMINATED;

    // Terminate RTC.
    if (this._connection)
    {
      try
      {
        this._connection.close();
      }
      catch (error)
      {
        debugerror('close() | error closing the RTCPeerConnection: %o', error);
      }
    }

    // Close local MediaStream if it was not given by the user.
    if (this._localMediaStream && this._localMediaStreamLocallyGenerated)
    {
      debug('close() | closing local MediaStream');

      Utils.closeMediaStream(this._localMediaStream);
    }

    // Terminate signaling.

    // Clear SIP timers.
    for (const timer in this._timers)
    {
      if (Object.prototype.hasOwnProperty.call(this._timers, timer))
      {
        clearTimeout(this._timers[timer]);
      }
    }

    // Clear Session Timers.
    clearTimeout(this._sessionTimers.timer);

    // Terminate confirmed dialog.
    if (this._dialog)
    {
      this._dialog.terminate();
      delete this._dialog;
    }

    // Terminate early dialogs.
    for (const dialog in this._earlyDialogs)
    {
      if (Object.prototype.hasOwnProperty.call(this._earlyDialogs, dialog))
      {
        this._earlyDialogs[dialog].terminate();
        delete this._earlyDialogs[dialog];
      }
    }

    // Terminate REFER subscribers.
    for (const subscriber in this._referSubscribers)
    {
      if (Object.prototype.hasOwnProperty.call(this._referSubscribers, subscriber))
      {
        delete this._referSubscribers[subscriber];
      }
    }

    this._ua.destroyRTCSession(this);
  }

  /**
   * Private API.
   */

  /**
   * RFC3261 13.3.1.4
   * Response retransmissions cannot be accomplished by transaction layer
   *  since it is destroyed when receiving the first 2xx answer
   */
  _setInvite2xxTimer(request, body)
  {
    let timeout = Timers.T1;

    function invite2xxRetransmission()
    {
      if (this._status !== C.STATUS_WAITING_FOR_ACK)
      {
        return;
      }

      request.reply(200, null, [ `Contact: ${this._contact}` ], body);

      if (timeout < Timers.T2)
      {
        timeout = timeout * 2;
        if (timeout > Timers.T2)
        {
          timeout = Timers.T2;
        }
      }

      this._timers.invite2xxTimer = setTimeout(
        invite2xxRetransmission.bind(this), timeout);
    }

    this._timers.invite2xxTimer = setTimeout(
      invite2xxRetransmission.bind(this), timeout);
  }


  /**
   * RFC3261 14.2
   * If a UAS generates a 2xx response and never receives an ACK,
   *  it SHOULD generate a BYE to terminate the dialog.
   */
  _setACKTimer()
  {
    this._timers.ackTimer = setTimeout(() =>
    {
      if (this._status === C.STATUS_WAITING_FOR_ACK)
      {
        debug('no ACK received, terminating the session');

        clearTimeout(this._timers.invite2xxTimer);
        this.sendRequest(JsSIP_C.BYE);
        this._ended('remote', null, JsSIP_C.causes.NO_ACK);
      }
    }, Timers.TIMER_H);
  }


  _createRTCConnection(pcConfig, rtcConstraints)
  {
    this._connection = new RTCPeerConnection(pcConfig, rtcConstraints);

    this._connection.addEventListener('iceconnectionstatechange', () =>
    {
      const state = this._connection.iceConnectionState;

      // TODO: Do more with different states.
      // Plivo patch for disable RTP timeout
      if (state === 'failed' && !this.disableRtpTimeOut)
      {
        this.terminate({
          cause         : JsSIP_C.causes.RTP_TIMEOUT,
          status_code   : 408,
          reason_phrase : JsSIP_C.causes.RTP_TIMEOUT
        });
      }
    });

    debug('emit "peerconnection"');

    this.emit('peerconnection', {
      peerconnection : this._connection
    });
  }

  _createLocalDescription(type, constraints)
  {
    debug('createLocalDescription()');

    if (type !== 'offer' && type !== 'answer')
      throw new Error(`createLocalDescription() | invalid type "${type}"`);

    const connection = this._connection;

    this._rtcReady = false;

    return Promise.resolve()
      // Create Offer or Answer.
      .then(() =>
      {
        if (type === 'offer')
        {
          return connection.createOffer(constraints)
            .catch((error) =>
            {
              debugerror('emit "peerconnection:createofferfailed" [error:%o]', error);

              this.emit('peerconnection:createofferfailed', error);

              return Promise.reject(error);
            });
        }
        else
        {
          return connection.createAnswer(constraints)
            .catch((error) =>
            {
              debugerror('emit "peerconnection:createanswerfailed" [error:%o]', error);

              this.emit('peerconnection:createanswerfailed', error);

              return Promise.reject(error);
            });
        }
      })
      // Set local description.
      .then((desc) =>
      {
        return connection.setLocalDescription(desc)
          .catch((error) =>
          {
            this._rtcReady = true;

            debugerror('emit "peerconnection:setlocaldescriptionfailed" [error:%o]', error);

            this.emit('peerconnection:setlocaldescriptionfailed', error);

            return Promise.reject(error);
          });
      })
      .then(() =>
      {
        // Resolve right away if 'pc.iceGatheringState' is 'complete'.
        if (connection.iceGatheringState === 'complete')
        {
          this._rtcReady = true;

          const e = { originator: 'local', type: type, sdp: connection.localDescription.sdp };

          debug('emit "sdp"');

          this.emit('sdp', e);

          return Promise.resolve(e.sdp);
        }

        // Add 'pc.onicencandidate' event handler to resolve on last candidate.
        return new Promise((resolve) =>
        {
          let finished = false;
          let listener;

          const ready = () =>
          {
            connection.removeEventListener('icecandidate', listener);

            finished = true;
            this._rtcReady = true;

            const e = { originator: 'local', type: type, sdp: connection.localDescription.sdp };

            debug('emit "sdp"');

            this.emit('sdp', e);

            resolve(e.sdp);
          };

          connection.addEventListener('icecandidate', listener = (event) =>
          {
            const candidate = event.candidate;

            if (candidate)
            {
              this.emit('icecandidate', {
                candidate,
                ready
              });
            }

            else if (! finished)
            {
              ready();
            }
          });
        });
      });
  }

  /**
   * Dialog Management
   */
  _createDialog(message, type, early)
  {
    const local_tag = (type === 'UAS') ? message.to_tag : message.from_tag;
    const remote_tag = (type === 'UAS') ? message.from_tag : message.to_tag;
    const id = message.call_id + local_tag + remote_tag;

    let early_dialog = this._earlyDialogs[id];

    // Early Dialog.
    if (early)
    {
      if (early_dialog)
      {
        return true;
      }
      else
      {
        early_dialog = new Dialog(this, message, type, Dialog.C.STATUS_EARLY);

        // Dialog has been successfully created.
        if (early_dialog.error)
        {
          debug(early_dialog.error);
          this._failed('remote', message, JsSIP_C.causes.INTERNAL_ERROR);

          return false;
        }
        else
        {
          this._earlyDialogs[id] = early_dialog;

          return true;
        }
      }
    }

    // Confirmed Dialog.
    else
    {
      this._from_tag = message.from_tag;
      this._to_tag = message.to_tag;

      // In case the dialog is in _early_ state, update it.
      if (early_dialog)
      {
        early_dialog.update(message, type);
        this._dialog = early_dialog;
        delete this._earlyDialogs[id];

        return true;
      }

      // Otherwise, create a _confirmed_ dialog.
      const dialog = new Dialog(this, message, type);

      if (dialog.error)
      {
        debug(dialog.error);
        this._failed('remote', message, JsSIP_C.causes.INTERNAL_ERROR);

        return false;
      }
      else
      {
        this._dialog = dialog;

        return true;
      }
    }
  }

  /**
   * In dialog INVITE Reception
   */

  _receiveReinvite(request)
  {
    debug('receiveReinvite()');

    const contentType = request.getHeader('Content-Type');
    const data = {
      request,
      callback : undefined,
      reject   : reject.bind(this)
    };

    let rejected = false;

    function reject(options = {})
    {
      rejected = true;

      const status_code = options.status_code || 403;
      const reason_phrase = options.reason_phrase || '';
      const extraHeaders = Utils.cloneArray(options.extraHeaders);

      if (this._status !== C.STATUS_CONFIRMED)
      {
        return false;
      }

      if (status_code < 300 || status_code >= 700)
      {
        throw new TypeError(`Invalid status_code: ${status_code}`);
      }

      request.reply(status_code, reason_phrase, extraHeaders);
    }

    // Emit 'reinvite'.
    this.emit('reinvite', data);

    if (rejected)
    {
      return;
    }

    this._late_sdp = false;

    // Request without SDP.
    if (!request.body)
    {
      this._late_sdp = true;

      this._connectionPromiseQueue = this._connectionPromiseQueue
        .then(() => this._createLocalDescription('offer', this._rtcOfferConstraints))
        .then((sdp) =>
        {
          sendAnswer.call(this, sdp);
        })
        .catch(() =>
        {
          request.reply(500);
        });

      return;
    }

    // Request with SDP.
    if (contentType !== 'application/sdp')
    {
      debug('invalid Content-Type');
      request.reply(415);

      return;
    }

    this._processInDialogSdpOffer(request)
      // Send answer.
      .then((desc) =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          return;
        }

        sendAnswer.call(this, desc);
      })
      .catch((error) =>
      {
        debugerror(error);
      });

    function sendAnswer(desc)
    {
      const extraHeaders = [ `Contact: ${this._contact}` ];

      this._handleSessionTimersInIncomingRequest(request, extraHeaders);

      if (this._late_sdp)
      {
        desc = this._mangleOffer(desc);
      }

      request.reply(200, null, extraHeaders, desc,
        () =>
        {
          this._status = C.STATUS_WAITING_FOR_ACK;
          this._setInvite2xxTimer(request, desc);
          this._setACKTimer();
        }
      );

      // If callback is given execute it.
      if (typeof data.callback === 'function')
      {
        data.callback();
      }
    }
  }

  /**
   * In dialog UPDATE Reception
   */
  _receiveUpdate(request)
  {
    debug('receiveUpdate()');

    const contentType = request.getHeader('Content-Type');
    const data = {
      request,
      callback : undefined,
      reject   : reject.bind(this)
    };

    let rejected = false;

    function reject(options = {})
    {
      rejected = true;

      const status_code = options.status_code || 403;
      const reason_phrase = options.reason_phrase || '';
      const extraHeaders = Utils.cloneArray(options.extraHeaders);

      if (this._status !== C.STATUS_CONFIRMED)
      {
        return false;
      }

      if (status_code < 300 || status_code >= 700)
      {
        throw new TypeError(`Invalid status_code: ${status_code}`);
      }

      request.reply(status_code, reason_phrase, extraHeaders);
    }

    // Emit 'update'.
    this.emit('update', data);

    if (rejected)
    {
      return;
    }

    if (! request.body)
    {
      sendAnswer.call(this, null);

      return;
    }

    if (contentType !== 'application/sdp')
    {
      debug('invalid Content-Type');

      request.reply(415);

      return;
    }

    this._processInDialogSdpOffer(request)
      // Send answer.
      .then((desc) =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          return;
        }

        sendAnswer.call(this, desc);
      })
      .catch((error) =>
      {
        debugerror(error);
      });

    function sendAnswer(desc)
    {
      const extraHeaders = [ `Contact: ${this._contact}` ];

      this._handleSessionTimersInIncomingRequest(request, extraHeaders);

      request.reply(200, null, extraHeaders, desc);

      // If callback is given execute it.
      if (typeof data.callback === 'function')
      {
        data.callback();
      }
    }
  }

  _processInDialogSdpOffer(request)
  {
    debug('_processInDialogSdpOffer()');

    const sdp = request.parseSDP();

    let hold = false;

    for (const m of sdp.media)
    {
      if (holdMediaTypes.indexOf(m.type) === -1)
      {
        continue;
      }

      const direction = m.direction || sdp.direction || 'sendrecv';

      if (direction === 'sendonly' || direction === 'inactive')
      {
        hold = true;
      }
      // If at least one of the streams is active don't emit 'hold'.
      else
      {
        hold = false;
        break;
      }
    }

    const e = { originator: 'remote', type: 'offer', sdp: request.body };

    debug('emit "sdp"');
    this.emit('sdp', e);

    const offer = new RTCSessionDescription({ type: 'offer', sdp: e.sdp });

    this._connectionPromiseQueue = this._connectionPromiseQueue
      // Set remote description.
      .then(() =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          throw new Error('terminated');
        }

        return this._connection.setRemoteDescription(offer)
          .catch((error) =>
          {
            request.reply(488);
            debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

            this.emit('peerconnection:setremotedescriptionfailed', error);

            throw new Error('peerconnection.setRemoteDescription() failed');
          });
      })
      .then(() =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          throw new Error('terminated');
        }

        if (this._remoteHold === true && hold === false)
        {
          this._remoteHold = false;
          this._onunhold('remote');
        }
        else if (this._remoteHold === false && hold === true)
        {
          this._remoteHold = true;
          this._onhold('remote');
        }
      })
      // Create local description.
      .then(() =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          throw new Error('terminated');
        }

        return this._createLocalDescription('answer', this._rtcAnswerConstraints)
          .catch(() =>
          {
            request.reply(500);

            throw new Error('_createLocalDescription() failed');
          });
      });

    return this._connectionPromiseQueue;
  }

  /**
   * In dialog Refer Reception
   */
  _receiveRefer(request)
  {
    debug('receiveRefer()');

    if (typeof request.refer_to === undefined)
    {
      debug('no Refer-To header field present in REFER');
      request.reply(400);

      return;
    }

    if (request.refer_to.uri.scheme !== JsSIP_C.SIP)
    {
      debug('Refer-To header field points to a non-SIP URI scheme');
      request.reply(416);

      return;
    }

    // Reply before the transaction timer expires.
    request.reply(202);

    const notifier = new RTCSession_ReferNotifier(this, request.cseq);

    debug('emit "refer"');

    // Emit 'refer'.
    this.emit('refer', {
      request,
      accept : (initCallback, options) =>
      {
        accept.call(this, initCallback, options);
      },
      reject : () =>
      {
        reject.call(this);
      }
    });

    function accept(initCallback, options = {})
    {
      initCallback = (typeof initCallback === 'function')? initCallback : null;

      if (this._status !== C.STATUS_WAITING_FOR_ACK &&
          this._status !== C.STATUS_CONFIRMED)
      {
        return false;
      }

      const session = new RTCSession(this._ua);

      session.on('progress', ({ response }) =>
      {
        notifier.notify(response.status_code, response.reason_phrase);
      });

      session.on('accepted', ({ response }) =>
      {
        notifier.notify(response.status_code, response.reason_phrase);
      });

      session.on('failed', ({ message, cause }) =>
      {
        if (message)
        {
          notifier.notify(message.status_code, message.reason_phrase);
        }
        else
        {
          notifier.notify(487, cause);
        }
      });

      // Consider the Replaces header present in the Refer-To URI.
      if (request.refer_to.uri.hasHeader('replaces'))
      {
        const replaces = decodeURIComponent(request.refer_to.uri.getHeader('replaces'));

        options.extraHeaders = Utils.cloneArray(options.extraHeaders);
        options.extraHeaders.push(`Replaces: ${replaces}`);
      }

      session.connect(request.refer_to.uri.toAor(), options, initCallback);
    }

    function reject()
    {
      notifier.notify(603);
    }
  }

  /**
   * In dialog Notify Reception
   */
  _receiveNotify(request)
  {
    debug('receiveNotify()');

    if (typeof request.event === undefined)
    {
      request.reply(400);
    }

    switch (request.event.event)
    {
      case 'refer': {
        let id;
        let referSubscriber;

        if (request.event.params && request.event.params.id)
        {
          id = request.event.params.id;
          referSubscriber = this._referSubscribers[id];
        }
        else if (Object.keys(this._referSubscribers).length === 1)
        {
          referSubscriber = this._referSubscribers[
            Object.keys(this._referSubscribers)[0]];
        }
        else
        {
          request.reply(400, 'Missing event id parameter');

          return;
        }

        if (!referSubscriber)
        {
          request.reply(481, 'Subscription does not exist');

          return;
        }

        referSubscriber.receiveNotify(request);
        request.reply(200);

        break;
      }

      default: {
        request.reply(489);
      }
    }
  }

  /**
   * INVITE with Replaces Reception
   */
  _receiveReplaces(request)
  {
    debug('receiveReplaces()');

    function accept(initCallback)
    {
      if (this._status !== C.STATUS_WAITING_FOR_ACK &&
          this._status !== C.STATUS_CONFIRMED)
      {
        return false;
      }

      const session = new RTCSession(this._ua);

      // Terminate the current session when the new one is confirmed.
      session.on('confirmed', () =>
      {
        this.terminate();
      });

      session.init_incoming(request, initCallback);
    }

    function reject()
    {
      debug('Replaced INVITE rejected by the user');
      request.reply(486);
    }

    // Emit 'replace'.
    this.emit('replaces', {
      request,
      accept : (initCallback) => { accept.call(this, initCallback); },
      reject : () => { reject.call(this); }
    });
  }

  /**
   * Initial Request Sender
   */
  _sendInitialRequest(mediaConstraints, rtcOfferConstraints, mediaStream)
  {
    const request_sender = new RequestSender(this._ua, this._request, {
      onRequestTimeout : () =>
      {
        this.onRequestTimeout();
      },
      onTransportError : () =>
      {
        this.onTransportError();
      },
      // Update the request on authentication.
      onAuthenticated : (request) =>
      {
        this._request = request;
      },
      onReceiveResponse : (response) =>
      {
        this._receiveInviteResponse(response);
      }
    });

    // This Promise is resolved within the next iteration, so the app has now
    // a chance to set events such as 'peerconnection' and 'connecting'.
    Promise.resolve()
      // Get a stream if required.
      .then(() =>
      {
        // A stream is given, let the app set events such as 'peerconnection' and 'connecting'.
        if (mediaStream)
        {
          return mediaStream;
        }
        // Request for user media access.
        else if (mediaConstraints.audio || mediaConstraints.video)
        {
          this._localMediaStreamLocallyGenerated = true;

          return navigator.mediaDevices.getUserMedia(mediaConstraints)
            .catch((error) =>
            {
              if (this._status === C.STATUS_TERMINATED)
              {
                throw new Error('terminated');
              }

              this._failed('local', null, JsSIP_C.causes.USER_DENIED_MEDIA_ACCESS);

              debugerror('emit "getusermediafailed" [error:%o]', error);

              this.emit('getusermediafailed');

              throw error;
            });
        }
      })
      .then((stream) =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          throw new Error('terminated');
        }

        this._localMediaStream = stream;

        if (stream)
        {
          this._connection.addStream(stream);
        }

        // TODO: should this be triggered here?
        this._connecting(this._request);

        return this._createLocalDescription('offer', rtcOfferConstraints)
          .catch((error) =>
          {
            this._failed('local', null, JsSIP_C.causes.WEBRTC_ERROR);

            throw error;
          });
      })
      .then((desc) =>
      {
        if (this._is_canceled || this._status === C.STATUS_TERMINATED)
        {
          throw new Error('terminated');
        }

        this._request.body = desc;
        this._status = C.STATUS_INVITE_SENT;

        debug('emit "sending" [request:%o]', this._request);

        // Emit 'sending' so the app can mangle the body before the request is sent.
        this.emit('sending', {
          request : this._request
        });

        request_sender.send();
      })
      .catch((error) =>
      {
        if (this._status === C.STATUS_TERMINATED)
        {
          return;
        }

        debugerror(error);
      });
  }

  /**
   * Reception of Response for Initial INVITE
   */
  _receiveInviteResponse(response)
  {
    debug('receiveInviteResponse()');

    // Handle 2XX retransmissions and responses from forked requests.
    if (this._dialog && (response.status_code >=200 && response.status_code <=299))
    {

      /*
       * If it is a retransmission from the endpoint that established
       * the dialog, send an ACK
       */
      if (this._dialog.id.call_id === response.call_id &&
          this._dialog.id.local_tag === response.from_tag &&
          this._dialog.id.remote_tag === response.to_tag)
      {
        this.sendRequest(JsSIP_C.ACK);

        return;
      }

      // If not, send an ACK  and terminate.
      else
      {
        const dialog = new Dialog(this, response, 'UAC');

        if (dialog.error !== undefined)
        {
          debug(dialog.error);

          return;
        }

        this.sendRequest(JsSIP_C.ACK);
        this.sendRequest(JsSIP_C.BYE);

        return;
      }

    }

    // Proceed to cancellation if the user requested.
    if (this._is_canceled)
    {
      if (response.status_code >= 100 && response.status_code < 200)
      {
        this._request.cancel(this._cancel_reason);
      }
      else if (response.status_code >= 200 && response.status_code < 299)
      {
        this._acceptAndTerminate(response);
      }

      return;
    }

    if (this._status !== C.STATUS_INVITE_SENT && this._status !== C.STATUS_1XX_RECEIVED)
    {
      return;
    }

    switch (true)
    {
      case /^100$/.test(response.status_code):
        this._status = C.STATUS_1XX_RECEIVED;
        break;

      case /^1[0-9]{2}$/.test(response.status_code):
      {
        // Do nothing with 1xx responses without To tag.
        if (!response.to_tag)
        {
          debug('1xx response received without to tag');
          break;
        }

        // Create Early Dialog if 1XX comes with contact.
        if (response.hasHeader('contact'))
        {
          // An error on dialog creation will fire 'failed' event.
          if (! this._createDialog(response, 'UAC', true))
          {
            break;
          }
        }

        this._status = C.STATUS_1XX_RECEIVED;
        this._progress('remote', response);

        if (!response.body)
        {
          break;
        }

        const e = { originator: 'remote', type: 'answer', sdp: response.body };

        debug('emit "sdp"');
        this.emit('sdp', e);

        const answer = new RTCSessionDescription({ type: 'answer', sdp: e.sdp });

        this._connectionPromiseQueue = this._connectionPromiseQueue
          .then(() => this._connection.setRemoteDescription(answer))
          .catch((error) =>
          {
            debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

            this.emit('peerconnection:setremotedescriptionfailed', error);
          });
        break;
      }

      case /^2[0-9]{2}$/.test(response.status_code):
      {
        this._status = C.STATUS_CONFIRMED;

        if (!response.body)
        {
          this._acceptAndTerminate(response, 400, JsSIP_C.causes.MISSING_SDP);
          this._failed('remote', response, JsSIP_C.causes.BAD_MEDIA_DESCRIPTION);
          break;
        }

        // An error on dialog creation will fire 'failed' event.
        if (! this._createDialog(response, 'UAC'))
        {
          break;
        }

        const e = { originator: 'remote', type: 'answer', sdp: response.body };

        debug('emit "sdp"');
        this.emit('sdp', e);

        const answer = new RTCSessionDescription({ type: 'answer', sdp: e.sdp });

        this._connectionPromiseQueue = this._connectionPromiseQueue
          .then(() =>
          {
            // Be ready for 200 with SDP after a 180/183 with SDP.
            // We created a SDP 'answer' for it, so check the current signaling state.
            if (this._connection.signalingState === 'stable')
            {
              return this._connection.createOffer()
                .then((offer) => this._connection.setLocalDescription(offer))
                .catch((error) =>
                {
                  this._acceptAndTerminate(response, 500, error.toString());
                  this._failed('local', response, JsSIP_C.causes.WEBRTC_ERROR);
                });
            }
          })
          .then(() =>
          {
            this._connection.setRemoteDescription(answer)
              .then(() =>
              {
                // Handle Session Timers.
                this._handleSessionTimersInIncomingResponse(response);

                this._accepted('remote', response);
                this.sendRequest(JsSIP_C.ACK);
                this._confirmed('local', null);
              })
              .catch((error) =>
              {
                this._acceptAndTerminate(response, 488, 'Not Acceptable Here');
                this._failed('remote', response, JsSIP_C.causes.BAD_MEDIA_DESCRIPTION);

                debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

                this.emit('peerconnection:setremotedescriptionfailed', error);
              });
          });
        break;
      }

      default:
      {
        const cause = Utils.sipErrorCause(response.status_code);

        this._failed('remote', response, cause);
      }
    }
  }

  /**
   * Send Re-INVITE
   */
  _sendReinvite(options = {})
  {
    debug('sendReinvite()');

    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const eventHandlers = options.eventHandlers || {};
    const rtcOfferConstraints = options.rtcOfferConstraints ||
      this._rtcOfferConstraints || null;

    let succeeded = false;

    extraHeaders.push(`Contact: ${this._contact}`);
    extraHeaders.push('Content-Type: application/sdp');

    // Session Timers.
    if (this._sessionTimers.running)
    {
      extraHeaders.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${this._sessionTimers.refresher ? 'uac' : 'uas'}`);
    }

    this._connectionPromiseQueue = this._connectionPromiseQueue
      .then(() => this._createLocalDescription('offer', rtcOfferConstraints))
      .then((sdp) =>
      {
        sdp = this._mangleOffer(sdp);

        this.sendRequest(JsSIP_C.INVITE, {
          extraHeaders,
          body          : sdp,
          eventHandlers : {
            onSuccessResponse : (response) =>
            {
              onSucceeded.call(this, response);
              succeeded = true;
            },
            onErrorResponse : (response) =>
            {
              onFailed.call(this, response);
            },
            onTransportError : () =>
            {
              this.onTransportError(); // Do nothing because session ends.
            },
            onRequestTimeout : () =>
            {
              this.onRequestTimeout(); // Do nothing because session ends.
            },
            onDialogError : () =>
            {
              this.onDialogError(); // Do nothing because session ends.
            }
          }
        });
      })
      .catch(() =>
      {
        onFailed();
      });

    function onSucceeded(response)
    {
      if (this._status === C.STATUS_TERMINATED)
      {
        return;
      }

      this.sendRequest(JsSIP_C.ACK);

      // If it is a 2XX retransmission exit now.
      if (succeeded) { return; }

      // Handle Session Timers.
      this._handleSessionTimersInIncomingResponse(response);

      // Must have SDP answer.
      if (! response.body)
      {
        onFailed.call(this);

        return;
      }
      else if (response.getHeader('Content-Type') !== 'application/sdp')
      {
        onFailed.call(this);

        return;
      }

      const e = { originator: 'remote', type: 'answer', sdp: response.body };

      debug('emit "sdp"');
      this.emit('sdp', e);

      const answer = new RTCSessionDescription({ type: 'answer', sdp: e.sdp });

      this._connectionPromiseQueue = this._connectionPromiseQueue
        .then(() => this._connection.setRemoteDescription(answer))
        .then(() =>
        {
          if (eventHandlers.succeeded)
          {
            eventHandlers.succeeded(response);
          }
        })
        .catch((error) =>
        {
          onFailed.call(this);

          debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

          this.emit('peerconnection:setremotedescriptionfailed', error);
        });
    }

    function onFailed(response)
    {
      if (eventHandlers.failed)
      {
        eventHandlers.failed(response);
      }
    }
  }

  /**
   * Send UPDATE
   */
  _sendUpdate(options = {})
  {
    debug('sendUpdate()');

    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const eventHandlers = options.eventHandlers || {};
    const rtcOfferConstraints = options.rtcOfferConstraints ||
      this._rtcOfferConstraints || null;
    const sdpOffer = options.sdpOffer || false;

    let succeeded = false;

    extraHeaders.push(`Contact: ${this._contact}`);

    // Session Timers.
    if (this._sessionTimers.running)
    {
      extraHeaders.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${this._sessionTimers.refresher ? 'uac' : 'uas'}`);
    }

    if (sdpOffer)
    {
      extraHeaders.push('Content-Type: application/sdp');

      this._connectionPromiseQueue = this._connectionPromiseQueue
        .then(() => this._createLocalDescription('offer', rtcOfferConstraints))
        .then((sdp) =>
        {
          sdp = this._mangleOffer(sdp);

          this.sendRequest(JsSIP_C.UPDATE, {
            extraHeaders,
            body          : sdp,
            eventHandlers : {
              onSuccessResponse : (response) =>
              {
                onSucceeded.call(this, response);
                succeeded = true;
              },
              onErrorResponse : (response) =>
              {
                onFailed.call(this, response);
              },
              onTransportError : () =>
              {
                this.onTransportError(); // Do nothing because session ends.
              },
              onRequestTimeout : () =>
              {
                this.onRequestTimeout(); // Do nothing because session ends.
              },
              onDialogError : () =>
              {
                this.onDialogError(); // Do nothing because session ends.
              }
            }
          });
        })
        .catch(() =>
        {
          onFailed.call(this);
        });
    }

    // No SDP.
    else
    {
      this.sendRequest(JsSIP_C.UPDATE, {
        extraHeaders,
        eventHandlers : {
          onSuccessResponse : (response) =>
          {
            onSucceeded.call(this, response);
          },
          onErrorResponse : (response) =>
          {
            onFailed.call(this, response);
          },
          onTransportError : () =>
          {
            this.onTransportError(); // Do nothing because session ends.
          },
          onRequestTimeout : () =>
          {
            this.onRequestTimeout(); // Do nothing because session ends.
          },
          onDialogError : () =>
          {
            this.onDialogError(); // Do nothing because session ends.
          }
        }
      });
    }

    function onSucceeded(response)
    {
      if (this._status === C.STATUS_TERMINATED)
      {
        return;
      }

      // If it is a 2XX retransmission exit now.
      if (succeeded) { return; }

      // Handle Session Timers.
      this._handleSessionTimersInIncomingResponse(response);

      // Must have SDP answer.
      if (sdpOffer)
      {
        if (! response.body)
        {
          onFailed.call(this);

          return;
        }
        else if (response.getHeader('Content-Type') !== 'application/sdp')
        {
          onFailed.call(this);

          return;
        }

        const e = { originator: 'remote', type: 'answer', sdp: response.body };

        debug('emit "sdp"');
        this.emit('sdp', e);

        const answer = new RTCSessionDescription({ type: 'answer', sdp: e.sdp });

        this._connectionPromiseQueue = this._connectionPromiseQueue
          .then(() => this._connection.setRemoteDescription(answer))
          .then(() =>
          {
            if (eventHandlers.succeeded)
            {
              eventHandlers.succeeded(response);
            }
          })
          .catch((error) =>
          {
            onFailed.call(this);

            debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

            this.emit('peerconnection:setremotedescriptionfailed', error);
          });
      }
      // No SDP answer.
      else
      if (eventHandlers.succeeded)
      {
        eventHandlers.succeeded(response);
      }
    }

    function onFailed(response)
    {
      if (eventHandlers.failed) { eventHandlers.failed(response); }
    }
  }

  _acceptAndTerminate(response, status_code, reason_phrase)
  {
    debug('acceptAndTerminate()');

    const extraHeaders = [];

    if (status_code)
    {
      reason_phrase = reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';
      extraHeaders.push(`Reason: SIP ;cause=${status_code}; text="${reason_phrase}"`);
    }

    // An error on dialog creation will fire 'failed' event.
    if (this._dialog || this._createDialog(response, 'UAC'))
    {
      this.sendRequest(JsSIP_C.ACK);
      this.sendRequest(JsSIP_C.BYE, {
        extraHeaders
      });
    }

    // Update session status.
    this._status = C.STATUS_TERMINATED;
  }

  /**
   * Correctly set the SDP direction attributes if the call is on local hold
   */
  _mangleOffer(sdp)
  {

    if (! this._localHold && ! this._remoteHold)
    {
      return sdp;
    }

    sdp = sdp_transform.parse(sdp);

    // Local hold.
    if (this._localHold && ! this._remoteHold)
    {
      debug('mangleOffer() | me on hold, mangling offer');
      for (const m of sdp.media)
      {
        if (holdMediaTypes.indexOf(m.type) === -1)
        {
          continue;
        }
        if (!m.direction)
        {
          m.direction = 'sendonly';
        }
        else if (m.direction === 'sendrecv')
        {
          m.direction = 'sendonly';
        }
        else if (m.direction === 'recvonly')
        {
          m.direction = 'inactive';
        }
      }
    }
    // Local and remote hold.
    else if (this._localHold && this._remoteHold)
    {
      debug('mangleOffer() | both on hold, mangling offer');
      for (const m of sdp.media)
      {
        if (holdMediaTypes.indexOf(m.type) === -1)
        {
          continue;
        }
        m.direction = 'inactive';
      }
    }
    // Remote hold.
    else if (this._remoteHold)
    {
      debug('mangleOffer() | remote on hold, mangling offer');
      for (const m of sdp.media)
      {
        if (holdMediaTypes.indexOf(m.type) === -1)
        {
          continue;
        }
        if (!m.direction)
        {
          m.direction = 'recvonly';
        }
        else if (m.direction === 'sendrecv')
        {
          m.direction = 'recvonly';
        }
        else if (m.direction === 'recvonly')
        {
          m.direction = 'inactive';
        }
      }
    }

    return sdp_transform.write(sdp);
  }

  _setLocalMediaStatus()
  {
    let enableAudio = true, enableVideo = true;

    if (this._localHold || this._remoteHold)
    {
      enableAudio = false;
      enableVideo = false;
    }

    if (this._audioMuted)
    {
      enableAudio = false;
    }

    if (this._videoMuted)
    {
      enableVideo = false;
    }

    this._toogleMuteAudio(!enableAudio);
    this._toogleMuteVideo(!enableVideo);
  }

  /**
   * Handle SessionTimers for an incoming INVITE or UPDATE.
   * @param  {IncomingRequest} request
   * @param  {Array} responseExtraHeaders  Extra headers for the 200 response.
   */
  _handleSessionTimersInIncomingRequest(request, responseExtraHeaders)
  {
    if (! this._sessionTimers.enabled) { return; }

    let session_expires_refresher;

    if (request.session_expires && request.session_expires >= JsSIP_C.MIN_SESSION_EXPIRES)
    {
      this._sessionTimers.currentExpires = request.session_expires;
      session_expires_refresher = request.session_expires_refresher || 'uas';
    }
    else
    {
      this._sessionTimers.currentExpires = this._sessionTimers.defaultExpires;
      session_expires_refresher = 'uas';
    }

    responseExtraHeaders.push(`Session-Expires: ${this._sessionTimers.currentExpires};refresher=${session_expires_refresher}`);

    this._sessionTimers.refresher = (session_expires_refresher === 'uas');
    this._runSessionTimer();
  }

  /**
   * Handle SessionTimers for an incoming response to INVITE or UPDATE.
   * @param  {IncomingResponse} response
   */
  _handleSessionTimersInIncomingResponse(response)
  {
    if (! this._sessionTimers.enabled) { return; }

    let session_expires_refresher;

    if (response.session_expires &&
        response.session_expires >= JsSIP_C.MIN_SESSION_EXPIRES)
    {
      this._sessionTimers.currentExpires = response.session_expires;
      session_expires_refresher = response.session_expires_refresher || 'uac';
    }
    else
    {
      this._sessionTimers.currentExpires = this._sessionTimers.defaultExpires;
      session_expires_refresher = 'uac';
    }

    this._sessionTimers.refresher = (session_expires_refresher === 'uac');
    this._runSessionTimer();
  }

  _runSessionTimer()
  {
    const expires = this._sessionTimers.currentExpires;

    this._sessionTimers.running = true;

    clearTimeout(this._sessionTimers.timer);

    // I'm the refresher.
    if (this._sessionTimers.refresher)
    {
      this._sessionTimers.timer = setTimeout(() =>
      {
        if (this._status === C.STATUS_TERMINATED) { return; }

        debug('runSessionTimer() | sending session refresh request');

        if (this._sessionTimers.refreshMethod === JsSIP_C.UPDATE)
        {
          this._sendUpdate();
        }
        else
        {
          this._sendReinvite();
        }
      }, expires * 500); // Half the given interval (as the RFC states).
    }

    // I'm not the refresher.
    else
    {
      this._sessionTimers.timer = setTimeout(() =>
      {
        if (this._status === C.STATUS_TERMINATED) { return; }

        debugerror('runSessionTimer() | timer expired, terminating the session');

        this.terminate({
          cause         : JsSIP_C.causes.REQUEST_TIMEOUT,
          status_code   : 408,
          reason_phrase : 'Session Timer Expired'
        });
      }, expires * 1100);
    }
  }

  _toogleMuteAudio(mute)
  {
    const streams = this._connection.getLocalStreams();

    for (const stream of streams)
    {
      const tracks = stream.getAudioTracks();

      for (const track of tracks)
      {
        track.enabled = !mute;
      }
    }
  }

  _toogleMuteVideo(mute)
  {
    const streams = this._connection.getLocalStreams();

    for (const stream of streams)
    {
      const tracks = stream.getVideoTracks();

      for (const track of tracks)
      {
        track.enabled = !mute;
      }
    }
  }

  _newRTCSession(originator, request)
  {
    debug('newRTCSession()');

    this._ua.newRTCSession(this, {
      originator,
      session : this,
      request
    });
  }

  _connecting(request)
  {
    debug('session connecting');

    debug('emit "connecting"');

    this.emit('connecting', {
      request
    });
  }

  _progress(originator, response)
  {
    debug('session progress');

    debug('emit "progress"');

    this.emit('progress', {
      originator,
      response : response || null
    });
  }

  _accepted(originator, message)
  {
    debug('session accepted');

    this._start_time = new Date();

    debug('emit "accepted"');

    this.emit('accepted', {
      originator,
      response : message || null
    });
  }

  _confirmed(originator, ack)
  {
    debug('session confirmed');

    this._is_confirmed = true;

    debug('emit "confirmed"');

    this.emit('confirmed', {
      originator,
      ack : ack || null
    });
  }

  _ended(originator, message, cause)
  {
    debug('session ended');

    this._end_time = new Date();

    this._close();

    debug('emit "ended"');

    this.emit('ended', {
      originator,
      message : message || null,
      cause
    });
  }

  _failed(originator, message, cause)
  {
    debug('session failed');

    this._close();

    debug('emit "failed"');

    this.emit('failed', {
      originator,
      message : message || null,
      cause
    });
  }

  _onhold(originator)
  {
    debug('session onhold');

    this._setLocalMediaStatus();

    debug('emit "hold"');

    this.emit('hold', {
      originator
    });
  }

  _onunhold(originator)
  {
    debug('session onunhold');

    this._setLocalMediaStatus();

    debug('emit "unhold"');

    this.emit('unhold', {
      originator
    });
  }

  _onmute({ audio, video })
  {
    debug('session onmute');

    this._setLocalMediaStatus();

    debug('emit "muted"');

    this.emit('muted', {
      audio,
      video
    });
  }

  _onunmute({ audio, video })
  {
    debug('session onunmute');

    this._setLocalMediaStatus();

    debug('emit "unmuted"');

    this.emit('unmuted', {
      audio,
      video
    });
  }
};


/***/ }),

/***/ "./sipLib/RTCSession/DTMF.js":
/*!***********************************!*\
  !*** ./sipLib/RTCSession/DTMF.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
const JsSIP_C = __webpack_require__(/*! ../Constants */ "./sipLib/Constants.js");
const Exceptions = __webpack_require__(/*! ../Exceptions */ "./sipLib/Exceptions.js");
const Utils = __webpack_require__(/*! ../Utils */ "./sipLib/Utils.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:RTCSession:DTMF');
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:RTCSession:DTMF');

debugerror.log = console.warn.bind(console);

const C = {
  MIN_DURATION           : 70,
  MAX_DURATION           : 6000,
  DEFAULT_DURATION       : 100,
  MIN_INTER_TONE_GAP     : 50,
  DEFAULT_INTER_TONE_GAP : 500
};

module.exports = class DTMF extends EventEmitter
{
  constructor(session)
  {
    super();

    this._session = session;
    this._direction = null;
    this._tone = null;
    this._duration = null;
    this._request = null;
  }

  get tone()
  {
    return this._tone;
  }

  get duration()
  {
    return this._duration;
  }

  send(tone, options = {})
  {
    if (tone === undefined)
    {
      throw new TypeError('Not enough arguments');
    }

    this._direction = 'outgoing';

    // Check RTCSession Status.
    if (this._session.status !== this._session.C.STATUS_CONFIRMED &&
      this._session.status !== this._session.C.STATUS_WAITING_FOR_ACK)
    {
      throw new Exceptions.InvalidStateError(this._session.status);
    }

    const extraHeaders = Utils.cloneArray(options.extraHeaders);

    this.eventHandlers = options.eventHandlers || {};

    // Check tone type.
    if (typeof tone === 'string')
    {
      tone = tone.toUpperCase();
    }
    else if (typeof tone === 'number')
    {
      tone = tone.toString();
    }
    else
    {
      throw new TypeError(`Invalid tone: ${tone}`);
    }

    // Check tone value.
    if (!tone.match(/^[0-9A-DR#*]$/))
    {
      throw new TypeError(`Invalid tone: ${tone}`);
    }
    else
    {
      this._tone = tone;
    }

    // Duration is checked/corrected in RTCSession.
    this._duration = options.duration;

    extraHeaders.push('Content-Type: application/dtmf-relay');

    let body = `Signal=${this._tone}\r\n`;

    body += `Duration=${this._duration}`;

    this._session.newDTMF({
      originator : 'local',
      dtmf       : this,
      request    : this._request
    });

    this._session.sendRequest(JsSIP_C.INFO, {
      extraHeaders,
      eventHandlers : {
        onSuccessResponse : (response) =>
        {
          this.emit('succeeded', {
            originator : 'remote',
            response
          });
        },
        onErrorResponse : (response) =>
        {
          if (this.eventHandlers.onFailed)
          {
            this.eventHandlers.onFailed();
          }

          this.emit('failed', {
            originator : 'remote',
            response
          });
        },
        onRequestTimeout : () =>
        {
          this._session.onRequestTimeout();
        },
        onTransportError : () =>
        {
          this._session.onTransportError();
        },
        onDialogError : () =>
        {
          this._session.onDialogError();
        }
      },
      body
    });
  }

  init_incoming(request)
  {
    const reg_tone = /^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/;
    const reg_duration = /^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;

    this._direction = 'incoming';
    this._request = request;

    request.reply(200);

    if (request.body)
    {
      const body = request.body.split('\n');

      if (body.length >= 1)
      {
        if (reg_tone.test(body[0]))
        {
          this._tone = body[0].replace(reg_tone, '$2');
        }
      }
      if (body.length >=2)
      {
        if (reg_duration.test(body[1]))
        {
          this._duration = parseInt(body[1].replace(reg_duration, '$2'), 10);
        }
      }
    }

    if (!this._duration)
    {
      this._duration = C.DEFAULT_DURATION;
    }

    if (!this._tone)
    {
      debug('invalid INFO DTMF received, discarded');
    }
    else
    {
      this._session.newDTMF({
        originator : 'remote',
        dtmf       : this,
        request
      });
    }
  }
};

/**
 * Expose C object.
 */
module.exports.C = C;


/***/ }),

/***/ "./sipLib/RTCSession/Info.js":
/*!***********************************!*\
  !*** ./sipLib/RTCSession/Info.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:RTCSession:Info');

debugerror.log = console.warn.bind(console);
const JsSIP_C = __webpack_require__(/*! ../Constants */ "./sipLib/Constants.js");
const Exceptions = __webpack_require__(/*! ../Exceptions */ "./sipLib/Exceptions.js");
const Utils = __webpack_require__(/*! ../Utils */ "./sipLib/Utils.js");

module.exports = class Info extends EventEmitter
{
  constructor(session)
  {
    super();

    this._session = session;
    this._direction = null;
    this._contentType = null;
    this._body = null;
  }

  get contentType()
  {
    return this._contentType;
  }

  get body()
  {
    return this._body;
  }

  send(contentType, body, options = {})
  {
    this._direction = 'outgoing';

    if (contentType === undefined)
    {
      throw new TypeError('Not enough arguments');
    }

    // Check RTCSession Status.
    if (this._session.status !== this._session.C.STATUS_CONFIRMED &&
      this._session.status !== this._session.C.STATUS_WAITING_FOR_ACK)
    {
      throw new Exceptions.InvalidStateError(this._session.status);
    }

    this._contentType = contentType;
    this._body = body;

    const extraHeaders = Utils.cloneArray(options.extraHeaders);

    extraHeaders.push(`Content-Type: ${contentType}`);

    this._session.newInfo({
      originator : 'local',
      info       : this,
      request    : this.request
    });

    this._session.sendRequest(JsSIP_C.INFO, {
      extraHeaders,
      eventHandlers : {
        onSuccessResponse : (response) =>
        {
          this.emit('succeeded', {
            originator : 'remote',
            response
          });
        },
        onErrorResponse : (response) =>
        {
          this.emit('failed', {
            originator : 'remote',
            response
          });
        },
        onTransportError : () =>
        {
          this._session.onTransportError();
        },
        onRequestTimeout : () =>
        {
          this._session.onRequestTimeout();
        },
        onDialogError : () =>
        {
          this._session.onDialogError();
        }
      },
      body
    });
  }

  init_incoming(request)
  {
    this._direction = 'incoming';
    this.request = request;

    request.reply(200);

    this._contentType = request.getHeader('content-type');
    this._body = request.body;

    this._session.newInfo({
      originator : 'remote',
      info       : this,
      request
    });
  }
};


/***/ }),

/***/ "./sipLib/RTCSession/ReferNotifier.js":
/*!********************************************!*\
  !*** ./sipLib/RTCSession/ReferNotifier.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const JsSIP_C = __webpack_require__(/*! ../Constants */ "./sipLib/Constants.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:RTCSession:ReferNotifier');

const C = {
  event_type : 'refer',
  body_type  : 'message/sipfrag;version=2.0',
  expires    : 300
};

module.exports = class ReferNotifier
{
  constructor(session, id, expires)
  {
    this._session = session;
    this._id = id;
    this._expires = expires || C.expires;
    this._active = true;

    // The creation of a Notifier results in an immediate NOTIFY.
    this.notify(100);
  }

  notify(code, reason)
  {
    debug('notify()');

    if (this._active === false)
    {
      return;
    }

    reason = reason || JsSIP_C.REASON_PHRASE[code] || '';

    let state;

    if (code >= 200)
    {
      state = 'terminated;reason=noresource';
    }
    else
    {
      state = `active;expires=${this._expires}`;
    }

    // Put this in a try/catch block.
    this._session.sendRequest(JsSIP_C.NOTIFY, {
      extraHeaders : [
        `Event: ${C.event_type};id=${this._id}`,
        `Subscription-State: ${state}`,
        `Content-Type: ${C.body_type}`
      ],
      body          : `SIP/2.0 ${code} ${reason}`,
      eventHandlers : {
        // If a negative response is received, subscription is canceled.
        onErrorResponse() { this._active = false; }
      }
    });
  }
};


/***/ }),

/***/ "./sipLib/RTCSession/ReferSubscriber.js":
/*!**********************************************!*\
  !*** ./sipLib/RTCSession/ReferSubscriber.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
const JsSIP_C = __webpack_require__(/*! ../Constants */ "./sipLib/Constants.js");
const Grammar = __webpack_require__(/*! ../Grammar */ "./sipLib/Grammar.js");
const Utils = __webpack_require__(/*! ../Utils */ "./sipLib/Utils.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:RTCSession:ReferSubscriber');

module.exports = class ReferSubscriber extends EventEmitter
{
  constructor(session)
  {
    super();

    this._id = null;
    this._session = session;
  }

  get id()
  {
    return this._id;
  }

  sendRefer(target, options = {})
  {
    debug('sendRefer()');

    const extraHeaders = Utils.cloneArray(options.extraHeaders);
    const eventHandlers = options.eventHandlers || {};

    // Set event handlers.
    for (const event in eventHandlers)
    {
      if (Object.prototype.hasOwnProperty.call(eventHandlers, event))
      {
        this.on(event, eventHandlers[event]);
      }
    }

    // Replaces URI header field.
    let replaces = null;

    if (options.replaces)
    {
      replaces = options.replaces._request.call_id;
      replaces += `;to-tag=${options.replaces._to_tag}`;
      replaces += `;from-tag=${options.replaces._from_tag}`;

      replaces = encodeURIComponent(replaces);
    }

    // Refer-To header field.
    const referTo = `Refer-To: <${target}${replaces?`?Replaces=${replaces}`:''}>`;

    extraHeaders.push(referTo);

    extraHeaders.push(`Contact: ${this._session.contact}`);

    const request = this._session.sendRequest(JsSIP_C.REFER, {
      extraHeaders,
      eventHandlers : {
        onSuccessResponse : (response) =>
        {
          this._requestSucceeded(response);
        },
        onErrorResponse : (response) =>
        {
          this._requestFailed(response, JsSIP_C.causes.REJECTED);
        },
        onTransportError : () =>
        {
          this._requestFailed(null, JsSIP_C.causes.CONNECTION_ERROR);
        },
        onRequestTimeout : () =>
        {
          this._requestFailed(null, JsSIP_C.causes.REQUEST_TIMEOUT);
        },
        onDialogError : () =>
        {
          this._requestFailed(null, JsSIP_C.causes.DIALOG_ERROR);
        }
      }
    });

    this._id = request.cseq;
  }

  receiveNotify(request)
  {
    debug('receiveNotify()');

    if (!request.body)
    {
      return;
    }

    const status_line = Grammar.parse(request.body.trim(), 'Status_Line');

    if (status_line === -1)
    {
      debug(`receiveNotify() | error parsing NOTIFY body: "${request.body}"`);

      return;
    }

    switch (true)
    {
      case /^100$/.test(status_line.status_code):
        this.emit('trying', {
          request,
          status_line
        });
        break;

      case /^1[0-9]{2}$/.test(status_line.status_code):
        this.emit('progress', {
          request,
          status_line
        });
        break;

      case /^2[0-9]{2}$/.test(status_line.status_code):
        this.emit('accepted', {
          request,
          status_line
        });
        break;

      default:
        this.emit('failed', {
          request,
          status_line
        });
        break;
    }
  }

  _requestSucceeded(response)
  {
    debug('REFER succeeded');

    debug('emit "requestSucceeded"');

    this.emit('requestSucceeded', {
      response
    });
  }

  _requestFailed(response, cause)
  {
    debug('REFER failed');

    debug('emit "requestFailed"');

    this.emit('requestFailed', {
      response : response || null,
      cause
    });
  }
};


/***/ }),

/***/ "./sipLib/Registrator.js":
/*!*******************************!*\
  !*** ./sipLib/Registrator.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const SIPMessage = __webpack_require__(/*! ./SIPMessage */ "./sipLib/SIPMessage.js");
const RequestSender = __webpack_require__(/*! ./RequestSender */ "./sipLib/RequestSender.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:Registrator');

const MIN_REGISTER_EXPIRES = 10; // In seconds.

module.exports = class Registrator
{
  constructor(ua, transport)
  {
    const reg_id=1; // Force reg_id to 1.

    this._ua = ua;
    this._transport = transport;

    this._registrar = ua.configuration.registrar_server;
    this._expires = ua.configuration.register_expires;

    // Call-ID and CSeq values RFC3261 10.2.
    this._call_id = Utils.createRandomToken(22);
    this._cseq = 0;

    this._to_uri = ua.configuration.uri;

    this._registrationTimer = null;

    // Ongoing Register request.
    this._registering = false;

    // Set status.
    this._registered = false;

    // Contact header.
    this._contact = this._ua.contact.toString();

    // Sip.ice media feature tag (RFC 5768).
    this._contact += ';+sip.ice';

    // Custom headers for REGISTER and un-REGISTER.
    this._extraHeaders = [];

    // Custom Contact header params for REGISTER and un-REGISTER.
    this._extraContactParams = '';

    if (reg_id)
    {
      this._contact += `;reg-id=${reg_id}`;
      this._contact += `;+sip.instance="<urn:uuid:${this._ua.configuration.instance_id}>"`;
    }
  }

  get registered()
  {
    return this._registered;
  }

  setExtraHeaders(extraHeaders)
  {
    if (! Array.isArray(extraHeaders))
    {
      extraHeaders = [];
    }

    this._extraHeaders = extraHeaders.slice();
  }

  setExtraContactParams(extraContactParams)
  {
    if (! (extraContactParams instanceof Object))
    {
      extraContactParams = {};
    }

    // Reset it.
    this._extraContactParams = '';

    for (const param_key in extraContactParams)
    {
      if (Object.prototype.hasOwnProperty.call(extraContactParams, param_key))
      {
        const param_value = extraContactParams[param_key];

        this._extraContactParams += (`;${param_key}`);
        if (param_value)
        {
          this._extraContactParams += (`=${param_value}`);
        }
      }
    }
  }

  register()
  {
    if (this._registering)
    {
      debug('Register request in progress...');

      return;
    }

    const extraHeaders = this._extraHeaders.slice();

    extraHeaders.push(`Contact: \
${this._contact};expires=${this._expires}${this._extraContactParams}`);
    extraHeaders.push(`Expires: ${this._expires}`);

    const request = new SIPMessage.OutgoingRequest(
      JsSIP_C.REGISTER, this._registrar, this._ua, {
        'to_uri'  : this._to_uri,
        'call_id' : this._call_id,
        'cseq'    : (this._cseq += 1)
      }, extraHeaders);

    const request_sender = new RequestSender(this._ua, request, {
      onRequestTimeout : () =>
      {
        this._registrationFailure(null, JsSIP_C.causes.REQUEST_TIMEOUT);
      },
      onTransportError : () =>
      {
        this._registrationFailure(null, JsSIP_C.causes.CONNECTION_ERROR);
      },
      // Increase the CSeq on authentication.
      onAuthenticated : () =>
      {
        this._cseq += 1;
      },
      onReceiveResponse : (response) =>
      {
        let contact;
        let expires;
        let numContacts = response.getHeaders('contact').length;

        // Discard responses to older REGISTER/un-REGISTER requests.
        if (response.cseq !== this._cseq)
        {
          return;
        }

        // Clear registration timer.
        if (this._registrationTimer !== null)
        {
          clearTimeout(this._registrationTimer);
          this._registrationTimer = null;
        }

        switch (true)
        {
          case /^1[0-9]{2}$/.test(response.status_code):
            // Ignore provisional responses.
            break;
          case /^2[0-9]{2}$/.test(response.status_code):
            this._registering = false;

            // Search the Contact pointing to us and update the expires value accordingly.
            if (!numContacts)
            {
              debug('no Contact header in response to REGISTER, response ignored');
              break;
            }

            while (numContacts--)
            {
              contact = response.parseHeader('contact', numContacts);

              if (contact.uri.user === this._ua.contact.uri.user)
              {
                expires = contact.getParam('expires');
                break;
              }
              else
              {
                contact = null;
              }
            }

            if (!contact)
            {
              debug('no Contact header pointing to us, response ignored');
              break;
            }

            if (!expires && response.hasHeader('expires'))
            {
              expires = response.getHeader('expires');
            }

            if (!expires)
            {
              expires = this._expires;
            }

            expires = Number(expires);

            if (expires < MIN_REGISTER_EXPIRES)
              expires = MIN_REGISTER_EXPIRES;

            // Re-Register or emit an event before the expiration interval has elapsed.
            // For that, decrease the expires value. ie: 3 seconds.
            this._registrationTimer = setTimeout(() =>
            {
              this._registrationTimer = null;
              // If there are no listeners for registrationExpiring, renew registration.
              // If there are listeners, let the function listening do the register call.
              if (this._ua.listeners('registrationExpiring').length === 0)
              {
                this.register();
              }
              else
              {
                this._ua.emit('registrationExpiring');
              }
            }, (expires * 1000) - 5000);

            // Save gruu values.
            if (contact.hasParam('temp-gruu'))
            {
              this._ua.contact.temp_gruu = contact.getParam('temp-gruu').replace(/"/g, '');
            }
            if (contact.hasParam('pub-gruu'))
            {
              this._ua.contact.pub_gruu = contact.getParam('pub-gruu').replace(/"/g, '');
            }

            if (! this._registered)
            {
              this._registered = true;
              this._ua.registered({
                response
              });
            }
            break;
          // Interval too brief RFC3261 10.2.8.
          case /^423$/.test(response.status_code):
            if (response.hasHeader('min-expires'))
            {
              // Increase our registration interval to the suggested minimum.
              this._expires = Number(response.getHeader('min-expires'));

              if (this._expires < MIN_REGISTER_EXPIRES)
                this._expires = MIN_REGISTER_EXPIRES;

              // Attempt the registration again immediately.
              this.register();
            }
            else
            { // This response MUST contain a Min-Expires header field
              debug('423 response received for REGISTER without Min-Expires');
              this._registrationFailure(response, JsSIP_C.causes.SIP_FAILURE_CODE);
            }
            break;
          default:
          {
            const cause = Utils.sipErrorCause(response.status_code);

            this._registrationFailure(response, cause);
          }
        }
      }
    });

    this._registering = true;
    request_sender.send();
  }

  unregister(options = {})
  {
    if (!this._registered)
    {
      debug('already unregistered');

      return;
    }

    this._registered = false;

    // Clear the registration timer.
    if (this._registrationTimer !== null)
    {
      clearTimeout(this._registrationTimer);
      this._registrationTimer = null;
    }

    const extraHeaders = this._extraHeaders.slice();

    if (options.all)
    {
      extraHeaders.push(`Contact: *${this._extraContactParams}`);
    }
    else
    {
      extraHeaders.push(`Contact: ${this._contact};expires=0${this._extraContactParams}`);
    }

    extraHeaders.push('Expires: 0');

    const request = new SIPMessage.OutgoingRequest(
      JsSIP_C.REGISTER, this._registrar, this._ua, {
        'to_uri'  : this._to_uri,
        'call_id' : this._call_id,
        'cseq'    : (this._cseq += 1)
      }, extraHeaders);

    const request_sender = new RequestSender(this._ua, request, {
      onRequestTimeout : () =>
      {
        this._unregistered(null, JsSIP_C.causes.REQUEST_TIMEOUT);
      },
      onTransportError : () =>
      {
        this._unregistered(null, JsSIP_C.causes.CONNECTION_ERROR);
      },
      // Increase the CSeq on authentication.
      onAuthenticated : () =>
      {
        this._cseq += 1;
      },
      onReceiveResponse : (response) =>
      {
        switch (true)
        {
          case /^1[0-9]{2}$/.test(response.status_code):
            // Ignore provisional responses.
            break;
          case /^2[0-9]{2}$/.test(response.status_code):
            this._unregistered(response);
            break;
          default:
          {
            const cause = Utils.sipErrorCause(response.status_code);

            this._unregistered(response, cause);
          }
        }
      }
    });

    request_sender.send();
  }

  close()
  {
    if (this._registered)
    {
      this.unregister();
    }
  }


  onTransportClosed()
  {
    this._registering = false;
    if (this._registrationTimer !== null)
    {
      clearTimeout(this._registrationTimer);
      this._registrationTimer = null;
    }

    if (this._registered)
    {
      this._registered = false;
      this._ua.unregistered({});
    }
  }

  _registrationFailure(response, cause)
  {
    this._registering = false;
    this._ua.registrationFailed({
      response : response || null,
      cause
    });

    if (this._registered)
    {
      this._registered = false;
      this._ua.unregistered({
        response : response || null,
        cause
      });
    }
  }

  _unregistered(response, cause)
  {
    this._registering = false;
    this._registered = false;
    this._ua.unregistered({
      response : response || null,
      cause    : cause || null
    });
  }
};


/***/ }),

/***/ "./sipLib/RequestSender.js":
/*!*********************************!*\
  !*** ./sipLib/RequestSender.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const DigestAuthentication = __webpack_require__(/*! ./DigestAuthentication */ "./sipLib/DigestAuthentication.js");
const Transactions = __webpack_require__(/*! ./Transactions */ "./sipLib/Transactions.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:RequestSender');

// Default event handlers.
const EventHandlers = {
  onRequestTimeout  : () => {},
  onTransportError  : () => {},
  onReceiveResponse : () => {},
  onAuthenticated   : () => {}
};

module.exports = class RequestSender
{
  constructor(ua, request, eventHandlers)
  {
    this._ua = ua;
    this._eventHandlers = eventHandlers;
    this._method = request.method;
    this._request = request;
    this._auth = null;
    this._challenged = false;
    this._staled = false;

    // Define the undefined handlers.
    for (const handler in EventHandlers)
    {
      if (Object.prototype.hasOwnProperty.call(EventHandlers, handler))
      {
        if (!this._eventHandlers[handler])
        {
          this._eventHandlers[handler] = EventHandlers[handler];
        }
      }
    }

    // If ua is in closing process or even closed just allow sending Bye and ACK.
    if (ua.status === ua.C.STATUS_USER_CLOSED &&
        (this._method !== JsSIP_C.BYE || this._method !== JsSIP_C.ACK))
    {
      this._eventHandlers.onTransportError();
    }
  }

  /**
  * Create the client transaction and send the message.
  */
  send()
  {
    const eventHandlers = {
      onRequestTimeout  : () => { this._eventHandlers.onRequestTimeout(); },
      onTransportError  : () => { this._eventHandlers.onTransportError(); },
      onReceiveResponse : (response) => { this._receiveResponse(response); }
    };

    switch (this._method)
    {
      case 'INVITE':
        this.clientTransaction = new Transactions.InviteClientTransaction(
          this._ua, this._ua.transport, this._request, eventHandlers);
        break;
      case 'ACK':
        this.clientTransaction = new Transactions.AckClientTransaction(
          this._ua, this._ua.transport, this._request, eventHandlers);
        break;
      default:
        this.clientTransaction = new Transactions.NonInviteClientTransaction(
          this._ua, this._ua.transport, this._request, eventHandlers);
    }

    this.clientTransaction.send();
  }

  /**
  * Called from client transaction when receiving a correct response to the request.
  * Authenticate request if needed or pass the response back to the applicant.
  */
  _receiveResponse(response)
  {
    let challenge;
    let authorization_header_name;
    const status_code = response.status_code;

    /*
    * Authentication
    * Authenticate once. _challenged_ flag used to avoid infinite authentications.
    */
    if ((status_code === 401 || status_code === 407) &&
        (this._ua.configuration.password !== null || this._ua.configuration.ha1 !== null))
    {

      // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.
      if (response.status_code === 401)
      {
        challenge = response.parseHeader('www-authenticate');
        authorization_header_name = 'authorization';
      }
      else
      {
        challenge = response.parseHeader('proxy-authenticate');
        authorization_header_name = 'proxy-authorization';
      }

      // Verify it seems a valid challenge.
      if (!challenge)
      {
        debug(`${response.status_code} with wrong or missing challenge, cannot authenticate`);
        this._eventHandlers.onReceiveResponse(response);

        return;
      }

      if (!this._challenged || (!this._staled && challenge.stale === true))
      {
        if (!this._auth)
        {
          this._auth = new DigestAuthentication({
            username : this._ua.configuration.authorization_user,
            password : this._ua.configuration.password,
            realm    : this._ua.configuration.realm,
            ha1      : this._ua.configuration.ha1
          });
        }

        // Verify that the challenge is really valid.
        if (!this._auth.authenticate(this._request, challenge))
        {
          this._eventHandlers.onReceiveResponse(response);

          return;
        }
        this._challenged = true;

        // Update ha1 and realm in the UA.
        this._ua.set('realm', this._auth.get('realm'));
        this._ua.set('ha1', this._auth.get('ha1'));

        if (challenge.stale)
        {
          this._staled = true;
        }

        this._request = this._request.clone();
        this._request.cseq += 1;
        this._request.setHeader('cseq', `${this._request.cseq} ${this._method}`);
        this._request.setHeader(authorization_header_name, this._auth.toString());

        this._eventHandlers.onAuthenticated(this._request);
        this.send();
      }
      else
      {
        this._eventHandlers.onReceiveResponse(response);
      }
    }
    else
    {
      this._eventHandlers.onReceiveResponse(response);
    }
  }
};


/***/ }),

/***/ "./sipLib/SIPMessage.js":
/*!******************************!*\
  !*** ./sipLib/SIPMessage.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const sdp_transform = __webpack_require__(/*! sdp-transform */ "./node_modules/sdp-transform/lib/index.js");
const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const NameAddrHeader = __webpack_require__(/*! ./NameAddrHeader */ "./sipLib/NameAddrHeader.js");
const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:SIPMessage');

/**
 * -param {String} method request method
 * -param {String} ruri request uri
 * -param {UA} ua
 * -param {Object} params parameters that will have priority over ua.configuration parameters:
 * <br>
 *  - cseq, call_id, from_tag, from_uri, from_display_name, to_uri, to_tag, route_set
 * -param {Object} [headers] extra headers
 * -param {String} [body]
 */
class OutgoingRequest
{
  constructor(method, ruri, ua, params, extraHeaders, body)
  {
    // Mandatory parameters check.
    if (!method || !ruri || !ua)
    {
      return null;
    }

    params = params || {};

    this.ua = ua;
    this.headers = {};
    this.method = method;
    this.ruri = ruri;
    this.body = body;
    this.extraHeaders = Utils.cloneArray(extraHeaders);

    // Fill the Common SIP Request Headers.

    // Route.
    if (params.route_set)
    {
      this.setHeader('route', params.route_set);
    }
    else if (ua.configuration.use_preloaded_route)
    {
      this.setHeader('route', `<${ua.transport.sip_uri};lr>`);
    }

    // Via.
    // Empty Via header. Will be filled by the client transaction.
    this.setHeader('via', '');

    // Max-Forwards.
    this.setHeader('max-forwards', JsSIP_C.MAX_FORWARDS);

    // To
    let to = (params.to_display_name || params.to_display_name === 0) ? `"${params.to_display_name}" ` : '';

    to += `<${params.to_uri || ruri}>`;
    to += params.to_tag ? `;tag=${params.to_tag}` : '';
    this.to = NameAddrHeader.parse(to);
    this.setHeader('to', to);

    // From.
    let from;

    if (params.from_display_name || params.from_display_name === 0)
    {
      from = `"${params.from_display_name}" `;
    }
    else if (ua.configuration.display_name)
    {
      from = `"${ua.configuration.display_name}" `;
    }
    else
    {
      from = '';
    }
    from += `<${params.from_uri || ua.configuration.uri}>;tag=`;
    from += params.from_tag || Utils.newTag();
    this.from = NameAddrHeader.parse(from);
    this.setHeader('from', from);

    // Call-ID.
    const call_id = params.call_id ||
      (ua.configuration.plivosip_id + Utils.createRandomToken(15));

    this.call_id = call_id;
    this.setHeader('call-id', call_id);

    // CSeq.
    const cseq = params.cseq || Math.floor(Math.random() * 10000);

    this.cseq = cseq;
    this.setHeader('cseq', `${cseq} ${method}`);
  }

  /**
   * Replace the the given header by the given value.
   * -param {String} name header name
   * -param {String | Array} value header value
   */
  setHeader(name, value)
  {
    // Remove the header from extraHeaders if present.
    const regexp = new RegExp(`^\\s*${name}\\s*:`, 'i');

    for (let idx=0; idx<this.extraHeaders.length; idx++)
    {
      if (regexp.test(this.extraHeaders[idx]))
      {
        this.extraHeaders.splice(idx, 1);
      }
    }

    this.headers[Utils.headerize(name)] = (Array.isArray(value)) ? value : [ value ];
  }

  /**
   * Get the value of the given header name at the given position.
   * -param {String} name header name
   * -returns {String|undefined} Returns the specified header, null if header doesn't exist.
   */
  getHeader(name)
  {
    const headers = this.headers[Utils.headerize(name)];

    if (headers)
    {
      if (headers[0])
      {
        return headers[0];
      }
    }
    else
    {
      const regexp = new RegExp(`^\\s*${name}\\s*:`, 'i');

      for (const header of this.extraHeaders)
      {
        if (regexp.test(header))
        {
          return header.substring(header.indexOf(':')+1).trim();
        }
      }
    }

    return;
  }

  /**
   * Get the header/s of the given name.
   * -param {String} name header name
   * -returns {Array} Array with all the headers of the specified name.
   */
  getHeaders(name)
  {
    const headers = this.headers[Utils.headerize(name)];
    const result = [];

    if (headers)
    {
      for (const header of headers)
      {
        result.push(header);
      }

      return result;
    }
    else
    {
      const regexp = new RegExp(`^\\s*${name}\\s*:`, 'i');

      for (const header of this.extraHeaders)
      {
        if (regexp.test(header))
        {
          result.push(header.substring(header.indexOf(':')+1).trim());
        }
      }

      return result;
    }
  }

  /**
   * Verify the existence of the given header.
   * -param {String} name header name
   * -returns {boolean} true if header with given name exists, false otherwise
   */
  hasHeader(name)
  {
    if (this.headers[Utils.headerize(name)])
    {
      return true;
    }
    else
    {
      const regexp = new RegExp(`^\\s*${name}\\s*:`, 'i');

      for (const header of this.extraHeaders)
      {
        if (regexp.test(header))
        {
          return true;
        }
      }
    }

    return false;
  }

  /**
   * Parse the current body as a SDP and store the resulting object
   * into this.sdp.
   * -param {Boolean} force: Parse even if this.sdp already exists.
   *
   * Returns this.sdp.
   */
  parseSDP(force)
  {
    if (!force && this.sdp)
    {
      return this.sdp;
    }
    else
    {
      this.sdp = sdp_transform.parse(this.body || '');

      return this.sdp;
    }
  }

  toString()
  {
    let msg = `${this.method} ${this.ruri} SIP/2.0\r\n`;

    for (const headerName in this.headers)
    {
      if (Object.prototype.hasOwnProperty.call(this.headers, headerName))
      {
        for (const headerValue of this.headers[headerName])
        {
          msg += `${headerName}: ${headerValue}\r\n`;
        }
      }
    }

    for (const header of this.extraHeaders)
    {
      msg += `${header.trim()}\r\n`;
    }

    // Supported.
    const supported = [];

    switch (this.method)
    {
      case JsSIP_C.REGISTER:
        supported.push('path', 'gruu');
        break;
      case JsSIP_C.INVITE:
        if (this.ua.configuration.session_timers)
        {
          supported.push('timer');
        }
        if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)
        {
          supported.push('gruu');
        }
        supported.push('ice', 'replaces');
        break;
      case JsSIP_C.UPDATE:
        if (this.ua.configuration.session_timers)
        {
          supported.push('timer');
        }
        supported.push('ice');
        break;
    }

    supported.push('outbound');

    const userAgent = this.ua.configuration.user_agent || JsSIP_C.USER_AGENT;

    // Allow.
    msg += `Allow: ${JsSIP_C.ALLOWED_METHODS}\r\n`;
    msg += `Supported: ${supported}\r\n`;
    msg += `User-Agent: ${userAgent}\r\n`;

    if (this.body)
    {
      const length = Utils.str_utf8_length(this.body);

      msg += `Content-Length: ${length}\r\n\r\n`;
      msg += this.body;
    }
    else
    {
      msg += 'Content-Length: 0\r\n\r\n';
    }

    return msg;
  }

  clone()
  {
    const request = new OutgoingRequest(this.method, this.ruri, this.ua);

    Object.keys(this.headers).forEach(function(name)
    {
      request.headers[name] = this.headers[name].slice();
    }, this);

    request.body = this.body;
    request.extraHeaders = Utils.cloneArray(this.extraHeaders);
    request.to = this.to;
    request.from = this.from;
    request.call_id = this.call_id;
    request.cseq = this.cseq;

    return request;
  }
}

class InitialOutgoingInviteRequest extends OutgoingRequest
{
  constructor(ruri, ua, params, extraHeaders, body)
  {
    super(JsSIP_C.INVITE, ruri, ua, params, extraHeaders, body);

    this.transaction = null;
  }

  cancel(reason)
  {
    this.transaction.cancel(reason);
  }

  clone()
  {
    const request = new InitialOutgoingInviteRequest(this.ruri, this.ua);

    Object.keys(this.headers).forEach(function(name)
    {
      request.headers[name] = this.headers[name].slice();
    }, this);

    request.body = this.body;
    request.extraHeaders = Utils.cloneArray(this.extraHeaders);
    request.to = this.to;
    request.from = this.from;
    request.call_id = this.call_id;
    request.cseq = this.cseq;

    request.transaction = this.transaction;

    return request;
  }
}

class IncomingMessage
{
  constructor()
  {
    this.data = null;
    this.headers = null;
    this.method = null;
    this.via = null;
    this.via_branch = null;
    this.call_id = null;
    this.cseq = null;
    this.from = null;
    this.from_tag = null;
    this.to = null;
    this.to_tag = null;
    this.body = null;
    this.sdp = null;
  }

  /**
  * Insert a header of the given name and value into the last position of the
  * header array.
  */
  addHeader(name, value)
  {
    const header = { raw: value };

    name = Utils.headerize(name);

    if (this.headers[name])
    {
      this.headers[name].push(header);
    }
    else
    {
      this.headers[name] = [ header ];
    }
  }

  /**
   * Get the value of the given header name at the given position.
   */
  getHeader(name)
  {
    const header = this.headers[Utils.headerize(name)];

    if (header)
    {
      if (header[0])
      {
        return header[0].raw;
      }
    }
    else
    {
      return;
    }
  }

  /**
   * Get the header/s of the given name.
   */
  getHeaders(name)
  {
    const headers = this.headers[Utils.headerize(name)];
    const result = [];

    if (!headers)
    {
      return [];
    }

    for (const header of headers)
    {
      result.push(header.raw);
    }

    return result;
  }

  /**
   * Verify the existence of the given header.
   */
  hasHeader(name)
  {
    return (this.headers[Utils.headerize(name)]) ? true : false;
  }

  /**
  * Parse the given header on the given index.
  * -param {String} name header name
  * -param {Number} [idx=0] header index
  * -returns {Object|undefined} Parsed header object, undefined if the header
  *  is not present or in case of a parsing error.
  */
  parseHeader(name, idx = 0)
  {
    name = Utils.headerize(name);

    if (!this.headers[name])
    {
      debug(`header "${name}" not present`);

      return;
    }
    else if (idx >= this.headers[name].length)
    {
      debug(`not so many "${name}" headers present`);

      return;
    }

    const header = this.headers[name][idx];
    const value = header.raw;

    if (header.parsed)
    {
      return header.parsed;
    }

    // Substitute '-' by '_' for grammar rule matching.
    const parsed = Grammar.parse(value, name.replace(/-/g, '_'));

    if (parsed === -1)
    {
      this.headers[name].splice(idx, 1); // delete from headers
      debug(`error parsing "${name}" header field with value "${value}"`);

      return;
    }
    else
    {
      header.parsed = parsed;

      return parsed;
    }
  }

  /**
   * Message Header attribute selector. Alias of parseHeader.
   * -param {String} name header name
   * -param {Number} [idx=0] header index
   * -returns {Object|undefined} Parsed header object, undefined if the header
   *  is not present or in case of a parsing error.
   *
   * -example
   * message.s('via',3).port
   */
  s(name, idx)
  {
    return this.parseHeader(name, idx);
  }

  /**
  * Replace the value of the given header by the value.
  * -param {String} name header name
  * -param {String} value header value
  */
  setHeader(name, value)
  {
    const header = { raw: value };

    this.headers[Utils.headerize(name)] = [ header ];
  }

  /**
   * Parse the current body as a SDP and store the resulting object
   * into this.sdp.
   * -param {Boolean} force: Parse even if this.sdp already exists.
   *
   * Returns this.sdp.
   */
  parseSDP(force)
  {
    if (!force && this.sdp)
    {
      return this.sdp;
    }
    else
    {
      this.sdp = sdp_transform.parse(this.body || '');

      return this.sdp;
    }
  }

  toString()
  {
    return this.data;
  }
}

class IncomingRequest extends IncomingMessage
{
  constructor(ua)
  {
    super();

    this.ua = ua;
    this.headers = {};
    this.ruri = null;
    this.transport = null;
    this.server_transaction = null;
  }

  /**
  * Stateful reply.
  * -param {Number} code status code
  * -param {String} reason reason phrase
  * -param {Object} headers extra headers
  * -param {String} body body
  * -param {Function} [onSuccess] onSuccess callback
  * -param {Function} [onFailure] onFailure callback
  */
  reply(code, reason, extraHeaders, body, onSuccess, onFailure)
  {
    const supported = [];
    let to = this.getHeader('To');

    code = code || null;
    reason = reason || null;

    // Validate code and reason values.
    if (!code || (code < 100 || code > 699))
    {
      throw new TypeError(`Invalid status_code: ${code}`);
    }
    else if (reason && typeof reason !== 'string' && !(reason instanceof String))
    {
      throw new TypeError(`Invalid reason_phrase: ${reason}`);
    }

    reason = reason || JsSIP_C.REASON_PHRASE[code] || '';
    extraHeaders = Utils.cloneArray(extraHeaders);

    let response = `SIP/2.0 ${code} ${reason}\r\n`;

    if (this.method === JsSIP_C.INVITE && code > 100 && code <= 200)
    {
      const headers = this.getHeaders('record-route');

      for (const header of headers)
      {
        response += `Record-Route: ${header}\r\n`;
      }
    }

    const vias = this.getHeaders('via');

    for (const via of vias)
    {
      response += `Via: ${via}\r\n`;
    }

    if (!this.to_tag && code > 100)
    {
      to += `;tag=${Utils.newTag()}`;
    }
    else if (this.to_tag && !this.s('to').hasParam('tag'))
    {
      to += `;tag=${this.to_tag}`;
    }

    response += `To: ${to}\r\n`;
    response += `From: ${this.getHeader('From')}\r\n`;
    response += `Call-ID: ${this.call_id}\r\n`;
    response += `CSeq: ${this.cseq} ${this.method}\r\n`;

    for (const header of extraHeaders)
    {
      response += `${header.trim()}\r\n`;
    }

    // Supported.
    switch (this.method)
    {
      case JsSIP_C.INVITE:
        if (this.ua.configuration.session_timers)
        {
          supported.push('timer');
        }
        if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)
        {
          supported.push('gruu');
        }
        supported.push('ice', 'replaces');
        break;
      case JsSIP_C.UPDATE:
        if (this.ua.configuration.session_timers)
        {
          supported.push('timer');
        }
        if (body)
        {
          supported.push('ice');
        }
        supported.push('replaces');
    }

    supported.push('outbound');

    // Allow and Accept.
    if (this.method === JsSIP_C.OPTIONS)
    {
      response += `Allow: ${JsSIP_C.ALLOWED_METHODS}\r\n`;
      response += `Accept: ${JsSIP_C.ACCEPTED_BODY_TYPES}\r\n`;
    }
    else if (code === 405)
    {
      response += `Allow: ${JsSIP_C.ALLOWED_METHODS}\r\n`;
    }
    else if (code === 415)
    {
      response += `Accept: ${JsSIP_C.ACCEPTED_BODY_TYPES}\r\n`;
    }

    response += `Supported: ${supported}\r\n`;

    if (body)
    {
      const length = Utils.str_utf8_length(body);

      response += 'Content-Type: application/sdp\r\n';
      response += `Content-Length: ${length}\r\n\r\n`;
      response += body;
    }
    else
    {
      response += `Content-Length: ${0}\r\n\r\n`;
    }

    this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);
  }

  /**
  * Stateless reply.
  * -param {Number} code status code
  * -param {String} reason reason phrase
  */
  reply_sl(code = null, reason = null)
  {
    const vias = this.getHeaders('via');

    // Validate code and reason values.
    if (!code || (code < 100 || code > 699))
    {
      throw new TypeError(`Invalid status_code: ${code}`);
    }
    else if (reason && typeof reason !== 'string' && !(reason instanceof String))
    {
      throw new TypeError(`Invalid reason_phrase: ${reason}`);
    }

    reason = reason || JsSIP_C.REASON_PHRASE[code] || '';

    let response = `SIP/2.0 ${code} ${reason}\r\n`;

    for (const via of vias)
    {
      response += `Via: ${via}\r\n`;
    }

    let to = this.getHeader('To');

    if (!this.to_tag && code > 100)
    {
      to += `;tag=${Utils.newTag()}`;
    }
    else if (this.to_tag && !this.s('to').hasParam('tag'))
    {
      to += `;tag=${this.to_tag}`;
    }

    response += `To: ${to}\r\n`;
    response += `From: ${this.getHeader('From')}\r\n`;
    response += `Call-ID: ${this.call_id}\r\n`;
    response += `CSeq: ${this.cseq} ${this.method}\r\n`;
    response += `Content-Length: ${0}\r\n\r\n`;

    this.transport.send(response);
  }
}

class IncomingResponse extends IncomingMessage
{
  constructor()
  {
    super();

    this.headers = {};
    this.status_code = null;
    this.reason_phrase = null;
  }
}

module.exports = {
  OutgoingRequest,
  InitialOutgoingInviteRequest,
  IncomingRequest,
  IncomingResponse
};



/***/ }),

/***/ "./sipLib/Socket.js":
/*!**************************!*\
  !*** ./sipLib/Socket.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:Socket');

debugerror.log = console.warn.bind(console);

/**
 * Interface documentation: http://jssip.net/documentation/$last_version/api/socket/
 *
 * interface Socket {
 *  attribute String via_transport
 *  attribute String url
 *  attribute String sip_uri
 *
 *  method connect();
 *  method disconnect();
 *  method send(data);
 *
 *  attribute EventHandler onconnect
 *  attribute EventHandler ondisconnect
 *  attribute EventHandler ondata
 * }
 *
 */

exports.isSocket = (socket) =>
{
  // Ignore if an array is given.
  if (Array.isArray(socket))
  {
    return false;
  }

  if (typeof socket === 'undefined')
  {
    debugerror('undefined JsSIP.Socket instance');

    return false;
  }

  // Check Properties.
  try
  {
    if (!Utils.isString(socket.url))
    {
      debugerror('missing or invalid JsSIP.Socket url property');
      throw new Error();
    }

    if (!Utils.isString(socket.via_transport))
    {
      debugerror('missing or invalid JsSIP.Socket via_transport property');
      throw new Error();
    }

    if (Grammar.parse(socket.sip_uri, 'SIP_URI') === -1)
    {
      debugerror('missing or invalid JsSIP.Socket sip_uri property');
      throw new Error();
    }
  }
  catch (e)
  {
    return false;
  }

  // Check Methods.
  try
  {
    [ 'connect', 'disconnect', 'send' ].forEach((method) =>
    {
      if (!Utils.isFunction(socket[method]))
      {
        debugerror(`missing or invalid JsSIP.Socket method: ${method}`);
        throw new Error();
      }
    });
  }
  catch (e)
  {
    return false;
  }

  return true;
};


/***/ }),

/***/ "./sipLib/Timers.js":
/*!**************************!*\
  !*** ./sipLib/Timers.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

var T1 = 500,
  T2 = 4000,
  T4 = 5000;


var Timers = {
  T1: T1,
  T2: T2,
  T4: T4,
  TIMER_B: 64 * T1,
  TIMER_D: 0  * T1,
  TIMER_F: 64 * T1,
  TIMER_H: 64 * T1,
  TIMER_I: 0  * T1,
  TIMER_J: 0  * T1,
  TIMER_K: 0  * T4,
  TIMER_L: 64 * T1,
  TIMER_M: 64 * T1,
  PROVISIONAL_RESPONSE_INTERVAL: 60000  // See RFC 3261 Section 13.3.1.1
};


module.exports = Timers;


/***/ }),

/***/ "./sipLib/Transactions.js":
/*!********************************!*\
  !*** ./sipLib/Transactions.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const SIPMessage = __webpack_require__(/*! ./SIPMessage */ "./sipLib/SIPMessage.js");
const Timers = __webpack_require__(/*! ./Timers */ "./sipLib/Timers.js");
const debugnict = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:NonInviteClientTransaction');
const debugict = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:InviteClientTransaction');
const debugact = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:AckClientTransaction');
const debugnist = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:NonInviteServerTransaction');
const debugist = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:InviteServerTransaction');

const C = {
  // Transaction states.
  STATUS_TRYING     : 1,
  STATUS_PROCEEDING : 2,
  STATUS_CALLING    : 3,
  STATUS_ACCEPTED   : 4,
  STATUS_COMPLETED  : 5,
  STATUS_TERMINATED : 6,
  STATUS_CONFIRMED  : 7,

  // Transaction types.
  NON_INVITE_CLIENT : 'nict',
  NON_INVITE_SERVER : 'nist',
  INVITE_CLIENT     : 'ict',
  INVITE_SERVER     : 'ist'
};

class NonInviteClientTransaction extends EventEmitter
{
  constructor(ua, transport, request, eventHandlers)
  {
    super();

    this.type = C.NON_INVITE_CLIENT;
    this.id = `z9hG4bK${Math.floor(Math.random() * 10000000)}`;
    this.ua = ua;
    this.transport = transport;
    this.request = request;
    this.eventHandlers = eventHandlers;

    let via = `SIP/2.0/${transport.via_transport}`;

    via += ` ${ua.configuration.via_host};branch=${this.id}`;

    this.request.setHeader('via', via);

    this.ua.newTransaction(this);
  }

  get C()
  {
    return C;
  }

  stateChanged(state)
  {
    this.state = state;
    this.emit('stateChanged');
  }

  send()
  {
    this.stateChanged(C.STATUS_TRYING);
    this.F = setTimeout(() => { this.timer_F(); }, Timers.TIMER_F);

    if (!this.transport.send(this.request))
    {
      this.onTransportError();
    }
  }

  onTransportError()
  {
    debugnict(`transport error occurred, deleting transaction ${this.id}`);
    clearTimeout(this.F);
    clearTimeout(this.K);
    this.stateChanged(C.STATUS_TERMINATED);
    this.ua.destroyTransaction(this);
    this.eventHandlers.onTransportError();
  }

  timer_F()
  {
    debugnict(`Timer F expired for transaction ${this.id}`);
    this.stateChanged(C.STATUS_TERMINATED);
    this.ua.destroyTransaction(this);
    this.eventHandlers.onRequestTimeout();
  }

  timer_K()
  {
    this.stateChanged(C.STATUS_TERMINATED);
    this.ua.destroyTransaction(this);
  }

  receiveResponse(response)
  {
    const status_code = response.status_code;

    if (status_code < 200)
    {
      switch (this.state)
      {
        case C.STATUS_TRYING:
        case C.STATUS_PROCEEDING:
          this.stateChanged(C.STATUS_PROCEEDING);
          this.eventHandlers.onReceiveResponse(response);
          break;
      }
    }
    else
    {
      switch (this.state)
      {
        case C.STATUS_TRYING:
        case C.STATUS_PROCEEDING:
          this.stateChanged(C.STATUS_COMPLETED);
          clearTimeout(this.F);

          if (status_code === 408)
          {
            this.eventHandlers.onRequestTimeout();
          }
          else
          {
            this.eventHandlers.onReceiveResponse(response);
          }

          this.K = setTimeout(() => { this.timer_K(); }, Timers.TIMER_K);
          break;
        case C.STATUS_COMPLETED:
          break;
      }
    }
  }
}

class InviteClientTransaction extends EventEmitter
{
  constructor(ua, transport, request, eventHandlers)
  {
    super();

    this.type = C.INVITE_CLIENT;
    this.id = `z9hG4bK${Math.floor(Math.random() * 10000000)}`;
    this.ua = ua;
    this.transport = transport;
    this.request = request;
    this.eventHandlers = eventHandlers;
    request.transaction = this;

    let via = `SIP/2.0/${transport.via_transport}`;

    via += ` ${ua.configuration.via_host};branch=${this.id}`;

    this.request.setHeader('via', via);

    this.ua.newTransaction(this);
  }

  get C()
  {
    return C;
  }

  stateChanged(state)
  {
    this.state = state;
    this.emit('stateChanged');
  }

  send()
  {
    this.stateChanged(C.STATUS_CALLING);
    this.B = setTimeout(() =>
    {
      this.timer_B();
    }, Timers.TIMER_B);

    if (!this.transport.send(this.request))
    {
      this.onTransportError();
    }
  }

  onTransportError()
  {
    clearTimeout(this.B);
    clearTimeout(this.D);
    clearTimeout(this.M);

    if (this.state !== C.STATUS_ACCEPTED)
    {
      debugict(`transport error occurred, deleting transaction ${this.id}`);
      this.eventHandlers.onTransportError();
    }

    this.stateChanged(C.STATUS_TERMINATED);
    this.ua.destroyTransaction(this);
  }

  // RFC 6026 7.2.
  timer_M()
  {
    debugict(`Timer M expired for transaction ${this.id}`);

    if (this.state === C.STATUS_ACCEPTED)
    {
      clearTimeout(this.B);
      this.stateChanged(C.STATUS_TERMINATED);
      this.ua.destroyTransaction(this);
    }
  }

  // RFC 3261 17.1.1.
  timer_B()
  {
    debugict(`Timer B expired for transaction ${this.id}`);
    if (this.state === C.STATUS_CALLING)
    {
      this.stateChanged(C.STATUS_TERMINATED);
      this.ua.destroyTransaction(this);
      this.eventHandlers.onRequestTimeout();
    }
  }

  timer_D()
  {
    debugict(`Timer D expired for transaction ${this.id}`);
    clearTimeout(this.B);
    this.stateChanged(C.STATUS_TERMINATED);
    this.ua.destroyTransaction(this);
  }

  sendACK(response)
  {
    const ack = new SIPMessage.OutgoingRequest(JsSIP_C.ACK, this.request.ruri,
      this.ua, {
        'route_set' : this.request.getHeader('route'),
        'call_id'   : this.request.getHeader('call-id'),
        'cseq'      : this.request.cseq
      });

    ack.setHeader('from', this.request.getHeader('from'));
    ack.setHeader('via', this.request.getHeader('via'));
    ack.setHeader('to', response.getHeader('to'));

    this.D = setTimeout(() => { this.timer_D(); }, Timers.TIMER_D);

    this.transport.send(ack);
  }

  cancel(reason)
  {
    // Send only if a provisional response (>100) has been received.
    if (this.state !== C.STATUS_PROCEEDING)
    {
      return;
    }

    const cancel = new SIPMessage.OutgoingRequest(JsSIP_C.CANCEL, this.request.ruri,
      this.ua, {
        'route_set' : this.request.getHeader('route'),
        'call_id'   : this.request.getHeader('call-id'),
        'cseq'      : this.request.cseq
      });

    cancel.setHeader('from', this.request.getHeader('from'));
    cancel.setHeader('via', this.request.getHeader('via'));
    cancel.setHeader('to', this.request.getHeader('to'));

    if (reason)
    {
      cancel.setHeader('reason', reason);
    }

    this.transport.send(cancel);
  }

  receiveResponse(response)
  {
    const status_code = response.status_code;

    if (status_code >= 100 && status_code <= 199)
    {
      switch (this.state)
      {
        case C.STATUS_CALLING:
          this.stateChanged(C.STATUS_PROCEEDING);
          this.eventHandlers.onReceiveResponse(response);
          break;
        case C.STATUS_PROCEEDING:
          this.eventHandlers.onReceiveResponse(response);
          break;
      }
    }
    else if (status_code >= 200 && status_code <= 299)
    {
      switch (this.state)
      {
        case C.STATUS_CALLING:
        case C.STATUS_PROCEEDING:
          this.stateChanged(C.STATUS_ACCEPTED);
          this.M = setTimeout(() =>
          {
            this.timer_M();
          }, Timers.TIMER_M);
          this.eventHandlers.onReceiveResponse(response);
          break;
        case C.STATUS_ACCEPTED:
          this.eventHandlers.onReceiveResponse(response);
          break;
      }
    }
    else if (status_code >= 300 && status_code <= 699)
    {
      switch (this.state)
      {
        case C.STATUS_CALLING:
        case C.STATUS_PROCEEDING:
          this.stateChanged(C.STATUS_COMPLETED);
          this.sendACK(response);
          this.eventHandlers.onReceiveResponse(response);
          break;
        case C.STATUS_COMPLETED:
          this.sendACK(response);
          break;
      }
    }
  }
}

class AckClientTransaction extends EventEmitter
{
  constructor(ua, transport, request, eventHandlers)
  {
    super();

    this.id = `z9hG4bK${Math.floor(Math.random() * 10000000)}`;
    this.transport = transport;
    this.request = request;
    this.eventHandlers = eventHandlers;

    let via = `SIP/2.0/${transport.via_transport}`;

    via += ` ${ua.configuration.via_host};branch=${this.id}`;

    this.request.setHeader('via', via);
  }

  get C()
  {
    return C;
  }

  send()
  {
    if (!this.transport.send(this.request))
    {
      this.onTransportError();
    }
  }

  onTransportError()
  {
    debugact(`transport error occurred for transaction ${this.id}`);
    this.eventHandlers.onTransportError();
  }
}

class NonInviteServerTransaction extends EventEmitter
{
  constructor(ua, transport, request)
  {
    super();

    this.type = C.NON_INVITE_SERVER;
    this.id = request.via_branch;
    this.ua = ua;
    this.transport = transport;
    this.request = request;
    this.last_response = '';
    request.server_transaction = this;

    this.state = C.STATUS_TRYING;

    ua.newTransaction(this);
  }

  get C()
  {
    return C;
  }

  stateChanged(state)
  {
    this.state = state;
    this.emit('stateChanged');
  }

  timer_J()
  {
    debugnist(`Timer J expired for transaction ${this.id}`);
    this.stateChanged(C.STATUS_TERMINATED);
    this.ua.destroyTransaction(this);
  }

  onTransportError()
  {
    if (!this.transportError)
    {
      this.transportError = true;

      debugnist(`transport error occurred, deleting transaction ${this.id}`);

      clearTimeout(this.J);
      this.stateChanged(C.STATUS_TERMINATED);
      this.ua.destroyTransaction(this);
    }
  }

  receiveResponse(status_code, response, onSuccess, onFailure)
  {
    if (status_code === 100)
    {
      /* RFC 4320 4.1
       * 'A SIP element MUST NOT
       * send any provisional response with a
       * Status-Code other than 100 to a non-INVITE request.'
       */
      switch (this.state)
      {
        case C.STATUS_TRYING:
          this.stateChanged(C.STATUS_PROCEEDING);
          if (!this.transport.send(response))
          {
            this.onTransportError();
          }
          break;
        case C.STATUS_PROCEEDING:
          this.last_response = response;
          if (!this.transport.send(response))
          {
            this.onTransportError();
            if (onFailure)
            {
              onFailure();
            }
          }
          else if (onSuccess)
          {
            onSuccess();
          }
          break;
      }
    }
    else if (status_code >= 200 && status_code <= 699)
    {
      switch (this.state)
      {
        case C.STATUS_TRYING:
        case C.STATUS_PROCEEDING:
          this.stateChanged(C.STATUS_COMPLETED);
          this.last_response = response;
          this.J = setTimeout(() =>
          {
            this.timer_J();
          }, Timers.TIMER_J);
          if (!this.transport.send(response))
          {
            this.onTransportError();
            if (onFailure)
            {
              onFailure();
            }
          }
          else if (onSuccess)
          {
            onSuccess();
          }
          break;
        case C.STATUS_COMPLETED:
          break;
      }
    }
  }
}

class InviteServerTransaction extends EventEmitter
{
  constructor(ua, transport, request)
  {
    super();

    this.type = C.INVITE_SERVER;
    this.id = request.via_branch;
    this.ua = ua;
    this.transport = transport;
    this.request = request;
    this.last_response = '';
    request.server_transaction = this;

    this.state = C.STATUS_PROCEEDING;

    ua.newTransaction(this);

    this.resendProvisionalTimer = null;

    request.reply(100);
  }

  get C()
  {
    return C;
  }

  stateChanged(state)
  {
    this.state = state;
    this.emit('stateChanged');
  }

  timer_H()
  {
    debugist(`Timer H expired for transaction ${this.id}`);

    if (this.state === C.STATUS_COMPLETED)
    {
      debugist('ACK not received, dialog will be terminated');
    }

    this.stateChanged(C.STATUS_TERMINATED);
    this.ua.destroyTransaction(this);
  }

  timer_I()
  {
    this.stateChanged(C.STATUS_TERMINATED);
  }

  // RFC 6026 7.1.
  timer_L()
  {
    debugist(`Timer L expired for transaction ${this.id}`);

    if (this.state === C.STATUS_ACCEPTED)
    {
      this.stateChanged(C.STATUS_TERMINATED);
      this.ua.destroyTransaction(this);
    }
  }

  onTransportError()
  {
    if (!this.transportError)
    {
      this.transportError = true;

      debugist(`transport error occurred, deleting transaction ${this.id}`);

      if (this.resendProvisionalTimer !== null)
      {
        clearInterval(this.resendProvisionalTimer);
        this.resendProvisionalTimer = null;
      }

      clearTimeout(this.L);
      clearTimeout(this.H);
      clearTimeout(this.I);

      this.stateChanged(C.STATUS_TERMINATED);
      this.ua.destroyTransaction(this);
    }
  }

  resend_provisional()
  {
    if (!this.transport.send(this.last_response))
    {
      this.onTransportError();
    }
  }

  // INVITE Server Transaction RFC 3261 17.2.1.
  receiveResponse(status_code, response, onSuccess, onFailure)
  {
    if (status_code >= 100 && status_code <= 199)
    {
      switch (this.state)
      {
        case C.STATUS_PROCEEDING:
          if (!this.transport.send(response))
          {
            this.onTransportError();
          }
          this.last_response = response;
          break;
      }
    }

    if (status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING)
    {
      // Trigger the resendProvisionalTimer only for the first non 100 provisional response.
      if (this.resendProvisionalTimer === null)
      {
        this.resendProvisionalTimer = setInterval(() =>
        {
          this.resend_provisional();
        }, Timers.PROVISIONAL_RESPONSE_INTERVAL);
      }
    }
    else if (status_code >= 200 && status_code <= 299)
    {
      switch (this.state)
      {
        case C.STATUS_PROCEEDING:
          this.stateChanged(C.STATUS_ACCEPTED);
          this.last_response = response;
          this.L = setTimeout(() =>
          {
            this.timer_L();
          }, Timers.TIMER_L);

          if (this.resendProvisionalTimer !== null)
          {
            clearInterval(this.resendProvisionalTimer);
            this.resendProvisionalTimer = null;
          }

          /* falls through */
        case C.STATUS_ACCEPTED:
          // Note that this point will be reached for proceeding this.state also.
          if (!this.transport.send(response))
          {
            this.onTransportError();
            if (onFailure)
            {
              onFailure();
            }
          }
          else if (onSuccess)
          {
            onSuccess();
          }
          break;
      }
    }
    else if (status_code >= 300 && status_code <= 699)
    {
      switch (this.state)
      {
        case C.STATUS_PROCEEDING:
          if (this.resendProvisionalTimer !== null)
          {
            clearInterval(this.resendProvisionalTimer);
            this.resendProvisionalTimer = null;
          }

          if (!this.transport.send(response))
          {
            this.onTransportError();
            if (onFailure)
            {
              onFailure();
            }
          }
          else
          {
            this.stateChanged(C.STATUS_COMPLETED);
            this.H = setTimeout(() =>
            {
              this.timer_H();
            }, Timers.TIMER_H);
            if (onSuccess)
            {
              onSuccess();
            }
          }
          break;
      }
    }
  }
}

/**
 * INVITE:
 *  _true_ if retransmission
 *  _false_ new request
 *
 * ACK:
 *  _true_  ACK to non2xx response
 *  _false_ ACK must be passed to TU (accepted state)
 *          ACK to 2xx response
 *
 * CANCEL:
 *  _true_  no matching invite transaction
 *  _false_ matching invite transaction and no final response sent
 *
 * OTHER:
 *  _true_  retransmission
 *  _false_ new request
 */
function checkTransaction({ _transactions }, request)
{
  let tr;

  switch (request.method)
  {
    case JsSIP_C.INVITE:
      tr = _transactions.ist[request.via_branch];
      if (tr)
      {
        switch (tr.state)
        {
          case C.STATUS_PROCEEDING:
            tr.transport.send(tr.last_response);
            break;

            // RFC 6026 7.1 Invite retransmission.
            // Received while in C.STATUS_ACCEPTED state. Absorb it.
          case C.STATUS_ACCEPTED:
            break;
        }

        return true;
      }
      break;
    case JsSIP_C.ACK:
      tr = _transactions.ist[request.via_branch];

      // RFC 6026 7.1.
      if (tr)
      {
        if (tr.state === C.STATUS_ACCEPTED)
        {
          return false;
        }
        else if (tr.state === C.STATUS_COMPLETED)
        {
          tr.state = C.STATUS_CONFIRMED;
          tr.I = setTimeout(() => { tr.timer_I(); }, Timers.TIMER_I);

          return true;
        }
      }
      // ACK to 2XX Response.
      else
      {
        return false;
      }
      break;
    case JsSIP_C.CANCEL:
      tr = _transactions.ist[request.via_branch];
      if (tr)
      {
        request.reply_sl(200);
        if (tr.state === C.STATUS_PROCEEDING)
        {
          return false;
        }
        else
        {
          return true;
        }
      }
      else
      {
        request.reply_sl(481);

        return true;
      }
    default:

      // Non-INVITE Server Transaction RFC 3261 17.2.2.
      tr = _transactions.nist[request.via_branch];
      if (tr)
      {
        switch (tr.state)
        {
          case C.STATUS_TRYING:
            break;
          case C.STATUS_PROCEEDING:
          case C.STATUS_COMPLETED:
            tr.transport.send(tr.last_response);
            break;
        }

        return true;
      }
      break;
  }
}

module.exports = {
  C,
  NonInviteClientTransaction,
  InviteClientTransaction,
  AckClientTransaction,
  NonInviteServerTransaction,
  InviteServerTransaction,
  checkTransaction
};


/***/ }),

/***/ "./sipLib/Transport.js":
/*!*****************************!*\
  !*** ./sipLib/Transport.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Socket = __webpack_require__(/*! ./Socket */ "./sipLib/Socket.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:Transport');
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:Transport');

debugerror.log = console.warn.bind(console);

/**
 * Constants
 */
const C = {
  // Transport status.
  STATUS_CONNECTED    : 0,
  STATUS_CONNECTING   : 1,
  STATUS_DISCONNECTED : 2,

  // Socket status.
  SOCKET_STATUS_READY : 0,
  SOCKET_STATUS_ERROR : 1,

  // Recovery options.
  recovery_options : {
    min_interval : 2, // minimum interval in seconds between recover attempts
    max_interval : 30 // maximum interval in seconds between recover attempts
  }
};

/*
 * Manages one or multiple JsSIP.Socket instances.
 * Is reponsible for transport recovery logic among all socket instances.
 *
 * @socket JsSIP::Socket instance
 */
module.exports = class Transport
{
  constructor(sockets, recovery_options = C.recovery_options)
  {
    debug('new()');

    this.status = C.STATUS_DISCONNECTED;

    // Current socket.
    this.socket = null;

    // Socket collection.
    this.sockets = [];

    this.recovery_options = recovery_options;
    this.recover_attempts = 0;
    this.recovery_timer = null;

    this.close_requested = false;

    if (typeof sockets === 'undefined')
    {
      throw new TypeError('Invalid argument.' +
                          ' undefined \'sockets\' argument');
    }

    if (!(sockets instanceof Array))
    {
      sockets = [ sockets ];
    }

    sockets.forEach(function(socket)
    {
      if (!Socket.isSocket(socket.socket))
      {
        throw new TypeError('Invalid argument.' +
                            ' invalid \'JsSIP.Socket\' instance');
      }

      if (socket.weight && !Number(socket.weight))
      {
        throw new TypeError('Invalid argument.' +
                            ' \'weight\' attribute is not a number');
      }

      this.sockets.push({
        socket : socket.socket,
        weight : socket.weight || 0,
        status : C.SOCKET_STATUS_READY
      });
    }, this);

    // Get the socket with higher weight.
    this._getSocket();
  }

  /**
   * Instance Methods
   */

  get via_transport()
  {
    return this.socket.via_transport;
  }

  get url()
  {
    return this.socket.url;
  }

  get sip_uri()
  {
    return this.socket.sip_uri;
  }

  connect()
  {
    debug('connect()');

    if (this.isConnected())
    {
      debug('Transport is already connected');

      return;
    }
    else if (this.isConnecting())
    {
      debug('Transport is connecting');

      return;
    }

    this.close_requested = false;
    this.status = C.STATUS_CONNECTING;
    this.onconnecting({ socket: this.socket, attempts: this.recover_attempts });

    if (!this.close_requested)
    {
      // Bind socket event callbacks.
      this.socket.onconnect = this._onConnect.bind(this);
      this.socket.ondisconnect = this._onDisconnect.bind(this);
      this.socket.ondata = this._onData.bind(this);

      this.socket.connect();
    }

    return;
  }

  disconnect()
  {
    debug('close()');

    this.close_requested = true;
    this.recover_attempts = 0;
    this.status = C.STATUS_DISCONNECTED;

    // Clear recovery_timer.
    if (this.recovery_timer !== null)
    {
      clearTimeout(this.recovery_timer);
      this.recovery_timer = null;
    }

    // Unbind socket event callbacks.
    this.socket.onconnect = () => {};
    this.socket.ondisconnect = () => {};
    this.socket.ondata = () => {};

    this.socket.disconnect();
    this.ondisconnect({
      socket : this.socket,
      error  : false
    });
  }

  send(data)
  {
    debug('send()');

    if (!this.isConnected())
    {
      debugerror('unable to send message, transport is not connected');

      return false;
    }

    const message = data.toString();

    debug(`sending message:\n\n${message}\n`);

    return this.socket.send(message);
  }

  isConnected()
  {
    return this.status === C.STATUS_CONNECTED;
  }

  isConnecting()
  {
    return this.status === C.STATUS_CONNECTING;
  }

  /**
   * Private API.
   */

  _reconnect()
  {
    this.recover_attempts+=1;

    let k = Math.floor((Math.random() * Math.pow(2, this.recover_attempts)) +1);

    if (k < this.recovery_options.min_interval)
    {
      k = this.recovery_options.min_interval;
    }

    else if (k > this.recovery_options.max_interval)
    {
      k = this.recovery_options.max_interval;
    }

    debug(`reconnection attempt: ${this.recover_attempts}. next connection attempt in ${k} seconds`);

    this.recovery_timer = setTimeout(() =>
    {
      if (!this.close_requested && !(this.isConnected() || this.isConnecting()))
      {
        // Get the next available socket with higher weight.
        this._getSocket();

        // Connect the socket.
        this.connect();
      }
    }, k * 1000);
  }

  /**
   * get the next available socket with higher weight
   */
  _getSocket()
  {

    let candidates = [];

    this.sockets.forEach((socket) =>
    {
      if (socket.status === C.SOCKET_STATUS_ERROR)
      {
        return; // continue the array iteration
      }
      else if (candidates.length === 0)
      {
        candidates.push(socket);
      }
      else if (socket.weight > candidates[0].weight)
      {
        candidates = [ socket ];
      }
      else if (socket.weight === candidates[0].weight)
      {
        candidates.push(socket);
      }
    });

    if (candidates.length === 0)
    {
      // All sockets have failed. reset sockets status.
      this.sockets.forEach((socket) =>
      {
        socket.status = C.SOCKET_STATUS_READY;
      });

      // Get next available socket.
      this._getSocket();

      return;
    }

    const idx = Math.floor((Math.random()* candidates.length));

    this.socket = candidates[idx].socket;
  }

  /**
   * Socket Event Handlers
   */

  _onConnect()
  {
    this.recover_attempts = 0;
    this.status = C.STATUS_CONNECTED;

    // Clear recovery_timer.
    if (this.recovery_timer !== null)
    {
      clearTimeout(this.recovery_timer);
      this.recovery_timer = null;
    }

    this.onconnect({ socket: this });
  }

  _onDisconnect(error, code, reason)
  {
    this.status = C.STATUS_DISCONNECTED;
    this.ondisconnect({
      socket : this.socket,
      error,
      code,
      reason
    });

    if (this.close_requested)
    {
      return;
    }

    // Update socket status.
    else
    {
      this.sockets.forEach(function(socket)
      {
        if (this.socket === socket.socket)
        {
          socket.status = C.SOCKET_STATUS_ERROR;
        }
      }, this);
    }

    this._reconnect(error);
  }

  _onData(data)
  {
    // CRLF Keep Alive response from server. Ignore it.
    if (data === '\r\n')
    {
      debug('received message with CRLF Keep Alive response');

      return;
    }

    // Binary message.
    else if (typeof data !== 'string')
    {
      try
      {
        data = String.fromCharCode.apply(null, new Uint8Array(data));
      }
      catch (evt)
      {
        debug('received binary message failed to be converted into string,' +
              ' message discarded');

        return;
      }

      debug(`received binary message:\n\n${data}\n`);
    }

    // Text message.
    else
    {
      debug(`received text message:\n\n${data}\n`);
    }

    this.ondata({ transport: this, message: data });
  }
};


/***/ }),

/***/ "./sipLib/UA.js":
/*!**********************!*\
  !*** ./sipLib/UA.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const EventEmitter = __webpack_require__(/*! events */ "./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const Registrator = __webpack_require__(/*! ./Registrator */ "./sipLib/Registrator.js");
const RTCSession = __webpack_require__(/*! ./RTCSession */ "./sipLib/RTCSession.js");
const Message = __webpack_require__(/*! ./Message */ "./sipLib/Message.js");
const Transactions = __webpack_require__(/*! ./Transactions */ "./sipLib/Transactions.js");
const Transport = __webpack_require__(/*! ./Transport */ "./sipLib/Transport.js");
const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const Exceptions = __webpack_require__(/*! ./Exceptions */ "./sipLib/Exceptions.js");
const URI = __webpack_require__(/*! ./URI */ "./sipLib/URI.js");
const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");
const Parser = __webpack_require__(/*! ./Parser */ "./sipLib/Parser.js");
const SIPMessage = __webpack_require__(/*! ./SIPMessage */ "./sipLib/SIPMessage.js");
const sanityCheck = __webpack_require__(/*! ./sanityCheck */ "./sipLib/sanityCheck.js");
const config = __webpack_require__(/*! ./Config */ "./sipLib/Config.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:UA');
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:UA');

debugerror.log = console.warn.bind(console);

const C = {
  // UA status codes.
  STATUS_INIT        : 0,
  STATUS_READY       : 1,
  STATUS_USER_CLOSED : 2,
  STATUS_NOT_READY   : 3,

  // UA error codes.
  CONFIGURATION_ERROR : 1,
  NETWORK_ERROR       : 2
};

/**
 * The User-Agent class.
 * @class JsSIP.UA
 * @param {Object} configuration Configuration parameters.
 * @throws {JsSIP.Exceptions.ConfigurationError} If a configuration parameter is invalid.
 * @throws {TypeError} If no configuration is given.
 */
module.exports = class UA extends EventEmitter
{
  // Expose C object.
  static get C()
  {
    return C;
  }

  constructor(configuration)
  {
    debug('new() [configuration:%o]', configuration);

    super();

    this._cache = {
      credentials : {}
    };

    this._configuration = Object.assign({}, config.settings);
    this._dynConfiguration = {};
    this._dialogs = {};

    // User actions outside any session/dialog (MESSAGE).
    this._applicants = {};

    this._sessions = {};
    this._transport = null;
    this._contact = null;
    this._status = C.STATUS_INIT;
    this._error = null;
    this._transactions = {
      nist : {},
      nict : {},
      ist  : {},
      ict  : {}
    };

    // Custom UA empty object for high level use.
    this._data = {};

    this._closeTimer = null;

    // Check configuration argument.
    if (configuration === undefined)
    {
      throw new TypeError('Not enough arguments');
    }

    // Load configuration.
    try
    {
      this._loadConfig(configuration);
    }
    catch (e)
    {
      this._status = C.STATUS_NOT_READY;
      this._error = C.CONFIGURATION_ERROR;
      throw e;
    }

    // Initialize registrator.
    this._registrator = new Registrator(this);
  }

  get C()
  {
    return C;
  }

  get status()
  {
    return this._status;
  }

  get contact()
  {
    return this._contact;
  }

  get configuration()
  {
    return this._configuration;
  }

  get transport()
  {
    return this._transport;
  }

  // =================
  //  High Level API
  // =================

  /**
   * Connect to the server if status = STATUS_INIT.
   * Resume UA after being closed.
   */
  start()
  {
    debug('start()');

    if (this._status === C.STATUS_INIT)
    {
      this._transport.connect();
    }
    else if (this._status === C.STATUS_USER_CLOSED)
    {
      debug('restarting UA');

      // Disconnect.
      if (this._closeTimer !== null)
      {
        clearTimeout(this._closeTimer);
        this._closeTimer = null;
        this._transport.disconnect();
      }

      // Reconnect.
      this._status = C.STATUS_INIT;
      this._transport.connect();
    }
    else if (this._status === C.STATUS_READY)
    {
      debug('UA is in READY status, not restarted');
    }
    else
    {
      debug('ERROR: connection is down, Auto-Recovery system is trying to reconnect');
    }

    // Set dynamic configuration.
    this._dynConfiguration.register = this._configuration.register;
  }

  /**
   * Register.
   */
  register()
  {
    debug('register()');

    this._dynConfiguration.register = true;
    this._registrator.register();
  }

  /**
   * Unregister.
   */
  unregister(options)
  {
    debug('unregister()');

    this._dynConfiguration.register = false;
    this._registrator.unregister(options);
  }

  /**
   * Get the Registrator instance.
   */
  registrator()
  {
    return this._registrator;
  }

  /**
   * Registration state.
   */
  isRegistered()
  {
    return this._registrator.registered;
  }

  /**
   * Connection state.
   */
  isConnected()
  {
    return this._transport.isConnected();
  }

  /**
   * Make an outgoing call.
   *
   * -param {String} target
   * -param {Object} [options]
   *
   * -throws {TypeError}
   *
   */
  call(target, options)
  {
    debug('call()');

    const session = new RTCSession(this);

    session.connect(target, options);

    return session;
  }

  /**
   * Send a message.
   *
   * -param {String} target
   * -param {String} body
   * -param {Object} [options]
   *
   * -throws {TypeError}
   *
   */
  sendMessage(target, body, options)
  {
    debug('sendMessage()');

    const message = new Message(this);

    message.send(target, body, options);

    return message;
  }

  /**
   * Terminate ongoing sessions.
   */
  terminateSessions(options)
  {
    debug('terminateSessions()');

    for (const idx in this._sessions)
    {
      if (!this._sessions[idx].isEnded())
      {
        this._sessions[idx].terminate(options);
      }
    }
  }

  /**
   * Gracefully close.
   *
   */
  stop()
  {
    debug('stop()');

    // Remove dynamic settings.
    this._dynConfiguration = {};

    if (this._status === C.STATUS_USER_CLOSED)
    {
      debug('UA already closed');

      return;
    }

    // Close registrator.
    this._registrator.close();

    // If there are session wait a bit so CANCEL/BYE can be sent and their responses received.
    const num_sessions = Object.keys(this._sessions).length;

    // Run  _terminate_ on every Session.
    for (const session in this._sessions)
    {
      if (Object.prototype.hasOwnProperty.call(this._sessions, session))
      {
        debug(`closing session ${session}`);
        try { this._sessions[session].terminate(); }
        catch (error) {}
      }
    }

    // Run  _close_ on every applicant.
    for (const applicant in this._applicants)
    {
      if (Object.prototype.hasOwnProperty.call(this._applicants, applicant))
        try { this._applicants[applicant].close(); }
        catch (error) {}
    }

    this._status = C.STATUS_USER_CLOSED;

    const num_transactions =
      Object.keys(this._transactions.nict).length +
      Object.keys(this._transactions.nist).length +
      Object.keys(this._transactions.ict).length +
      Object.keys(this._transactions.ist).length;

    if (num_transactions === 0 && num_sessions === 0)
    {
      this._transport.disconnect();
    }
    else
    {
      this._closeTimer = setTimeout(() =>
      {
        this._closeTimer = null;
        this._transport.disconnect();
      }, 2000);
    }
  }

  /**
   * Normalice a string into a valid SIP request URI
   * -param {String} target
   * -returns {JsSIP.URI|undefined}
   */
  normalizeTarget(target)
  {
    return Utils.normalizeTarget(target, this._configuration.hostport_params);
  }

  /**
   * Allow retrieving configuration and autogenerated fields in runtime.
   */
  get(parameter)
  {
    switch (parameter)
    {
      case 'realm':
        return this._configuration.realm;

      case 'ha1':
        return this._configuration.ha1;

      default:
        debugerror('get() | cannot get "%s" parameter in runtime', parameter);

        return undefined;
    }
  }

  /**
   * Allow configuration changes in runtime.
   * Returns true if the parameter could be set.
   */
  set(parameter, value)
  {
    switch (parameter)
    {
      case 'password': {
        this._configuration.password = String(value);
        break;
      }

      case 'realm': {
        this._configuration.realm = String(value);
        break;
      }

      case 'ha1': {
        this._configuration.ha1 = String(value);
        // Delete the plain SIP password.
        this._configuration.password = null;
        break;
      }

      case 'display_name': {
        if (Grammar.parse(`"${value}"`, 'display_name') === -1)
        {
          debugerror('set() | wrong "display_name"');

          return false;
        }
        this._configuration.display_name = value;
        break;
      }

      default:
        debugerror('set() | cannot set "%s" parameter in runtime', parameter);

        return false;
    }

    return true;
  }

  // ==========================
  // Event Handlers.
  // ==========================

  /**
   * new Transaction
   */
  newTransaction(transaction)
  {
    this._transactions[transaction.type][transaction.id] = transaction;
    this.emit('newTransaction', {
      transaction
    });
  }

  /**
   * Transaction destroyed.
   */
  destroyTransaction(transaction)
  {
    delete this._transactions[transaction.type][transaction.id];
    this.emit('transactionDestroyed', {
      transaction
    });
  }

  /**
   * new Dialog
   */
  newDialog(dialog)
  {
    this._dialogs[dialog.id] = dialog;
  }

  /**
   * Dialog destroyed.
   */
  destroyDialog(dialog)
  {
    delete this._dialogs[dialog.id];
  }

  /**
   *  new Message
   */
  newMessage(message, data)
  {
    this._applicants[message] = message;
    this.emit('newMessage', data);
  }

  /**
   *  Message destroyed.
   */
  destroyMessage(message)
  {
    delete this._applicants[message];
  }

  /**
   * new RTCSession
   */
  newRTCSession(session, data)
  {
    this._sessions[session.id] = session;
    this.emit('newRTCSession', data);
  }

  /**
   * RTCSession destroyed.
   */
  destroyRTCSession(session)
  {
    delete this._sessions[session.id];
  }

  /**
   * Registered
   */
  registered(data)
  {
    this.emit('registered', data);
  }

  /**
   * Unregistered
   */
  unregistered(data)
  {
    this.emit('unregistered', data);
  }

  /**
   * Registration Failed
   */
  registrationFailed(data)
  {
    this.emit('registrationFailed', data);
  }

  // =========================
  // ReceiveRequest.
  // =========================

  /**
   * Request reception
   */
  receiveRequest(request)
  {
    const method = request.method;

    // Check that request URI points to us.
    if (request.ruri.user !== this._configuration.uri.user &&
        request.ruri.user !== this._contact.uri.user)
    {
      debug('Request-URI does not point to us');
      if (request.method !== JsSIP_C.ACK)
      {
        request.reply_sl(404);
      }

      return;
    }

    // Check request URI scheme.
    if (request.ruri.scheme === JsSIP_C.SIPS)
    {
      request.reply_sl(416);

      return;
    }

    // Check transaction.
    if (Transactions.checkTransaction(this, request))
    {
      return;
    }

    // Create the server transaction.
    if (method === JsSIP_C.INVITE)
    {
      /* eslint-disable no-new */
      new Transactions.InviteServerTransaction(this, this._transport, request);
      /* eslint-enable no-new */
    }
    else if (method !== JsSIP_C.ACK && method !== JsSIP_C.CANCEL)
    {
      /* eslint-disable no-new */
      new Transactions.NonInviteServerTransaction(this, this._transport, request);
      /* eslint-enable no-new */
    }

    /* RFC3261 12.2.2
     * Requests that do not change in any way the state of a dialog may be
     * received within a dialog (for example, an OPTIONS request).
     * They are processed as if they had been received outside the dialog.
     */
    if (method === JsSIP_C.OPTIONS)
    {
      request.reply(200);
    }
    else if (method === JsSIP_C.MESSAGE)
    {
      if (this.listeners('newMessage').length === 0)
      {
        request.reply(405);

        return;
      }
      const message = new Message(this);

      message.init_incoming(request);
    }
    else if (method === JsSIP_C.INVITE)
    {
      // Initial INVITE.
      if (!request.to_tag && this.listeners('newRTCSession').length === 0)
      {
        request.reply(405);

        return;
      }
    }

    let dialog;
    let session;

    // Initial Request.
    if (!request.to_tag)
    {
      switch (method)
      {
        case JsSIP_C.INVITE:
          if (window.RTCPeerConnection)
          { // TODO
            if (request.hasHeader('replaces'))
            {
              const replaces = request.replaces;

              dialog = this._findDialog(
                replaces.call_id, replaces.from_tag, replaces.to_tag);
              if (dialog)
              {
                session = dialog.owner;
                if (!session.isEnded())
                {
                  session.receiveRequest(request);
                }
                else
                {
                  request.reply(603);
                }
              }
              else
              {
                request.reply(481);
              }
            }
            else
            {
              session = new RTCSession(this);
              session.init_incoming(request);
            }
          }
          else
          {
            debugerror('INVITE received but WebRTC is not supported');
            request.reply(488);
          }
          break;
        case JsSIP_C.BYE:
          // Out of dialog BYE received.
          request.reply(481);
          break;
        case JsSIP_C.CANCEL:
          session = this._findSession(request);
          if (session)
          {
            session.receiveRequest(request);
          }
          else
          {
            debug('received CANCEL request for a non existent session');
          }
          break;
        case JsSIP_C.ACK:
          /* Absorb it.
           * ACK request without a corresponding Invite Transaction
           * and without To tag.
           */
          break;
        default:
          request.reply(405);
          break;
      }
    }
    // In-dialog request.
    else
    {
      dialog = this._findDialog(request.call_id, request.from_tag, request.to_tag);

      if (dialog)
      {
        dialog.receiveRequest(request);
      }
      else if (method === JsSIP_C.NOTIFY)
      {
        session = this._findSession(request);
        if (session)
        {
          session.receiveRequest(request);
        }
        else
        {
          debug('received NOTIFY request for a non existent subscription');
          request.reply(481, 'Subscription does not exist');
        }
      }

      /* RFC3261 12.2.2
       * Request with to tag, but no matching dialog found.
       * Exception: ACK for an Invite request for which a dialog has not
       * been created.
       */
      else
      if (method !== JsSIP_C.ACK)
      {
        request.reply(481);
      }
    }
  }

  // =================
  // Utils.
  // =================

  /**
   * Get the session to which the request belongs to, if any.
   */
  _findSession({ call_id, from_tag, to_tag })
  {
    const sessionIDa = call_id + from_tag;
    const sessionA = this._sessions[sessionIDa];
    const sessionIDb = call_id + to_tag;
    const sessionB = this._sessions[sessionIDb];

    if (sessionA)
    {
      return sessionA;
    }
    else if (sessionB)
    {
      return sessionB;
    }
    else
    {
      return null;
    }
  }

  /**
   * Get the dialog to which the request belongs to, if any.
   */
  _findDialog(call_id, from_tag, to_tag)
  {
    let id = call_id + from_tag + to_tag;
    let dialog = this._dialogs[id];

    if (dialog)
    {
      return dialog;
    }
    else
    {
      id = call_id + to_tag + from_tag;
      dialog = this._dialogs[id];
      if (dialog)
      {
        return dialog;
      }
      else
      {
        return null;
      }
    }
  }

  _loadConfig(configuration)
  {
    // Check and load the given configuration.
    try
    {
      config.load(this._configuration, configuration);
    }
    catch (e)
    {
      throw e;
    }

    // Post Configuration Process.

    // Allow passing 0 number as display_name.
    if (this._configuration.display_name === 0)
    {
      this._configuration.display_name = '0';
    }

    // Instance-id for GRUU.
    if (!this._configuration.instance_id)
    {
      this._configuration.instance_id = Utils.newUUID();
    }

    // Jssip_id instance parameter. Static random tag of length 5.
    this._configuration.plivosip_id = Utils.createRandomToken(5);

    // String containing this._configuration.uri without scheme and user.
    const hostport_params = this._configuration.uri.clone();

    hostport_params.user = null;
    this._configuration.hostport_params = hostport_params.toString().replace(/^sip:/i, '');

    // Transport.
    try
    {
      this._transport = new Transport(this._configuration.sockets, {
        // Recovery options.
        max_interval : this._configuration.connection_recovery_max_interval,
        min_interval : this._configuration.connection_recovery_min_interval
      });

      // Transport event callbacks.
      this._transport.onconnecting = onTransportConnecting.bind(this);
      this._transport.onconnect = onTransportConnect.bind(this);
      this._transport.ondisconnect = onTransportDisconnect.bind(this);
      this._transport.ondata = onTransportData.bind(this);
    }
    catch (e)
    {
      debugerror(e);
      throw new Exceptions.ConfigurationError('sockets', this._configuration.sockets);
    }

    // Remove sockets instance from configuration object.
    delete this._configuration.sockets;

    // Check whether authorization_user is explicitly defined.
    // Take 'this._configuration.uri.user' value if not.
    if (!this._configuration.authorization_user)
    {
      this._configuration.authorization_user = this._configuration.uri.user;
    }

    // If no 'registrar_server' is set use the 'uri' value without user portion and
    // without URI params/headers.
    if (!this._configuration.registrar_server)
    {
      const registrar_server = this._configuration.uri.clone();

      registrar_server.user = null;
      registrar_server.clearParams();
      registrar_server.clearHeaders();
      this._configuration.registrar_server = registrar_server;
    }

    // User no_answer_timeout.
    this._configuration.no_answer_timeout *= 1000;

    // Via Host.
    if (this._configuration.contact_uri)
    {
      this._configuration.via_host = this._configuration.contact_uri.host;
    }

    // Contact URI.
    else
    {
      this._configuration.contact_uri = new URI('sip', Utils.createRandomToken(8), this._configuration.via_host, null, { transport: 'ws' });
    }

    this._contact = {
      pub_gruu  : null,
      temp_gruu : null,
      uri       : this._configuration.contact_uri,
      toString(options = {})
      {
        const anonymous = options.anonymous || null;
        const outbound = options.outbound || null;
        let contact = '<';

        if (anonymous)
        {
          contact += this.temp_gruu || 'sip:anonymous@anonymous.invalid;transport=ws';
        }
        else
        {
          contact += this.pub_gruu || this.uri.toString();
        }

        if (outbound && (anonymous ? !this.temp_gruu : !this.pub_gruu))
        {
          contact += ';ob';
        }

        contact += '>';

        return contact;
      }
    };

    // Seal the configuration.
    const writable_parameters = [
      'password', 'realm', 'ha1', 'display_name', 'register'
    ];

    for (const parameter in this._configuration)
    {
      if (Object.prototype.hasOwnProperty.call(this._configuration, parameter))
      {
        if (writable_parameters.indexOf(parameter) !== -1)
        {
          Object.defineProperty(this._configuration, parameter, {
            writable     : true,
            configurable : false
          });
        }
        else
        {
          Object.defineProperty(this._configuration, parameter, {
            writable     : false,
            configurable : false
          });
        }
      }
    }

    debug('configuration parameters after validation:');
    for (const parameter in this._configuration)
    {
      // Only show the user user configurable parameters.
      if (Object.prototype.hasOwnProperty.call(config.settings, parameter))
      {
        switch (parameter)
        {
          case 'uri':
          case 'registrar_server':
            debug(`- ${parameter}: ${this._configuration[parameter]}`);
            break;
          case 'password':
          case 'ha1':
            debug(`- ${parameter}: NOT SHOWN`);
            break;
          default:
            debug(`- ${parameter}: ${JSON.stringify(this._configuration[parameter])}`);
        }
      }
    }

    return;
  }
};

/**
 * Transport event handlers
 */

// Transport connecting event.
function onTransportConnecting(data)
{
  this.emit('connecting', data);
}

// Transport connected event.
function onTransportConnect(data)
{
  if (this._status === C.STATUS_USER_CLOSED)
  {
    return;
  }

  this._status = C.STATUS_READY;
  this._error = null;

  this.emit('connected', data);

  if (this._dynConfiguration.register)
  {
    this._registrator.register();
  }
}

// Transport disconnected event.
function onTransportDisconnect(data)
{
  // Run _onTransportError_ callback on every client transaction using _transport_.
  const client_transactions = [ 'nict', 'ict', 'nist', 'ist' ];

  for (const type of client_transactions)
  {
    for (const id in this._transactions[type])
    {
      if (Object.prototype.hasOwnProperty.call(this._transactions[type], id))
      {
        this._transactions[type][id].onTransportError();
      }
    }
  }

  this.emit('disconnected', data);

  // Call registrator _onTransportClosed_.
  this._registrator.onTransportClosed();

  if (this._status !== C.STATUS_USER_CLOSED)
  {
    this._status = C.STATUS_NOT_READY;
    this._error = C.NETWORK_ERROR;
  }
}

// Transport data event.
function onTransportData(data)
{
  const transport = data.transport;
  let message = data.message;

  message = Parser.parseMessage(message, this);

  if (! message)
  {
    return;
  }

  if (this._status === C.STATUS_USER_CLOSED &&
      message instanceof SIPMessage.IncomingRequest)
  {
    return;
  }

  // Do some sanity check.
  if (! sanityCheck(message, this, transport))
  {
    return;
  }

  if (message instanceof SIPMessage.IncomingRequest)
  {
    message.transport = transport;
    this.receiveRequest(message);
  }
  else if (message instanceof SIPMessage.IncomingResponse)
  {
    /* Unike stated in 18.1.2, if a response does not match
    * any transaction, it is discarded here and no passed to the core
    * in order to be discarded there.
    */

    let transaction;

    switch (message.method)
    {
      case JsSIP_C.INVITE:
        transaction = this._transactions.ict[message.via_branch];
        if (transaction)
        {
          transaction.receiveResponse(message);
        }
        break;
      case JsSIP_C.ACK:
        // Just in case ;-).
        break;
      default:
        transaction = this._transactions.nict[message.via_branch];
        if (transaction)
        {
          transaction.receiveResponse(message);
        }
        break;
    }
  }
}


/***/ }),

/***/ "./sipLib/URI.js":
/*!***********************!*\
  !*** ./sipLib/URI.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");

/**
 * -param {String} [scheme]
 * -param {String} [user]
 * -param {String} host
 * -param {String} [port]
 * -param {Object} [parameters]
 * -param {Object} [headers]
 *
 */
module.exports = class URI
{
  /**
    * Parse the given string and returns a JsSIP.URI instance or undefined if
    * it is an invalid URI.
    */
  static parse(uri)
  {
    uri = Grammar.parse(uri, 'SIP_URI');

    if (uri !== -1)
    {
      return uri;
    }
    else
    {
      return undefined;
    }
  }

  constructor(scheme, user, host, port, parameters = {}, headers = {})
  {
    // Checks.
    if (!host)
    {
      throw new TypeError('missing or invalid "host" parameter');
    }

    // Initialize parameters.
    this._parameters = {};
    this._headers = {};

    this._scheme = scheme || JsSIP_C.SIP;
    this._user = user;
    this._host = host;
    this._port = port;

    for (const param in parameters)
    {
      if (Object.prototype.hasOwnProperty.call(parameters, param))
      {
        this.setParam(param, parameters[param]);
      }
    }

    for (const header in headers)
    {
      if (Object.prototype.hasOwnProperty.call(headers, header))
      {
        this.setHeader(header, headers[header]);
      }
    }
  }

  get scheme()
  {
    return this._scheme;
  }

  set scheme(value)
  {
    this._scheme = value.toLowerCase();
  }

  get user()
  {
    return this._user;
  }

  set user(value)
  {
    this._user = value;
  }

  get host()
  {
    return this._host;
  }

  set host(value)
  {
    this._host = value.toLowerCase();
  }

  get port()
  {
    return this._port;
  }

  set port(value)
  {
    this._port = value === 0 ? value : (parseInt(value, 10) || null);
  }

  setParam(key, value)
  {
    if (key)
    {
      this._parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();
    }
  }

  getParam(key)
  {
    if (key)
    {
      return this._parameters[key.toLowerCase()];
    }
  }

  hasParam(key)
  {
    if (key)
    {
      return (this._parameters.hasOwnProperty(key.toLowerCase()) && true) || false;
    }
  }

  deleteParam(parameter)
  {
    parameter = parameter.toLowerCase();
    if (this._parameters.hasOwnProperty(parameter))
    {
      const value = this._parameters[parameter];

      delete this._parameters[parameter];

      return value;
    }
  }

  clearParams()
  {
    this._parameters = {};
  }

  setHeader(name, value)
  {
    this._headers[Utils.headerize(name)] = (Array.isArray(value)) ? value : [ value ];
  }

  getHeader(name)
  {
    if (name)
    {
      return this._headers[Utils.headerize(name)];
    }
  }

  hasHeader(name)
  {
    if (name)
    {
      return (this._headers.hasOwnProperty(Utils.headerize(name)) && true) || false;
    }
  }

  deleteHeader(header)
  {
    header = Utils.headerize(header);
    if (this._headers.hasOwnProperty(header))
    {
      const value = this._headers[header];

      delete this._headers[header];

      return value;
    }
  }

  clearHeaders()
  {
    this._headers = {};
  }

  clone()
  {
    return new URI(
      this._scheme,
      this._user,
      this._host,
      this._port,
      JSON.parse(JSON.stringify(this._parameters)),
      JSON.parse(JSON.stringify(this._headers)));
  }

  toString()
  {
    const headers = [];

    let uri = `${this._scheme}:`;

    if (this._user)
    {
      uri += `${Utils.escapeUser(this._user)}@`;
    }
    uri += this._host;
    if (this._port || this._port === 0)
    {
      uri += `:${this._port}`;
    }

    for (const parameter in this._parameters)
    {
      if (Object.prototype.hasOwnProperty.call(this._parameters, parameter))
      {
        uri += `;${parameter}`;

        if (this._parameters[parameter] !== null)
        {
          uri += `=${this._parameters[parameter]}`;
        }
      }
    }

    for (const header in this._headers)
    {
      if (Object.prototype.hasOwnProperty.call(this._headers, header))
      {
        for (const item of this._headers[header])
        {
          headers.push(`${header}=${item}`);
        }
      }
    }

    if (headers.length > 0)
    {
      uri += `?${headers.join('&')}`;
    }

    return uri;
  }

  toAor(show_port)
  {
    let aor = `${this._scheme}:`;

    if (this._user)
    {
      aor += `${Utils.escapeUser(this._user)}@`;
    }
    aor += this._host;
    if (show_port && (this._port || this._port === 0))
    {
      aor += `:${this._port}`;
    }

    return aor;
  }
};


/***/ }),

/***/ "./sipLib/Utils.js":
/*!*************************!*\
  !*** ./sipLib/Utils.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const URI = __webpack_require__(/*! ./URI */ "./sipLib/URI.js");
const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");

exports.str_utf8_length = (string) => unescape(encodeURIComponent(string)).length;

// Used by 'hasMethods'.
const isFunction = exports.isFunction = (fn) =>
{
  if (fn !== undefined)
  {
    return (Object.prototype.toString.call(fn) === '[object Function]')? true : false;
  }
  else
  {
    return false;
  }
};

exports.isString = (str) =>
{
  if (str !== undefined)
  {
    return (Object.prototype.toString.call(str) === '[object String]')? true : false;
  }
  else
  {
    return false;
  }
};

exports.isDecimal = (num) => !isNaN(num) && (parseFloat(num) === parseInt(num, 10));

exports.isEmpty = (value) =>
{
  return (value === null ||
      value === '' ||
      value === undefined ||
      (Array.isArray(value) && value.length === 0) ||
      (typeof(value) === 'number' && isNaN(value)));
};

exports.hasMethods = function(obj, ...methodNames)
{
  for (const methodName of methodNames)
  {
    if (isFunction(obj[methodName]))
    {
      return false;
    }
  }

  return true;
};

// Used by 'newTag'.
const createRandomToken = exports.createRandomToken = (size, base = 32) =>
{
  let i, r, token = '';

  for (i=0; i < size; i++)
  {
    r = Math.random() * base|0;
    token += r.toString(base);
  }

  return token;
};

exports.newTag = () => createRandomToken(10);

// http://stackoverflow.com/users/109538/broofa.
exports.newUUID = () =>
{
  const UUID = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) =>
  {
    const r = Math.random()*16|0, v = c === 'x' ? r : ((r&0x3)|0x8);


    return v.toString(16);
  });

  return UUID;
};

exports.hostType = (host) =>
{
  if (!host)
  {
    return;
  }
  else
  {
    host = Grammar.parse(host, 'host');
    if (host !== -1)
    {
      return host.host_type;
    }
  }
};

/**
* Hex-escape a SIP URI user.
* Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F"), '/' (%2F).
*
* Used by 'normalizeTarget'.
*/
const escapeUser = exports.escapeUser = (user) =>
  encodeURIComponent(decodeURIComponent(user))
    .replace(/%3A/ig, ':')
    .replace(/%2B/ig, '+')
    .replace(/%3F/ig, '?')
    .replace(/%2F/ig, '/');

/**
* Normalize SIP URI.
* NOTE: It does not allow a SIP URI without username.
* Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.
* Detects the domain part (if given) and properly hex-escapes the user portion.
* If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.
*/
exports.normalizeTarget = (target, domain) =>
{
  // If no target is given then raise an error.
  if (!target)
  {
    return;
  // If a URI instance is given then return it.
  }
  else if (target instanceof URI)
  {
    return target;

  // If a string is given split it by '@':
  // - Last fragment is the desired domain.
  // - Otherwise append the given domain argument.
  }
  else if (typeof target === 'string')
  {
    const target_array = target.split('@');
    let target_user;
    let target_domain;

    switch (target_array.length)
    {
      case 1:
        if (!domain)
        {
          return;
        }
        target_user = target;
        target_domain = domain;
        break;
      case 2:
        target_user = target_array[0];
        target_domain = target_array[1];
        break;
      default:
        target_user = target_array.slice(0, target_array.length-1).join('@');
        target_domain = target_array[target_array.length-1];
    }

    // Remove the URI scheme (if present).
    target_user = target_user.replace(/^(sips?|tel):/i, '');

    // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.
    if (/^[-.()]*\+?[0-9\-.()]+$/.test(target_user))
    {
      target_user = target_user.replace(/[-.()]/g, '');
    }

    // Build the complete SIP URI.
    target = `${JsSIP_C.SIP}:${escapeUser(target_user)}@${target_domain}`;

    // Finally parse the resulting URI.
    let uri;

    if ((uri = URI.parse(target)))
    {
      return uri;
    }
    else
    {
      return;
    }
  }
  else
  {
    return;
  }
};

exports.headerize = (string) =>
{
  const exceptions = {
    'Call-Id'          : 'Call-ID',
    'Cseq'             : 'CSeq',
    'Www-Authenticate' : 'WWW-Authenticate'
  };

  const name = string.toLowerCase()
    .replace(/_/g, '-')
    .split('-');
  let hname = '';
  const parts = name.length;
  let part;

  for (part = 0; part < parts; part++)
  {
    if (part !== 0)
    {
      hname +='-';
    }
    hname += name[part].charAt(0).toUpperCase()+name[part].substring(1);
  }
  if (exceptions[hname])
  {
    hname = exceptions[hname];
  }

  return hname;
};

exports.sipErrorCause = (status_code) =>
{
  for (const cause in JsSIP_C.SIP_ERROR_CAUSES)
  {
    if (JsSIP_C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1)
    {
      return JsSIP_C.causes[cause];
    }
  }

  return JsSIP_C.causes.SIP_FAILURE_CODE;
};

/**
* Generate a random Test-Net IP (http://tools.ietf.org/html/rfc5735)
*/
exports.getRandomTestNetIP = () =>
{
  function getOctet(from, to)
  {
    return Math.floor((Math.random() * (to-from+1)) + from);
  }

  return `192.0.2.${getOctet(1, 254)}`;
};

// MD5 (Message-Digest Algorithm) http://www.webtoolkit.info.
exports.calculateMD5 = (string) =>
{
  function rotateLeft(lValue, iShiftBits)
  {
    return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
  }

  function addUnsigned(lX, lY)
  {
    const lX8 = (lX & 0x80000000);
    const lY8 = (lY & 0x80000000);
    const lX4 = (lX & 0x40000000);
    const lY4 = (lY & 0x40000000);
    const lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);

    if (lX4 & lY4)
    {
      return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
    }
    if (lX4 | lY4)
    {
      if (lResult & 0x40000000)
      {
        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
      }
      else
      {
        return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
      }
    }
    else
    {
      return (lResult ^ lX8 ^ lY8);
    }
  }

  function doF(x, y, z)
  {
    return (x & y) | ((~x) & z);
  }

  function doG(x, y, z)
  {
    return (x & z) | (y & (~z));
  }

  function doH(x, y, z)
  {
    return (x ^ y ^ z);
  }

  function doI(x, y, z)
  {
    return (y ^ (x | (~z)));
  }

  function doFF(a, b, c, d, x, s, ac)
  {
    a = addUnsigned(a, addUnsigned(addUnsigned(doF(b, c, d), x), ac));

    return addUnsigned(rotateLeft(a, s), b);
  }

  function doGG(a, b, c, d, x, s, ac)
  {
    a = addUnsigned(a, addUnsigned(addUnsigned(doG(b, c, d), x), ac));

    return addUnsigned(rotateLeft(a, s), b);
  }

  function doHH(a, b, c, d, x, s, ac)
  {
    a = addUnsigned(a, addUnsigned(addUnsigned(doH(b, c, d), x), ac));

    return addUnsigned(rotateLeft(a, s), b);
  }

  function doII(a, b, c, d, x, s, ac)
  {
    a = addUnsigned(a, addUnsigned(addUnsigned(doI(b, c, d), x), ac));

    return addUnsigned(rotateLeft(a, s), b);
  }

  function convertToWordArray(str)
  {
    let lWordCount;
    const lMessageLength = str.length;
    const lNumberOfWords_temp1=lMessageLength + 8;
    const lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
    const lNumberOfWords = (lNumberOfWords_temp2+1)*16;
    const lWordArray = new Array(lNumberOfWords-1);
    let lBytePosition = 0;
    let lByteCount = 0;

    while (lByteCount < lMessageLength)
    {
      lWordCount = (lByteCount-(lByteCount % 4))/4;
      lBytePosition = (lByteCount % 4)*8;
      lWordArray[lWordCount] = (lWordArray[lWordCount] |
          (str.charCodeAt(lByteCount)<<lBytePosition));
      lByteCount++;
    }
    lWordCount = (lByteCount-(lByteCount % 4))/4;
    lBytePosition = (lByteCount % 4)*8;
    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
    lWordArray[lNumberOfWords-2] = lMessageLength<<3;
    lWordArray[lNumberOfWords-1] = lMessageLength>>>29;

    return lWordArray;
  }

  function wordToHex(lValue)
  {
    let wordToHexValue='', wordToHexValue_temp='', lByte, lCount;

    for (lCount = 0; lCount<=3; lCount++)
    {
      lByte = (lValue>>>(lCount*8)) & 255;
      wordToHexValue_temp = `0${lByte.toString(16)}`;
      wordToHexValue = wordToHexValue +
        wordToHexValue_temp.substr(wordToHexValue_temp.length-2, 2);
    }

    return wordToHexValue;
  }

  function utf8Encode(str)
  {
    str = str.replace(/\r\n/g, '\n');
    let utftext = '';

    for (let n = 0; n < str.length; n++)
    {
      const c = str.charCodeAt(n);

      if (c < 128)
      {
        utftext += String.fromCharCode(c);
      }
      else if ((c > 127) && (c < 2048))
      {
        utftext += String.fromCharCode((c >> 6) | 192);
        utftext += String.fromCharCode((c & 63) | 128);
      }
      else
      {
        utftext += String.fromCharCode((c >> 12) | 224);
        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
        utftext += String.fromCharCode((c & 63) | 128);
      }
    }

    return utftext;
  }

  let x=[];
  let k, AA, BB, CC, DD, a, b, c, d;
  const S11=7, S12=12, S13=17, S14=22;
  const S21=5, S22=9, S23=14, S24=20;
  const S31=4, S32=11, S33=16, S34=23;
  const S41=6, S42=10, S43=15, S44=21;

  string = utf8Encode(string);

  x = convertToWordArray(string);

  a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

  for (k=0; k<x.length; k+=16)
  {
    AA=a; BB=b; CC=c; DD=d;
    a=doFF(a, b, c, d, x[k+0], S11, 0xD76AA478);
    d=doFF(d, a, b, c, x[k+1], S12, 0xE8C7B756);
    c=doFF(c, d, a, b, x[k+2], S13, 0x242070DB);
    b=doFF(b, c, d, a, x[k+3], S14, 0xC1BDCEEE);
    a=doFF(a, b, c, d, x[k+4], S11, 0xF57C0FAF);
    d=doFF(d, a, b, c, x[k+5], S12, 0x4787C62A);
    c=doFF(c, d, a, b, x[k+6], S13, 0xA8304613);
    b=doFF(b, c, d, a, x[k+7], S14, 0xFD469501);
    a=doFF(a, b, c, d, x[k+8], S11, 0x698098D8);
    d=doFF(d, a, b, c, x[k+9], S12, 0x8B44F7AF);
    c=doFF(c, d, a, b, x[k+10], S13, 0xFFFF5BB1);
    b=doFF(b, c, d, a, x[k+11], S14, 0x895CD7BE);
    a=doFF(a, b, c, d, x[k+12], S11, 0x6B901122);
    d=doFF(d, a, b, c, x[k+13], S12, 0xFD987193);
    c=doFF(c, d, a, b, x[k+14], S13, 0xA679438E);
    b=doFF(b, c, d, a, x[k+15], S14, 0x49B40821);
    a=doGG(a, b, c, d, x[k+1], S21, 0xF61E2562);
    d=doGG(d, a, b, c, x[k+6], S22, 0xC040B340);
    c=doGG(c, d, a, b, x[k+11], S23, 0x265E5A51);
    b=doGG(b, c, d, a, x[k+0], S24, 0xE9B6C7AA);
    a=doGG(a, b, c, d, x[k+5], S21, 0xD62F105D);
    d=doGG(d, a, b, c, x[k+10], S22, 0x2441453);
    c=doGG(c, d, a, b, x[k+15], S23, 0xD8A1E681);
    b=doGG(b, c, d, a, x[k+4], S24, 0xE7D3FBC8);
    a=doGG(a, b, c, d, x[k+9], S21, 0x21E1CDE6);
    d=doGG(d, a, b, c, x[k+14], S22, 0xC33707D6);
    c=doGG(c, d, a, b, x[k+3], S23, 0xF4D50D87);
    b=doGG(b, c, d, a, x[k+8], S24, 0x455A14ED);
    a=doGG(a, b, c, d, x[k+13], S21, 0xA9E3E905);
    d=doGG(d, a, b, c, x[k+2], S22, 0xFCEFA3F8);
    c=doGG(c, d, a, b, x[k+7], S23, 0x676F02D9);
    b=doGG(b, c, d, a, x[k+12], S24, 0x8D2A4C8A);
    a=doHH(a, b, c, d, x[k+5], S31, 0xFFFA3942);
    d=doHH(d, a, b, c, x[k+8], S32, 0x8771F681);
    c=doHH(c, d, a, b, x[k+11], S33, 0x6D9D6122);
    b=doHH(b, c, d, a, x[k+14], S34, 0xFDE5380C);
    a=doHH(a, b, c, d, x[k+1], S31, 0xA4BEEA44);
    d=doHH(d, a, b, c, x[k+4], S32, 0x4BDECFA9);
    c=doHH(c, d, a, b, x[k+7], S33, 0xF6BB4B60);
    b=doHH(b, c, d, a, x[k+10], S34, 0xBEBFBC70);
    a=doHH(a, b, c, d, x[k+13], S31, 0x289B7EC6);
    d=doHH(d, a, b, c, x[k+0], S32, 0xEAA127FA);
    c=doHH(c, d, a, b, x[k+3], S33, 0xD4EF3085);
    b=doHH(b, c, d, a, x[k+6], S34, 0x4881D05);
    a=doHH(a, b, c, d, x[k+9], S31, 0xD9D4D039);
    d=doHH(d, a, b, c, x[k+12], S32, 0xE6DB99E5);
    c=doHH(c, d, a, b, x[k+15], S33, 0x1FA27CF8);
    b=doHH(b, c, d, a, x[k+2], S34, 0xC4AC5665);
    a=doII(a, b, c, d, x[k+0], S41, 0xF4292244);
    d=doII(d, a, b, c, x[k+7], S42, 0x432AFF97);
    c=doII(c, d, a, b, x[k+14], S43, 0xAB9423A7);
    b=doII(b, c, d, a, x[k+5], S44, 0xFC93A039);
    a=doII(a, b, c, d, x[k+12], S41, 0x655B59C3);
    d=doII(d, a, b, c, x[k+3], S42, 0x8F0CCC92);
    c=doII(c, d, a, b, x[k+10], S43, 0xFFEFF47D);
    b=doII(b, c, d, a, x[k+1], S44, 0x85845DD1);
    a=doII(a, b, c, d, x[k+8], S41, 0x6FA87E4F);
    d=doII(d, a, b, c, x[k+15], S42, 0xFE2CE6E0);
    c=doII(c, d, a, b, x[k+6], S43, 0xA3014314);
    b=doII(b, c, d, a, x[k+13], S44, 0x4E0811A1);
    a=doII(a, b, c, d, x[k+4], S41, 0xF7537E82);
    d=doII(d, a, b, c, x[k+11], S42, 0xBD3AF235);
    c=doII(c, d, a, b, x[k+2], S43, 0x2AD7D2BB);
    b=doII(b, c, d, a, x[k+9], S44, 0xEB86D391);
    a=addUnsigned(a, AA);
    b=addUnsigned(b, BB);
    c=addUnsigned(c, CC);
    d=addUnsigned(d, DD);
  }

  const temp = wordToHex(a)+wordToHex(b)+wordToHex(c)+wordToHex(d);

  return temp.toLowerCase();
};

exports.closeMediaStream = (stream) =>
{
  if (!stream)
  {
    return;
  }

  // Latest spec states that MediaStream has no stop() method and instead must
  // call stop() on every MediaStreamTrack.
  try
  {
    let tracks;

    if (stream.getTracks)
    {
      tracks = stream.getTracks();
      for (const track of tracks)
      {
        track.stop();
      }
    }
    else
    {
      tracks = stream.getAudioTracks();
      for (const track of tracks)
      {
        track.stop();
      }
      tracks = stream.getVideoTracks();
      for (const track of tracks)
      {
        track.stop();
      }
    }
  }
  catch (error)
  {
    // Deprecated by the spec, but still in use.
    // NOTE: In Temasys IE plugin stream.stop is a callable 'object'.
    if (typeof stream.stop === 'function' || typeof stream.stop === 'object')
    {
      stream.stop();
    }
  }
};

exports.cloneArray = (array) =>
{
  return (array && array.slice()) || [];
};


/***/ }),

/***/ "./sipLib/WebSocketInterface.js":
/*!**************************************!*\
  !*** ./sipLib/WebSocketInterface.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Grammar = __webpack_require__(/*! ./Grammar */ "./sipLib/Grammar.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:WebSocketInterface');
const debugerror = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:ERROR:WebSocketInterface');

debugerror.log = console.warn.bind(console);

module.exports = class WebSocketInterface
{
  constructor(url)
  {
    debug('new() [url:"%s"]', url);

    this._url = url;
    this._sip_uri = null;
    this._via_transport = null;
    this._ws = null;

    const parsed_url = Grammar.parse(url, 'absoluteURI');

    if (parsed_url === -1)
    {
      debugerror(`invalid WebSocket URI: ${url}`);
      throw new TypeError(`Invalid argument: ${url}`);
    }
    else if (parsed_url.scheme !== 'wss' && parsed_url.scheme !== 'ws')
    {
      debugerror(`invalid WebSocket URI scheme: ${parsed_url.scheme}`);
      throw new TypeError(`Invalid argument: ${url}`);
    }
    else
    {
      this._sip_uri = `sip:${parsed_url.host}${parsed_url.port ? `:${parsed_url.port}` : ''};transport=ws`;
      this._via_transport = parsed_url.scheme.toUpperCase();
    }
  }

  get via_transport()
  {
    return this._via_transport;
  }

  set via_transport(value)
  {
    this._via_transport = value.toUpperCase();
  }

  get sip_uri()
  {
    return this._sip_uri;
  }

  get url()
  {
    return this._url;
  }

  connect()
  {
    debug('connect()');

    if (this.isConnected())
    {
      debug(`WebSocket ${this._url} is already connected`);

      return;
    }
    else if (this.isConnecting())
    {
      debug(`WebSocket ${this._url} is connecting`);

      return;
    }

    if (this._ws)
    {
      this.disconnect();
    }

    debug(`connecting to WebSocket ${this._url}`);

    try
    {
      this._ws = new WebSocket(this._url, 'sip');

      this._ws.binaryType = 'arraybuffer';

      this._ws.onopen = this._onOpen.bind(this);
      this._ws.onclose = this._onClose.bind(this);
      this._ws.onmessage = this._onMessage.bind(this);
      this._ws.onerror = this._onError.bind(this);
    }
    catch (e)
    {
      this._onError(e);
    }
  }

  disconnect()
  {
    debug('disconnect()');

    if (this._ws)
    {
      // Unbind websocket event callbacks.
      this._ws.onopen = () => {};
      this._ws.onclose = () => {};
      this._ws.onmessage = () => {};
      this._ws.onerror = () => {};

      this._ws.close();
      this._ws = null;
    }
  }

  send(message)
  {
    debug('send()');

    if (this.isConnected())
    {
      this._ws.send(message);

      return true;
    }
    else
    {
      debugerror('unable to send message, WebSocket is not open');

      return false;
    }
  }

  isConnected()
  {
    return this._ws && this._ws.readyState === this._ws.OPEN;
  }

  isConnecting()
  {
    return this._ws && this._ws.readyState === this._ws.CONNECTING;
  }


  /**
   * WebSocket Event Handlers
   */

  _onOpen()
  {
    debug(`WebSocket ${this._url} connected`);

    this.onconnect();
  }

  _onClose({ wasClean, code, reason })
  {
    debug(`WebSocket ${this._url} closed`);

    if (wasClean === false)
    {
      debug('WebSocket abrupt disconnection');
    }

    const data = {
      socket : this,
      error  : !wasClean,
      code,
      reason
    };

    this.ondisconnect(data);
  }

  _onMessage({ data })
  {
    debug('received WebSocket message');

    this.ondata(data);
  }

  _onError(e)
  {
    debugerror(`WebSocket ${this._url} error: ${e}`);
  }
};


/***/ }),

/***/ "./sipLib/sanityCheck.js":
/*!*******************************!*\
  !*** ./sipLib/sanityCheck.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const JsSIP_C = __webpack_require__(/*! ./Constants */ "./sipLib/Constants.js");
const SIPMessage = __webpack_require__(/*! ./SIPMessage */ "./sipLib/SIPMessage.js");
const Utils = __webpack_require__(/*! ./Utils */ "./sipLib/Utils.js");
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('PlivoSIP:sanityCheck');

// Checks for requests and responses.
const all = [ minimumHeaders ];

// Checks for requests.
const requests = [
  rfc3261_8_2_2_1,
  rfc3261_16_3_4,
  rfc3261_18_3_request,
  rfc3261_8_2_2_2
];

// Checks for responses.
const responses = [
  rfc3261_8_1_3_3,
  rfc3261_18_3_response
];

// local variables.
let message;
let ua;
let transport;

module.exports = (m, u, t) =>
{
  message = m;
  ua = u;
  transport = t;

  for (const check of all)
  {
    if (check() === false)
    {
      return false;
    }
  }

  if (message instanceof SIPMessage.IncomingRequest)
  {
    for (const check of requests)
    {
      if (check() === false)
      {
        return false;
      }
    }
  }

  else if (message instanceof SIPMessage.IncomingResponse)
  {
    for (const check of responses)
    {
      if (check() === false)
      {
        return false;
      }
    }
  }

  // Everything is OK.
  return true;
};


/*
 * Sanity Check for incoming Messages
 *
 * Requests:
 *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme
 *  - _rfc3261_16_3_4_ Receive a Request already sent by us
 *   Does not look at via sent-by but at plivosip_id, which is inserted as
 *   a prefix in all initial requests generated by the ua
 *  - _rfc3261_18_3_request_ Body Content-Length
 *  - _rfc3261_8_2_2_2_ Merged Requests
 *
 * Responses:
 *  - _rfc3261_8_1_3_3_ Multiple Via headers
 *  - _rfc3261_18_3_response_ Body Content-Length
 *
 * All:
 *  - Minimum headers in a SIP message
 */

// Sanity Check functions for requests.
function rfc3261_8_2_2_1()
{
  if (message.s('to').uri.scheme !== 'sip')
  {
    reply(416);

    return false;
  }
}

function rfc3261_16_3_4()
{
  if (!message.to_tag)
  {
    if (message.call_id.substr(0, 5) === ua.configuration.plivosip_id)
    {
      reply(482);

      return false;
    }
  }
}

function rfc3261_18_3_request()
{
  const len = Utils.str_utf8_length(message.body);
  const contentLength = message.getHeader('content-length');

  if (len < contentLength)
  {
    reply(400);

    return false;
  }
}

function rfc3261_8_2_2_2()
{
  const fromTag = message.from_tag;
  const call_id = message.call_id;
  const cseq = message.cseq;
  let tr;

  // Accept any in-dialog request.
  if (message.to_tag)
  {
    return;
  }

  // INVITE request.
  if (message.method === JsSIP_C.INVITE)
  {
    // If the branch matches the key of any IST then assume it is a retransmission
    // and ignore the INVITE.
    // TODO: we should reply the last response.
    if (ua._transactions.ist[message.via_branch])
    {
      return false;
    }
    // Otherwise check whether it is a merged request.
    else
    {
      for (const transaction in ua._transactions.ist)
      {
        if (Object.prototype.hasOwnProperty.call(ua._transactions.ist, transaction))
        {
          tr = ua._transactions.ist[transaction];
          if (tr.request.from_tag === fromTag &&
              tr.request.call_id === call_id &&
              tr.request.cseq === cseq)
          {
            reply(482);

            return false;
          }
        }
      }
    }
  }

  // Non INVITE request.

  // If the branch matches the key of any NIST then assume it is a retransmission
  // and ignore the request.
  // TODO: we should reply the last response.
  else if (ua._transactions.nist[message.via_branch])
  {
    return false;
  }

  // Otherwise check whether it is a merged request.
  else
  {
    for (const transaction in ua._transactions.nist)
    {
      if (Object.prototype.hasOwnProperty.call(ua._transactions.nist, transaction))
      {
        tr = ua._transactions.nist[transaction];
        if (tr.request.from_tag === fromTag &&
            tr.request.call_id === call_id &&
            tr.request.cseq === cseq)
        {
          reply(482);

          return false;
        }
      }
    }
  }
}

// Sanity Check functions for responses.
function rfc3261_8_1_3_3()
{
  if (message.getHeaders('via').length > 1)
  {
    debug('more than one Via header field present in the response, dropping the response');

    return false;
  }
}

function rfc3261_18_3_response()
{
  const len = Utils.str_utf8_length(message.body), contentLength = message.getHeader('content-length');

  if (len < contentLength)
  {
    debug('message body length is lower than the value in Content-Length header field, dropping the response');

    return false;
  }
}

// Sanity Check functions for requests and responses.
function minimumHeaders()
{
  const mandatoryHeaders = [ 'from', 'to', 'call_id', 'cseq', 'via' ];

  for (const header of mandatoryHeaders)
  {
    if (!message.hasHeader(header))
    {
      debug(`missing mandatory header field : ${header}, dropping the response`);

      return false;
    }
  }
}

// Reply.
function reply(status_code)
{
  const vias = message.getHeaders('via');

  let to;
  let response = `SIP/2.0 ${status_code} ${JsSIP_C.REASON_PHRASE[status_code]}\r\n`;

  for (const via of vias)
  {
    response += `Via: ${via}\r\n`;
  }

  to = message.getHeader('To');

  if (!message.to_tag)
  {
    to += `;tag=${Utils.newTag()}`;
  }

  response += `To: ${to}\r\n`;
  response += `From: ${message.getHeader('From')}\r\n`;
  response += `Call-ID: ${message.call_id}\r\n`;
  response += `CSeq: ${message.cseq} ${message.method}\r\n`;
  response += '\r\n';

  transport.send(response);
}


/***/ }),

/***/ 0:
/*!****************************!*\
  !*** multi ./lib/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/index.js */"./lib/index.js");


/***/ })

/******/ });
});

/***/ })

}]);
//# sourceMappingURL=default~setting-setting-module~status-active-active-module~status-manualDial-manualDial-module.js.map