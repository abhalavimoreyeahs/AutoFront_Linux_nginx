{"version":3,"sources":["webpack:///./src/app/layout/onBoardEmployee/employee-routing.module.ts","webpack:///./src/app/layout/onBoardEmployee/employee.component.css","webpack:///./src/app/layout/onBoardEmployee/employee.component.html","webpack:///./src/app/layout/onBoardEmployee/employee.component.ts","webpack:///./src/app/layout/onBoardEmployee/employee.module.ts"],"names":[],"mappings":"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","file":"onBoardEmployee-employee-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { EmployeeComponent } from './employee.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: EmployeeComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class EmployeeRoutingModule {}","module.exports = \" .my-form{\\n    min-width: 150px;\\n    max-width: 500px;\\n    width: 80%;\\n  }\\n   \\n  .full-width {\\n    width: 60%;\\n  }\\n   \\n  .center{\\n    width: 75%;\\n    margin: 10px auto;\\n  }\\n   \\n  .main-div{\\n    height: 100vh;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n  }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGF5b3V0L29uQm9hcmRFbXBsb3llZS9lbXBsb3llZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJDQUFDO0lBQ0csZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixVQUFVO0VBQ1o7O0VBRUE7SUFDRSxVQUFVO0VBQ1o7O0VBR0E7SUFDRSxVQUFVO0lBQ1YsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsYUFBYTtJQUNiLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0VBQ3JCIiwiZmlsZSI6InNyYy9hcHAvbGF5b3V0L29uQm9hcmRFbXBsb3llZS9lbXBsb3llZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiIC5teS1mb3Jte1xuICAgIG1pbi13aWR0aDogMTUwcHg7XG4gICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgICB3aWR0aDogODAlO1xuICB9XG4gICBcbiAgLmZ1bGwtd2lkdGgge1xuICAgIHdpZHRoOiA2MCU7XG4gIH0gXG5cblxuICAuY2VudGVye1xuICAgIHdpZHRoOiA3NSU7XG4gICAgbWFyZ2luOiAxMHB4IGF1dG87XG4gIH1cbiAgXG4gIC5tYWluLWRpdntcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuIl19 */\"","module.exports = \"<div class=\\\"container\\\">\\n \\n    <mat-toolbar >\\n            <div style=\\\"text-align:center\\\">\\n                    <span style=\\\"  display: inline-block;\\n                   \\n                    margin: 10px 10px 0 0;\\n                    padding: 5px 10px\\\">Register Employee</span>\\n            </div>\\n      </mat-toolbar>\\n      <mat-card class=\\\"my-card\\\">      \\n          <!-- CONTENT HERE -->\\n      \\n      <mat-card-content class=\\\"z-depth center\\\" flex=\\\"50\\\">\\n        <form class=\\\"my-form\\\">\\n           <mat-form-field class=\\\"full-width\\\">\\n                  <mat-label>Employee First Name</mat-label>\\n                  <input  matInput  placeholder=\\\"Employee First Name\\\"  [(ngModel)]=\\\"Employee.firstName\\\" name=\\\"firstName\\\"  required>\\n               </mat-form-field><br>\\n    \\n               <mat-form-field class=\\\"full-width\\\">\\n                  <mat-label>Employee Last Name</mat-label>\\n                  <input  matInput  placeholder=\\\"Employee Last Name\\\"  [(ngModel)]=\\\"Employee.lastName\\\" name=\\\"lastName\\\"  required>\\n               </mat-form-field><br>\\n    \\n               <mat-form-field class=\\\"full-width\\\">\\n                  <mat-label>Employee Email</mat-label>\\n                  <input  matInput type=\\\"email\\\" placeholder=\\\"Employee Email\\\" name=\\\"email\\\"  [(ngModel)]=\\\"Employee.email\\\" required>\\n               </mat-form-field><br>\\n               <!-- <mat-form-field>\\n                    <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\" (input)=\\\"onPasswordInput()\\\">\\n                    <mat-error *ngIf=\\\"password.hasError('required')\\\">Password is required</mat-error>\\n                    <mat-error *ngIf=\\\"password.hasError('minlength')\\\">Password must have at least {{minPw}} characters</mat-error>\\n                  </mat-form-field>\\n                \\n                  <mat-form-field>\\n                    <input matInput type=\\\"password\\\" placeholder=\\\"Confirm password\\\" formControlName=\\\"password2\\\" (input)=\\\"onPasswordInput()\\\">\\n                    <mat-error *ngIf=\\\"password2.hasError('required')\\\">Please confirm your password</mat-error>\\n                    <mat-error *ngIf=\\\"password2.invalid && !password2.hasError('required')\\\">Passwords don't match</mat-error>\\n                  </mat-form-field> -->\\n                  <mat-form-field>\\n                        <input matInput placeholder=\\\"New password\\\" type=\\\"password\\\" [(ngModel)]=\\\"Employee.password\\\" name=\\\"password\\\" required>\\n                        <mat-error *ngIf=\\\"myForm.hasError('required', 'password')\\\">\\n                            Please enter your newpassword\\n                        </mat-error>\\n                    </mat-form-field><br>\\n                \\n                    <mat-form-field>\\n                        <input matInput placeholder=\\\"Confirm password\\\" type=\\\"password\\\"  [errorStateMatcher]=\\\"matcher\\\">\\n                          <mat-error *ngIf=\\\"myForm.hasError('notSame')\\\">\\n                            Passwords do not match\\n                        </mat-error>  \\n                    </mat-form-field><br>\\n    \\n                  <mat-form-field class=\\\"full-width\\\">\\n                        <mat-label>Age</mat-label>\\n                        <input  matInput  placeholder=\\\"age\\\" name=\\\"age\\\" [(ngModel)]=\\\"Employee.age\\\"  required>\\n                     </mat-form-field><br>\\n    \\n                  <section class=\\\"example-section\\\">\\n                        <label class=\\\"example-margin\\\">Gender:</label>\\n                        <mat-radio-group name=\\\"gender\\\" [(ngModel)]=\\\"Employee.gender\\\" required> <!--[(ngModel)]=\\\"gender\\\"-->\\n                          <mat-radio-button class=\\\"example-margin\\\" value=\\\"after\\\" style=\\\"margin-left: 5px\\\" value=\\\"male\\\"  >Male</mat-radio-button>\\n                          <mat-radio-button class=\\\"example-margin\\\" value=\\\"before\\\" style=\\\"margin-left: 5px\\\" value=\\\"female\\\"   >Female</mat-radio-button>\\n                          <mat-radio-button class=\\\"example-margin\\\" value=\\\"before\\\" style=\\\"margin-left: 5px\\\" value=\\\"other\\\"  >Other</mat-radio-button>\\n                        </mat-radio-group>\\n                      </section>\\n    \\n                      <mat-form-field class=\\\"full-width\\\">\\n                            <mat-label>Mobile No</mat-label>\\n                            <input  matInput  placeholder=\\\"Mobile Number\\\" name=\\\"mobile\\\" [(ngModel)]=\\\"Employee.mobile\\\" required>\\n                         </mat-form-field><br>\\n    \\n                         <mat-form-field hintLabel=\\\"select one\\\">\\n                                <mat-select placeholder=\\\"Select Role\\\" [(ngModel)]=\\\"Employee.role\\\" name=\\\"role\\\" (ngModelChange)=\\\"selectRole()\\\">\\n                                \\n                                    <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.id\\\" >\\n                                                        {{ role.name }}\\n                                    </mat-option>\\n                                </mat-select>\\n                                </mat-form-field><br>\\n    \\n                                <mat-form-field class=\\\"full-width\\\" *ngIf=\\\"AgentBoolean\\\">\\n                                  <mat-label>Plivo Agent Username</mat-label>\\n                                  <input  matInput  placeholder=\\\"Plivo Agent User name\\\" name=\\\"plivoagentusername\\\" [(ngModel)]=\\\"Employee.plivoagentusername\\\" required>\\n                               </mat-form-field>\\n    \\n                               <mat-form-field class=\\\"full-width\\\" *ngIf=\\\"AgentBoolean\\\">\\n                                <mat-label>Plivo Agent Password</mat-label>\\n                                <input  matInput  placeholder=\\\"Plivo Agent Password\\\" name=\\\"plivoagentPassword\\\" [(ngModel)]=\\\"Employee.plivoagentPassword\\\" required>\\n                             </mat-form-field>\\n    \\n                             <mat-form-field class=\\\"full-width\\\" *ngIf=\\\"AgentBoolean\\\">\\n                              <mat-label>Plivo Agent Alias</mat-label>\\n                              <input  matInput  placeholder=\\\"Plivo Agent Alias\\\" name=\\\"plivoagnetalias\\\" [(ngModel)]=\\\"Employee.plivoagnetalias\\\" required>\\n                           </mat-form-field>\\n    \\n    \\n               <mat-form-field class=\\\"full-width\\\">\\n                  <mat-label>Address</mat-label>\\n                  <input  matInput  placeholder=\\\"Address\\\" name=\\\"address\\\" [(ngModel)]=\\\"Employee.address\\\">\\n               </mat-form-field><br>\\n    \\n               <mat-form-field class=\\\"full-width\\\">\\n                  <mat-label>City</mat-label>\\n                  <input  matInput  placeholder=\\\"City\\\"  name=\\\"city\\\" [(ngModel)]=\\\"Employee.city\\\">\\n               </mat-form-field>\\n            \\n           \\n              <!-- <mat-form-field>\\n                <mat-label>Date of Birth</mat-label>\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #picker></mat-datepicker>\\n          </mat-form-field> -->\\n    \\n          <mat-card-content>\\n            <form class=\\\"my-form\\\">\\n               <!--FORM FIELDS-->\\n            </form>\\n          </mat-card-content>\\n          <mat-card-actions>\\n            <button mat-raised-button (click)=\\\"register()\\\" color=\\\"primary\\\">REGISTER</button>\\n          </mat-card-actions>\\n        </form>\\n      </mat-card-content>\\n        \\n        <mat-card-actions>\\n          <!-- REGISTER BUTTON -->\\n        </mat-card-actions>\\n      </mat-card>\\n    \\n    </div>\"","import { Component, OnInit } from '@angular/core';\n//import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n//import { FarmService } from '../../farm.service';\nimport { AutoDialService } from '../../autoDialer.service';\nimport { FormControl, FormGroupDirective, NgForm, Validators, FormGroup, FormBuilder } from '@angular/forms';\nimport { ErrorStateMatcher } from '@angular/material/core';\n@Component({\n    selector: 'app-employee',\n    templateUrl: './employee.component.html',\n    styleUrls: ['./employee.component.css']\n})\nexport class EmployeeComponent implements OnInit {\n   \n    constructor(private formBuilder: FormBuilder, private service:  AutoDialService) {\n        this.myForm = this.formBuilder.group({\n            password: ['', [Validators.required]],\n            confirmPassword: ['']\n          }, { validator: this.checkPasswords });\n      \n    }\n    Employee = {};\n    AgentBoolean: Boolean = false;\n\n    ngOnInit() {\n       \n    }\n\n    roles =[\n        { id:1, name: 'Admin'},\n        { id:2, name: 'Manager'},\n        { id:3, name: 'Agent'},\n        \n    ]\n    myForm: FormGroup;\n\n    matcher = new MyErrorStateMatcher();\n    selectRole(){\n      debugger;\n     if(this.Employee['role'] == 3){\n       this.AgentBoolean = true;\n     }else{\n       this.AgentBoolean = false;\n     }\n    }\n \n    checkPasswords(group: FormGroup) { // here we have the 'passwords' group\n      let pass = group.controls.password.value;\n      let confirmPass = group.controls.confirmPassword.value;\n  \n      return pass === confirmPass ? null : { notSame: true }\n    }\n    register(){\n     this.service.saveEmployee(this.Employee).subscribe((data)=>{\n         console.log(data);\n         if(data.success === true){\n           alert('data successfully saved');\n         }\n     })\n        //console.log(this.Employee);\n    }\n\n}\n\n\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n      const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\n      const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty);\n  \n      return (invalidCtrl || invalidParent);\n    }\n  }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EmployeeRoutingModule } from './employee-routing.module';\nimport { EmployeeComponent } from './employee.component';\nimport { FormsModule } from '@angular/forms';\nimport { MaterialModule } from '../../material/material.module';\n\n@NgModule({\n    imports: [CommonModule, EmployeeRoutingModule,FormsModule, MaterialModule],\n    declarations: [ EmployeeComponent ]\n})\nexport class EmployeeModule {}\n"],"sourceRoot":""}